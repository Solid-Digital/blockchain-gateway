// Code generated by go-swagger; DO NOT EDIT.

{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package handlers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "net/http"

  "github.com/unchainio/pkg/errors"
  "github.com/go-openapi/swag"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/validate"

  strfmt "github.com/go-openapi/strfmt"
  "github.com/google/wire"
  "github.com/unchainio/interfaces/logger"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
  "bitbucket.org/unchain/ares/pkg/ares"
  "bitbucket.org/unchain/ares/pkg/domain"
  "bitbucket.org/unchain/ares/gen/api"
  "github.com/go-openapi/runtime/middleware"
)

{{ $handlerName := pascalize .Name }}

var _ api.{{$handlerName}}API = &{{$handlerName}}Handler{}

var {{$handlerName}}Set = wire.NewSet(New{{$handlerName}}Handler, wire.Bind(new(api.{{$handlerName}}API), new({{$handlerName}}Handler)))

// FIXME(go-swagger): Add the required parameters for New{{$handlerName}}
// New{{$handlerName}}Handler
func New{{$handlerName}}Handler(service ares.{{ pascalize .Name}}Service, log logger.Logger) *{{$handlerName}}Handler {
    return &{{$handlerName}}Handler {
        service: service,
        log: log,
    }
}

// FIXME(go-swagger): Add the required fields for {{ pascalize .Name }}Handler
// {{ pascalize .Name }}Handler is an empty implementation of the api.{{ pascalize .Name }}API interface.
type {{ pascalize .Name }}Handler struct {
    service ares.{{ pascalize .Name}}Service
    log logger.Logger
}

{{ range .Operations -}}
// {{ pascalize .Name }} {{ .Description }}
func (h *{{ $handlerName }}Handler) {{ pascalize .Name }}(params {{.Package}}.{{ pascalize .Name }}Params{{ if .Authorized -}}, principal {{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}{{ end }}) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.{{ pascalize .Name }}()
    {{$first := false}}
    // ret, err := h.service.{{ pascalize .Name }}({{range .QueryParams}}{{if $first}}, {{else}}{{$first = true}}{{end}}params.{{pascalize .Name}}{{end}}{{range .Params}}{{if $first}}, {{else}}{{$first = true}}{{end}}params.{{pascalize .Name}}{{end}})

	//if err != nil {
        // h.log.Errorf("%+v", err)
        // // FIXME(go-swagger): Handle errors
        {{range .Responses}}{{if not .IsSuccess}}// // FIXME(go-swagger): return error with code {{.Code}} - {{.Description}}
        // return &{{.Package}}.{{pascalize .Name}} {
        //    Payload: errors.Message(err, 1),
        //}
        {{end}}{{end}}//
	//}

    // // FIXME(go-swagger): transform the values returned by h.Service.{{ pascalize .Name }}(params) to &{{.SuccessResponse.Package}}.{{pascalize .SuccessResponse.Name}}
	//return &{{.SuccessResponse.Package}}.{{pascalize .SuccessResponse.Name}} {
    // Payload: ret,
	//}


    return middleware.NotImplemented("operation {{ pascalize .Name }} has not yet been implemented")
}
{{ end -}}
