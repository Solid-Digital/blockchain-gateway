package http

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bitbucket.org/unchain/ares/gen/api/operations/organization"
	"bitbucket.org/unchain/ares/pkg/3p/apperr"
	chimiddleware "github.com/go-chi/chi/middleware"
	"github.com/google/wire"
	"github.com/unchainio/interfaces/logger"

	dto "bitbucket.org/unchain/ares/gen/dto"

	"bitbucket.org/unchain/ares/gen/api"
	"bitbucket.org/unchain/ares/pkg/ares"
	"github.com/go-openapi/runtime/middleware"
)

var _ api.OrganizationAPI = &OrganizationHandler{}

var OrganizationSet = wire.NewSet(NewOrganizationHandler, wire.Bind(new(api.OrganizationAPI), new(OrganizationHandler)))

// NewOrganizationHandler
func NewOrganizationHandler(service ares.OrganizationService, log logger.Logger) *OrganizationHandler {
	return &OrganizationHandler{
		service: service,
		log:     log,
	}
}

// OrganizationHandler is an empty implementation of the api.OrganizationAPI interface.
type OrganizationHandler struct {
	service ares.OrganizationService
	log     logger.Logger
}

// CreateOrganization
func (h *OrganizationHandler) CreateOrganization(params organization.CreateOrganizationParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.CreateOrganization(params.Body, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.CreateOrganizationCreated{
		Payload: ret,
	}
}

// GetAllMembers Get all members of an organization
func (h *OrganizationHandler) GetAllMembers(params organization.GetAllMembersParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetAllMembers(params.OrgName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.GetAllMembersOK{
		Payload: ret,
	}
}

// GetAllOrganizations
func (h *OrganizationHandler) GetAllOrganizations(params organization.GetAllOrganizationsParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetAllOrganizations(principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.GetAllOrganizationsOK{
		Payload: ret,
	}
}

// GetMember
func (h *OrganizationHandler) GetMember(params organization.GetMemberParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetMember(string(params.Email), params.OrgName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.GetMemberOK{
		Payload: ret,
	}
}

// GetOrganization
func (h *OrganizationHandler) GetOrganization(params organization.GetOrganizationParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetOrganization(params.OrgName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.GetOrganizationOK{
		Payload: ret,
	}
}

// InviteMember
func (h *OrganizationHandler) InviteMember(params organization.InviteMemberParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.InviteMember(params.Body, params.OrgName)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.InviteMemberOK{
		Payload: ret,
	}
}

// RemoveMember
func (h *OrganizationHandler) RemoveMember(params organization.RemoveMemberParams, principal *dto.User) middleware.Responder {
	err := h.service.RemoveMember(string(params.Email), params.OrgName)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.RemoveMemberNoContent{}
}

// SetMemberRoles
func (h *OrganizationHandler) SetMemberRoles(params organization.SetMemberRolesParams, principal *dto.User) middleware.Responder {
	err := h.service.SetMemberRoles(params.Body, string(params.Email), params.OrgName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.SetMemberRolesOK{}
}

// UpdateOrganization
func (h *OrganizationHandler) UpdateOrganization(params organization.UpdateOrganizationParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateOrganization(params.Body, params.OrgName)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &organization.UpdateOrganizationOK{
		Payload: ret,
	}
}
