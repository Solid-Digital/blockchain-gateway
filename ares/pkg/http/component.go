package http

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"bitbucket.org/unchain/ares/pkg/3p/apperr"

	"github.com/unchainio/pkg/errors"

	"bitbucket.org/unchain/ares/gen/api/operations/component"
	"bitbucket.org/unchain/ares/pkg/ares"
	chimiddleware "github.com/go-chi/chi/middleware"
	"github.com/google/wire"
	"github.com/unchainio/interfaces/logger"

	"bitbucket.org/unchain/ares/gen/dto"

	"bitbucket.org/unchain/ares/gen/api"
	"github.com/go-openapi/runtime/middleware"
)

var _ api.ComponentAPI = &ComponentHandler{}

var ComponentSet = wire.NewSet(NewComponentHandler, wire.Bind(new(api.ComponentAPI), new(ComponentHandler)))

// NewComponentHandler
func NewComponentHandler(service ares.ComponentService, log logger.Logger) *ComponentHandler {
	return &ComponentHandler{
		service: service,
		log:     log,
	}
}

// ComponentHandler is an empty implementation of the api.ComponentAPI interface.
type ComponentHandler struct {
	service ares.ComponentService
	log     logger.Logger
}

// CreateAction
func (h *ComponentHandler) CreateAction(params component.CreateActionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.CreateAction(params.Body, params.OrgName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.CreateActionOK{
		Payload: ret,
	}
}

// CreateActionVersion If the action that this version belongs to doesn't already exist, it will be created
func (h *ComponentHandler) CreateActionVersion(params component.CreateActionVersionParams, principal *dto.User) middleware.Responder {
	p, err := getActionVersionParams(params, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	ret, err := h.service.CreateActionVersion(p)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.CreateActionVersionOK{
		Payload: ret,
	}
}

func getActionVersionParams(params component.CreateActionVersionParams, principal *dto.User) (*ares.CreateActionVersionRequest, *apperr.Error) {
	p := &ares.CreateActionVersionRequest{
		OrgName:    params.OrgName,
		Name:       params.Name,
		ActionFile: params.ActionFile,
		Principal:  principal,
	}
	if params.Description != nil {
		p.Description = *params.Description
	}
	if params.Version != nil {
		p.Version = *params.Version
	}
	if params.Readme != nil {
		p.Readme = *params.Readme
	}
	if params.ExampleConfig != nil {
		p.ExampleConfig = *params.ExampleConfig
	}

	p.Public = params.Public

	if params.InputSchema != nil {
		err := json.Unmarshal([]byte(*params.InputSchema), &p.InputSchema)

		if err != nil {
			return nil, ares.ErrParseInputSchema(errors.Wrap(err, ""))
		}
	}

	if params.OutputSchema != nil {
		err := json.Unmarshal([]byte(*params.OutputSchema), &p.OutputSchema)

		if err != nil {
			return nil, ares.ErrParseOutputSchema(errors.Wrap(err, ""))
		}
	}

	return p, nil
}

func getTriggerVersionParams(params component.CreateTriggerVersionParams, principal *dto.User) (*ares.CreateTriggerVersionRequest, *apperr.Error) {
	p := &ares.CreateTriggerVersionRequest{
		OrgName:     params.OrgName,
		Name:        params.Name,
		TriggerFile: params.TriggerFile,
		Principal:   principal,
	}
	if params.Description != nil {
		p.Description = *params.Description
	}
	if params.Version != nil {
		p.Version = *params.Version
	}
	if params.Readme != nil {
		p.Readme = *params.Readme
	}
	if params.ExampleConfig != nil {
		p.ExampleConfig = *params.ExampleConfig
	}

	p.Public = params.Public

	if params.InputSchema != nil {
		err := json.Unmarshal([]byte(*params.InputSchema), &p.InputSchema)

		if err != nil {
			return nil, ares.ErrParseInputSchema(errors.Wrap(err, ""))
		}
	}

	if params.OutputSchema != nil {
		err := json.Unmarshal([]byte(*params.OutputSchema), &p.OutputSchema)

		if err != nil {
			return nil, ares.ErrParseOutputSchema(errors.Wrap(err, ""))
		}
	}

	return p, nil
}

// CreateBase
func (h *ComponentHandler) CreateBase(params component.CreateBaseParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.CreateBase(params.Body, params.OrgName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.CreateBaseOK{
		Payload: ret,
	}
}

// CreateBaseVersion If the base that this version belongs to doesn't already exist, it will be created
func (h *ComponentHandler) CreateBaseVersion(params component.CreateBaseVersionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.CreateBaseVersion(params.Body, params.OrgName, params.Name, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.CreateBaseVersionOK{
		Payload: ret,
	}
}

// CreateTrigger
func (h *ComponentHandler) CreateTrigger(params component.CreateTriggerParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.CreateTrigger(params.Body, params.OrgName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.CreateTriggerOK{
		Payload: ret,
	}
}

// CreateTriggerVersion If the trigger that this version belongs to doesn't already exist, it will be created
func (h *ComponentHandler) CreateTriggerVersion(params component.CreateTriggerVersionParams, principal *dto.User) middleware.Responder {
	p, err := getTriggerVersionParams(params, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	ret, err := h.service.CreateTriggerVersion(p)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.CreateTriggerVersionOK{
		Payload: ret,
	}
}

// GetAction Get a action component with all its versions
func (h *ComponentHandler) GetAction(params component.GetActionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetAction(params.OrgName, params.Name)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetActionOK{
		Payload: ret,
	}
}

// GetActionVersion
func (h *ComponentHandler) GetActionVersion(params component.GetActionVersionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetActionVersion(params.OrgName, params.Name, params.Version)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetActionVersionOK{
		Payload: ret,
	}
}

// GetAllActions
func (h *ComponentHandler) GetAllActions(params component.GetAllActionsParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetAllActions(params.OrgName, params.Available)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetAllActionsOK{
		Payload: ret,
	}
}

// GetAllBases
func (h *ComponentHandler) GetAllBases(params component.GetAllBasesParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetAllBases(params.OrgName, params.Available)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetAllBasesOK{
		Payload: ret,
	}
}

// GetAllPublicActions
func (h *ComponentHandler) GetAllPublicActions(params component.GetAllPublicActionsParams) middleware.Responder {
	ret, err := h.service.GetAllPublicActions()
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetAllPublicActionsOK{
		Payload: ret,
	}
}

// GetAllPublicTriggers
func (h *ComponentHandler) GetAllPublicTriggers(params component.GetAllPublicTriggersParams) middleware.Responder {
	ret, err := h.service.GetAllPublicTriggers()
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetAllPublicTriggersOK{
		Payload: ret,
	}
}

// GetAllTriggers
func (h *ComponentHandler) GetAllTriggers(params component.GetAllTriggersParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetAllTriggers(params.OrgName, params.Available)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetAllTriggersOK{
		Payload: ret,
	}
}

// GetBase Get a base component with all its versions
func (h *ComponentHandler) GetBase(params component.GetBaseParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetBase(params.OrgName, params.Name)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetBaseOK{
		Payload: ret,
	}
}

// GetBaseVersion
func (h *ComponentHandler) GetBaseVersion(params component.GetBaseVersionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetBaseVersion(params.OrgName, params.Name, params.Version)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetBaseVersionOK{
		Payload: ret,
	}
}

// GetPublicAction Get a public action component with all its versions
func (h *ComponentHandler) GetPublicAction(params component.GetPublicActionParams) middleware.Responder {
	ret, err := h.service.GetPublicAction(params.Name)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetPublicActionOK{
		Payload: ret,
	}
}

// GetPublicActionVersion
func (h *ComponentHandler) GetPublicActionVersion(params component.GetPublicActionVersionParams) middleware.Responder {
	ret, err := h.service.GetPublicActionVersion(params.Name, params.Version)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetPublicActionVersionOK{
		Payload: ret,
	}
}

// GetPublicTrigger Get a public trigger component with all its versions
func (h *ComponentHandler) GetPublicTrigger(params component.GetPublicTriggerParams) middleware.Responder {
	ret, err := h.service.GetPublicTrigger(params.Name)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetPublicTriggerOK{
		Payload: ret,
	}
}

// GetPublicTriggerVersion
func (h *ComponentHandler) GetPublicTriggerVersion(params component.GetPublicTriggerVersionParams) middleware.Responder {
	ret, err := h.service.GetPublicTriggerVersion(params.Name, params.Version)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetPublicTriggerVersionOK{
		Payload: ret,
	}
}

// GetTrigger Get a trigger component with all its versions
func (h *ComponentHandler) GetTrigger(params component.GetTriggerParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetTrigger(params.OrgName, params.Name)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetTriggerOK{
		Payload: ret,
	}
}

// GetTriggerVersion
func (h *ComponentHandler) GetTriggerVersion(params component.GetTriggerVersionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetTriggerVersion(params.OrgName, params.Name, params.Version)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.GetTriggerVersionOK{
		Payload: ret,
	}
}

// UpdateAction Update a action component
func (h *ComponentHandler) UpdateAction(params component.UpdateActionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateAction(params.Body, params.OrgName, params.Name, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.UpdateActionOK{
		Payload: ret,
	}
}

// UpdateActionVersion
func (h *ComponentHandler) UpdateActionVersion(params component.UpdateActionVersionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateActionVersion(params.Body, params.OrgName, params.Name, params.Version, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.UpdateActionVersionOK{
		Payload: ret,
	}
}

// UpdateBase Update a base component
func (h *ComponentHandler) UpdateBase(params component.UpdateBaseParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateBase(params.Body, params.OrgName, params.Name, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.UpdateBaseOK{
		Payload: ret,
	}
}

// UpdateBaseVersion
func (h *ComponentHandler) UpdateBaseVersion(params component.UpdateBaseVersionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateBaseVersion(params.Body, params.OrgName, params.Name, params.Version, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.UpdateBaseVersionOK{
		Payload: ret,
	}
}

// UpdateTrigger Update a trigger component
func (h *ComponentHandler) UpdateTrigger(params component.UpdateTriggerParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateTrigger(params.Body, params.OrgName, params.Name, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.UpdateTriggerOK{
		Payload: ret,
	}
}

// UpdateTriggerVersion
func (h *ComponentHandler) UpdateTriggerVersion(params component.UpdateTriggerVersionParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateTriggerVersion(params.Body, params.OrgName, params.Name, params.Version, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &component.UpdateTriggerVersionOK{
		Payload: ret,
	}
}
