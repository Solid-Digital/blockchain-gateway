package http

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bitbucket.org/unchain/ares/gen/api/operations/pipeline"
	"bitbucket.org/unchain/ares/pkg/3p/apperr"
	chimiddleware "github.com/go-chi/chi/middleware"
	"github.com/google/wire"
	"github.com/unchainio/interfaces/logger"

	dto "bitbucket.org/unchain/ares/gen/dto"

	"bitbucket.org/unchain/ares/gen/api"
	"bitbucket.org/unchain/ares/pkg/ares"
	"github.com/go-openapi/runtime/middleware"
)

var _ api.PipelineAPI = &PipelineHandler{}

var PipelineSet = wire.NewSet(NewPipelineHandler, wire.Bind(new(api.PipelineAPI), new(PipelineHandler)))

// NewPipelineHandler
func NewPipelineHandler(service ares.PipelineService, log logger.Logger) *PipelineHandler {
	return &PipelineHandler{
		service: service,
		log:     log,
	}
}

// PipelineHandler is an empty implementation of the api.PipelineAPI interface.
type PipelineHandler struct {
	service ares.PipelineService
	log     logger.Logger
}

// CreateEnvironmentVariable
func (h *PipelineHandler) CreateEnvironmentVariable(params pipeline.CreateEnvironmentVariableParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.CreateEnvironmentVariable(params.Body, params.OrgName, params.PipelineName, params.EnvName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.CreateEnvironmentVariableOK{
		Payload: ret,
	}
}

// CreatePipeline
func (h *PipelineHandler) CreatePipeline(params pipeline.CreatePipelineParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.CreatePipeline(params.Body, params.OrgName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.CreatePipelineOK{
		Payload: ret,
	}
}

// DeleteEnvironmentVariable
func (h *PipelineHandler) DeleteEnvironmentVariable(params pipeline.DeleteEnvironmentVariableParams, principal *dto.User) middleware.Responder {
	err := h.service.DeleteEnvironmentVariable(params.OrgName, params.PipelineName, params.EnvName, params.VarID, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.DeleteEnvironmentVariableNoContent{}
}

// DeletePipeline
func (h *PipelineHandler) DeletePipeline(params pipeline.DeletePipelineParams, principal *dto.User) middleware.Responder {
	err := h.service.DeletePipeline(params.OrgName, params.PipelineName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.DeletePipelineNoContent{}
}

// DeployConfiguration Deploy a pipeline configuration to a specific environment within the pipeline context
func (h *PipelineHandler) DeployConfiguration(params pipeline.DeployConfigurationParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.DeployConfiguration(params.Body, params.OrgName, params.PipelineName, params.EnvName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.DeployConfigurationOK{
		Payload: ret,
	}
}

// GetAllEnvironmentVariables
func (h *PipelineHandler) GetAllEnvironmentVariables(params pipeline.GetAllEnvironmentVariablesParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetAllEnvironmentVariables(params.OrgName, params.PipelineName, params.EnvName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.GetAllEnvironmentVariablesOK{
		Payload: ret,
	}
}

// GetAllPipelines Get all pipelines for the organization
func (h *PipelineHandler) GetAllPipelines(params pipeline.GetAllPipelinesParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetAllPipelines(params.OrgName)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.GetAllPipelinesOK{
		Payload: ret,
	}
}

// GetConfiguration
func (h *PipelineHandler) GetConfiguration(params pipeline.GetConfigurationParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetConfiguration(params.OrgName, params.PipelineName, params.Revision)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.GetConfigurationOK{
		Payload: ret,
	}
}

// GetDeployment
func (h *PipelineHandler) GetDeployment(params pipeline.GetDeploymentParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetDeployment(params.OrgName, params.PipelineName, params.EnvName)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.GetDeploymentOK{
		Payload: ret,
	}
}

// GetDeploymentLogs
func (h *PipelineHandler) GetDeploymentLogs(params pipeline.GetDeploymentLogsParams, principal *dto.User) middleware.Responder {
	var from, to, limit string
	if params.From != nil {
		from = *params.From
	}
	if params.To != nil {
		to = *params.To
	}
	if params.Limit != nil {
		limit = *params.Limit
	}

	// currently, limit is not used
	ret, err := h.service.GetDeploymentLogs(params.OrgName, params.PipelineName, params.EnvName, from, to, limit)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.GetDeploymentLogsOK{
		Payload: ret,
	}
}

// GetDraftConfiguration
func (h *PipelineHandler) GetDraftConfiguration(params pipeline.GetDraftConfigurationParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetDraftConfiguration(params.OrgName, params.PipelineName)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.GetDraftConfigurationOK{
		Payload: ret,
	}
}

// GetPipeline Get the pipeline with all its different configurations and deployments.
func (h *PipelineHandler) GetPipeline(params pipeline.GetPipelineParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetPipeline(params.OrgName, params.PipelineName)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.GetPipelineOK{
		Payload: ret,
	}
}

// RemoveDeployment
func (h *PipelineHandler) RemoveDeployment(params pipeline.RemoveDeploymentParams, principal *dto.User) middleware.Responder {
	err := h.service.RemoveDeployment(params.OrgName, params.PipelineName, params.EnvName)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.RemoveDeploymentNoContent{}
}

// SaveDraftConfigurationAsNew A new configuration is created by auto-incrementing the latest version by 1.
func (h *PipelineHandler) SaveDraftConfigurationAsNew(params pipeline.SaveDraftConfigurationAsNewParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.SaveDraftConfigurationAsNew(params.Body, params.OrgName, params.PipelineName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.SaveDraftConfigurationAsNewOK{
		Payload: ret,
	}
}

// UpdateDraftConfiguration The latest configuration version is not stored as a numbered version yet and is the only configuration that can be updated.
func (h *PipelineHandler) UpdateDraftConfiguration(params pipeline.UpdateDraftConfigurationParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateDraftConfiguration(params.Body, params.OrgName, params.PipelineName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.UpdateDraftConfigurationOK{
		Payload: ret,
	}
}

// UpdateEnvironmentVariable
func (h *PipelineHandler) UpdateEnvironmentVariable(params pipeline.UpdateEnvironmentVariableParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateEnvironmentVariable(params.Body, params.OrgName, params.PipelineName, params.EnvName, params.VarID, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.UpdateEnvironmentVariableOK{
		Payload: ret,
	}
}

// UpdatePipeline
func (h *PipelineHandler) UpdatePipeline(params pipeline.UpdatePipelineParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdatePipeline(params.Body, params.OrgName, params.PipelineName, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &pipeline.UpdatePipelineOK{
		Payload: ret,
	}
}
