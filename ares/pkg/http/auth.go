package http

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net"
	"net/url"
	"strings"

	"bitbucket.org/unchain/ares/pkg/3p/apperr"
	chimiddleware "github.com/go-chi/chi/middleware"

	"github.com/go-openapi/runtime/middleware"
	"github.com/google/wire"
	"github.com/unchainio/interfaces/logger"

	"bitbucket.org/unchain/ares/gen/api/operations/auth"
	"bitbucket.org/unchain/ares/pkg/ares"

	"bitbucket.org/unchain/ares/gen/dto"

	"net/http"

	"bitbucket.org/unchain/ares/gen/api"
	"github.com/go-openapi/runtime"
)

const fmtUrl = "%s/sign-up?%s"

var _ api.AuthAPI = &AuthHandler{}

var AuthSet = wire.NewSet(NewAuthHandler, wire.Bind(new(api.AuthAPI), new(AuthHandler)))

// NewAuthHandler
func NewAuthHandler(service ares.AuthService, log logger.Logger) *AuthHandler {
	return &AuthHandler{
		service: service,
		log:     log,
	}
}

// AuthHandler is an empty implementation of the api.AuthAPI interface.
type AuthHandler struct {
	service ares.AuthService
	log     logger.Logger
}

// ChangeCurrentPassword
func (h *AuthHandler) ChangeCurrentPassword(params auth.ChangeCurrentPasswordParams, principal *dto.User) middleware.Responder {
	err := h.service.ChangeCurrentPassword(params.Body, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.ChangeCurrentPasswordCreated{}
}

// ConfirmRegistration
func (h *AuthHandler) ConfirmRegistration(params auth.ConfirmRegistrationParams) middleware.Responder {
	ret, err := h.service.ConfirmRegistration(params.Body)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.ConfirmRegistrationOK{
		Payload: ret,
	}
}

// ConfirmResetPassword
func (h *AuthHandler) ConfirmResetPassword(params auth.ConfirmResetPasswordParams) middleware.Responder {
	err := h.service.ConfirmResetPassword(params.Body)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.ConfirmResetPasswordOK{}
}

// CreateRegistration
func (h *AuthHandler) CreateRegistration(params auth.CreateRegistrationParams) middleware.Responder {
	err := h.service.CreateRegistration(params.Body)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.CreateRegistrationOK{}
}

// DeleteCurrentUser Archive the profile that is associated with the token used for the API call.
func (h *AuthHandler) DeleteCurrentUser(params auth.DeleteCurrentUserParams, principal *dto.User) middleware.Responder {
	err := h.service.DeleteCurrentUser(principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.DeleteCurrentUserNoContent{}
}

// GetCurrentUser Get the current user's profile.
func (h *AuthHandler) GetCurrentUser(params auth.GetCurrentUserParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.GetCurrentUser(principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.GetCurrentUserOK{
		Payload: ret,
	}
}

// Login
func (h *AuthHandler) Login(params auth.LoginParams) middleware.Responder {
	ip, _, err := net.SplitHostPort(params.HTTPRequest.RemoteAddr)

	// This is done because if the port is missing, net.SplitHostPort will return an unexported error
	if err != nil && strings.Contains(err.Error(), "missing port in address") {
		ip = params.HTTPRequest.RemoteAddr
	} else if err != nil {
		return apperr.Internal.Wrap(err).WithMessage("host or port error")
	}

	ret, appErr := h.service.Login(ip, params.Body)
	if apperr.HandleError(appErr, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return appErr
	}

	return &auth.LoginOK{
		Payload: ret,
	}
}

// Logout
func (h *AuthHandler) Logout(params auth.LogoutParams, principal *dto.User) middleware.Responder {
	err := h.service.Logout(principal.Token)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.LogoutOK{}
}

// RedirectToRegistration
// In case of AWS Marketplace registration redirect with token from POST body placed in url
func (h *AuthHandler) RedirectToRegistration(params auth.RedirectToRegistrationParams) middleware.Responder {
	err := params.HTTPRequest.ParseForm()
	if err != nil {
		return apperr.Internal.Wrap(err).WithMessage("aws redirect error")
	}

	var rawParams string
	if params.HTTPRequest.Form.Get("x-amzn-marketplace-token") != "" {
		token := params.HTTPRequest.Form.Get("x-amzn-marketplace-token")
		p := url.Values{}
		p.Add("token", token)
		p.Add("source", "AWS")
		rawParams = p.Encode()
	}

	url := fmt.Sprintf(fmtUrl, h.service.GetConnectURL(), rawParams)

	return middleware.ResponderFunc(func(w http.ResponseWriter, r runtime.Producer) {
		http.Redirect(w, params.HTTPRequest, url, 301)
	})
}

// ResetPassword
func (h *AuthHandler) ResetPassword(params auth.ResetPasswordParams) middleware.Responder {
	ret, err := h.service.ResetPassword(params.Body)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.ResetPasswordOK{
		Payload: ret,
	}
}

// UpdateCurrentUser Update the profile that is associated with the token used for the API call.
func (h *AuthHandler) UpdateCurrentUser(params auth.UpdateCurrentUserParams, principal *dto.User) middleware.Responder {
	ret, err := h.service.UpdateCurrentUser(params.Body, principal)
	if apperr.HandleError(err, chimiddleware.GetReqID(params.HTTPRequest.Context()), h.log) {
		return err
	}

	return &auth.UpdateCurrentUserOK{
		Payload: ret,
	}
}
