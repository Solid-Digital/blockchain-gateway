// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TriggerVersion is an object representing the database table.
type TriggerVersion struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TriggerID     int64     `boil:"trigger_id" json:"triggerID" toml:"triggerID" yaml:"triggerID"`
	CreatedAt     time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID   int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID   int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Version       string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	Description   string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Public        bool      `boil:"public" json:"public" toml:"public" yaml:"public"`
	ExampleConfig string    `boil:"example_config" json:"exampleConfig" toml:"exampleConfig" yaml:"exampleConfig"`
	Readme        string    `boil:"readme" json:"readme" toml:"readme" yaml:"readme"`
	FileName      string    `boil:"file_name" json:"fileName" toml:"fileName" yaml:"fileName"`
	FileID        string    `boil:"file_id" json:"fileID" toml:"fileID" yaml:"fileID"`
	InputSchema   null.JSON `boil:"input_schema" json:"inputSchema,omitempty" toml:"inputSchema" yaml:"inputSchema,omitempty"`
	OutputSchema  null.JSON `boil:"output_schema" json:"outputSchema,omitempty" toml:"outputSchema" yaml:"outputSchema,omitempty"`

	R *triggerVersionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L triggerVersionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TriggerVersionColumns = struct {
	ID            string
	TriggerID     string
	CreatedAt     string
	CreatedByID   string
	UpdatedAt     string
	UpdatedByID   string
	Version       string
	Description   string
	Public        string
	ExampleConfig string
	Readme        string
	FileName      string
	FileID        string
	InputSchema   string
	OutputSchema  string
}{
	ID:            "id",
	TriggerID:     "trigger_id",
	CreatedAt:     "created_at",
	CreatedByID:   "created_by_id",
	UpdatedAt:     "updated_at",
	UpdatedByID:   "updated_by_id",
	Version:       "version",
	Description:   "description",
	Public:        "public",
	ExampleConfig: "example_config",
	Readme:        "readme",
	FileName:      "file_name",
	FileID:        "file_id",
	InputSchema:   "input_schema",
	OutputSchema:  "output_schema",
}

// Generated where

var TriggerVersionWhere = struct {
	ID            whereHelperint64
	TriggerID     whereHelperint64
	CreatedAt     whereHelpertime_Time
	CreatedByID   whereHelperint64
	UpdatedAt     whereHelpertime_Time
	UpdatedByID   whereHelperint64
	Version       whereHelperstring
	Description   whereHelperstring
	Public        whereHelperbool
	ExampleConfig whereHelperstring
	Readme        whereHelperstring
	FileName      whereHelperstring
	FileID        whereHelperstring
	InputSchema   whereHelpernull_JSON
	OutputSchema  whereHelpernull_JSON
}{
	ID:            whereHelperint64{field: "\"trigger_version\".\"id\""},
	TriggerID:     whereHelperint64{field: "\"trigger_version\".\"trigger_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"trigger_version\".\"created_at\""},
	CreatedByID:   whereHelperint64{field: "\"trigger_version\".\"created_by_id\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"trigger_version\".\"updated_at\""},
	UpdatedByID:   whereHelperint64{field: "\"trigger_version\".\"updated_by_id\""},
	Version:       whereHelperstring{field: "\"trigger_version\".\"version\""},
	Description:   whereHelperstring{field: "\"trigger_version\".\"description\""},
	Public:        whereHelperbool{field: "\"trigger_version\".\"public\""},
	ExampleConfig: whereHelperstring{field: "\"trigger_version\".\"example_config\""},
	Readme:        whereHelperstring{field: "\"trigger_version\".\"readme\""},
	FileName:      whereHelperstring{field: "\"trigger_version\".\"file_name\""},
	FileID:        whereHelperstring{field: "\"trigger_version\".\"file_id\""},
	InputSchema:   whereHelpernull_JSON{field: "\"trigger_version\".\"input_schema\""},
	OutputSchema:  whereHelpernull_JSON{field: "\"trigger_version\".\"output_schema\""},
}

// TriggerVersionRels is where relationship names are stored.
var TriggerVersionRels = struct {
	CreatedBy                         string
	Trigger                           string
	UpdatedBy                         string
	VersionTriggerConfigurations      string
	VersionTriggerDraftConfigurations string
	SupportedBaseVersions             string
}{
	CreatedBy:                         "CreatedBy",
	Trigger:                           "Trigger",
	UpdatedBy:                         "UpdatedBy",
	VersionTriggerConfigurations:      "VersionTriggerConfigurations",
	VersionTriggerDraftConfigurations: "VersionTriggerDraftConfigurations",
	SupportedBaseVersions:             "SupportedBaseVersions",
}

// triggerVersionR is where relationships are stored.
type triggerVersionR struct {
	CreatedBy                         *User
	Trigger                           *Trigger
	UpdatedBy                         *User
	VersionTriggerConfigurations      TriggerConfigurationSlice
	VersionTriggerDraftConfigurations TriggerDraftConfigurationSlice
	SupportedBaseVersions             BaseVersionSlice
}

// NewStruct creates a new relationship struct
func (*triggerVersionR) NewStruct() *triggerVersionR {
	return &triggerVersionR{}
}

// triggerVersionL is where Load methods for each relationship are stored.
type triggerVersionL struct{}

var (
	triggerVersionAllColumns            = []string{"id", "trigger_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "version", "description", "public", "example_config", "readme", "file_name", "file_id", "input_schema", "output_schema"}
	triggerVersionColumnsWithoutDefault = []string{"trigger_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "version", "description", "example_config", "readme", "file_name", "file_id", "input_schema", "output_schema"}
	triggerVersionColumnsWithDefault    = []string{"id", "public"}
	triggerVersionPrimaryKeyColumns     = []string{"id"}
)

type (
	// TriggerVersionSlice is an alias for a slice of pointers to TriggerVersion.
	// This should generally be used opposed to []TriggerVersion.
	TriggerVersionSlice []*TriggerVersion
	// TriggerVersionHook is the signature for custom TriggerVersion hook methods
	TriggerVersionHook func(context.Context, boil.ContextExecutor, *TriggerVersion) error

	triggerVersionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	triggerVersionType                 = reflect.TypeOf(&TriggerVersion{})
	triggerVersionMapping              = queries.MakeStructMapping(triggerVersionType)
	triggerVersionPrimaryKeyMapping, _ = queries.BindMapping(triggerVersionType, triggerVersionMapping, triggerVersionPrimaryKeyColumns)
	triggerVersionInsertCacheMut       sync.RWMutex
	triggerVersionInsertCache          = make(map[string]insertCache)
	triggerVersionUpdateCacheMut       sync.RWMutex
	triggerVersionUpdateCache          = make(map[string]updateCache)
	triggerVersionUpsertCacheMut       sync.RWMutex
	triggerVersionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var triggerVersionBeforeInsertHooks []TriggerVersionHook
var triggerVersionBeforeUpdateHooks []TriggerVersionHook
var triggerVersionBeforeDeleteHooks []TriggerVersionHook
var triggerVersionBeforeUpsertHooks []TriggerVersionHook

var triggerVersionAfterInsertHooks []TriggerVersionHook
var triggerVersionAfterSelectHooks []TriggerVersionHook
var triggerVersionAfterUpdateHooks []TriggerVersionHook
var triggerVersionAfterDeleteHooks []TriggerVersionHook
var triggerVersionAfterUpsertHooks []TriggerVersionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TriggerVersion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TriggerVersion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TriggerVersion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TriggerVersion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TriggerVersion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TriggerVersion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TriggerVersion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TriggerVersion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TriggerVersion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerVersionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTriggerVersionHook registers your hook function for all future operations.
func AddTriggerVersionHook(hookPoint boil.HookPoint, triggerVersionHook TriggerVersionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		triggerVersionBeforeInsertHooks = append(triggerVersionBeforeInsertHooks, triggerVersionHook)
	case boil.BeforeUpdateHook:
		triggerVersionBeforeUpdateHooks = append(triggerVersionBeforeUpdateHooks, triggerVersionHook)
	case boil.BeforeDeleteHook:
		triggerVersionBeforeDeleteHooks = append(triggerVersionBeforeDeleteHooks, triggerVersionHook)
	case boil.BeforeUpsertHook:
		triggerVersionBeforeUpsertHooks = append(triggerVersionBeforeUpsertHooks, triggerVersionHook)
	case boil.AfterInsertHook:
		triggerVersionAfterInsertHooks = append(triggerVersionAfterInsertHooks, triggerVersionHook)
	case boil.AfterSelectHook:
		triggerVersionAfterSelectHooks = append(triggerVersionAfterSelectHooks, triggerVersionHook)
	case boil.AfterUpdateHook:
		triggerVersionAfterUpdateHooks = append(triggerVersionAfterUpdateHooks, triggerVersionHook)
	case boil.AfterDeleteHook:
		triggerVersionAfterDeleteHooks = append(triggerVersionAfterDeleteHooks, triggerVersionHook)
	case boil.AfterUpsertHook:
		triggerVersionAfterUpsertHooks = append(triggerVersionAfterUpsertHooks, triggerVersionHook)
	}
}

// One returns a single triggerVersion record from the query.
func (q triggerVersionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TriggerVersion, error) {
	o := &TriggerVersion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for trigger_version")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TriggerVersion records from the query.
func (q triggerVersionQuery) All(ctx context.Context, exec boil.ContextExecutor) (TriggerVersionSlice, error) {
	var o []*TriggerVersion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to TriggerVersion slice")
	}

	if len(triggerVersionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TriggerVersion records in the query.
func (q triggerVersionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count trigger_version rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q triggerVersionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if trigger_version exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *TriggerVersion) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Trigger pointed to by the foreign key.
func (o *TriggerVersion) Trigger(mods ...qm.QueryMod) triggerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TriggerID),
	}

	queryMods = append(queryMods, mods...)

	query := Triggers(queryMods...)
	queries.SetFrom(query.Query, "\"trigger\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *TriggerVersion) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// VersionTriggerConfigurations retrieves all the trigger_configuration's TriggerConfigurations with an executor via version_id column.
func (o *TriggerVersion) VersionTriggerConfigurations(mods ...qm.QueryMod) triggerConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trigger_configuration\".\"version_id\"=?", o.ID),
	)

	query := TriggerConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"trigger_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trigger_configuration\".*"})
	}

	return query
}

// VersionTriggerDraftConfigurations retrieves all the trigger_draft_configuration's TriggerDraftConfigurations with an executor via version_id column.
func (o *TriggerVersion) VersionTriggerDraftConfigurations(mods ...qm.QueryMod) triggerDraftConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trigger_draft_configuration\".\"version_id\"=?", o.ID),
	)

	query := TriggerDraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"trigger_draft_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trigger_draft_configuration\".*"})
	}

	return query
}

// SupportedBaseVersions retrieves all the base_version's BaseVersions with an executor via id column.
func (o *TriggerVersion) SupportedBaseVersions(mods ...qm.QueryMod) baseVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"trigger_version_supported_bases\" on \"base_version\".\"id\" = \"trigger_version_supported_bases\".\"supported_id\""),
		qm.Where("\"trigger_version_supported_bases\".\"trigger_version_id\"=?", o.ID),
	)

	query := BaseVersions(queryMods...)
	queries.SetFrom(query.Query, "\"base_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base_version\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (triggerVersionL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerVersion interface{}, mods queries.Applicator) error {
	var slice []*TriggerVersion
	var object *TriggerVersion

	if singular {
		object = maybeTriggerVersion.(*TriggerVersion)
	} else {
		slice = *maybeTriggerVersion.(*[]*TriggerVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &triggerVersionR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerVersionR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(triggerVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByTriggerVersions = append(foreign.R.CreatedByTriggerVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByTriggerVersions = append(foreign.R.CreatedByTriggerVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadTrigger allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (triggerVersionL) LoadTrigger(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerVersion interface{}, mods queries.Applicator) error {
	var slice []*TriggerVersion
	var object *TriggerVersion

	if singular {
		object = maybeTriggerVersion.(*TriggerVersion)
	} else {
		slice = *maybeTriggerVersion.(*[]*TriggerVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &triggerVersionR{}
		}
		args = append(args, object.TriggerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerVersionR{}
			}

			for _, a := range args {
				if a == obj.TriggerID {
					continue Outer
				}
			}

			args = append(args, obj.TriggerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger`), qm.WhereIn(`trigger.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trigger")
	}

	var resultSlice []*Trigger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trigger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trigger")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger")
	}

	if len(triggerVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trigger = foreign
		if foreign.R == nil {
			foreign.R = &triggerR{}
		}
		foreign.R.TriggerVersions = append(foreign.R.TriggerVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TriggerID == foreign.ID {
				local.R.Trigger = foreign
				if foreign.R == nil {
					foreign.R = &triggerR{}
				}
				foreign.R.TriggerVersions = append(foreign.R.TriggerVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (triggerVersionL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerVersion interface{}, mods queries.Applicator) error {
	var slice []*TriggerVersion
	var object *TriggerVersion

	if singular {
		object = maybeTriggerVersion.(*TriggerVersion)
	} else {
		slice = *maybeTriggerVersion.(*[]*TriggerVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &triggerVersionR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerVersionR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(triggerVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByTriggerVersions = append(foreign.R.UpdatedByTriggerVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByTriggerVersions = append(foreign.R.UpdatedByTriggerVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadVersionTriggerConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (triggerVersionL) LoadVersionTriggerConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerVersion interface{}, mods queries.Applicator) error {
	var slice []*TriggerVersion
	var object *TriggerVersion

	if singular {
		object = maybeTriggerVersion.(*TriggerVersion)
	} else {
		slice = *maybeTriggerVersion.(*[]*TriggerVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &triggerVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerVersionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger_configuration`), qm.WhereIn(`trigger_configuration.version_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger_configuration")
	}

	var resultSlice []*TriggerConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trigger_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_configuration")
	}

	if len(triggerConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VersionTriggerConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerConfigurationR{}
			}
			foreign.R.Version = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.VersionID) {
				local.R.VersionTriggerConfigurations = append(local.R.VersionTriggerConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &triggerConfigurationR{}
				}
				foreign.R.Version = local
				break
			}
		}
	}

	return nil
}

// LoadVersionTriggerDraftConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (triggerVersionL) LoadVersionTriggerDraftConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerVersion interface{}, mods queries.Applicator) error {
	var slice []*TriggerVersion
	var object *TriggerVersion

	if singular {
		object = maybeTriggerVersion.(*TriggerVersion)
	} else {
		slice = *maybeTriggerVersion.(*[]*TriggerVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &triggerVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerVersionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger_draft_configuration`), qm.WhereIn(`trigger_draft_configuration.version_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger_draft_configuration")
	}

	var resultSlice []*TriggerDraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trigger_draft_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger_draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_draft_configuration")
	}

	if len(triggerDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VersionTriggerDraftConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerDraftConfigurationR{}
			}
			foreign.R.Version = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.VersionID) {
				local.R.VersionTriggerDraftConfigurations = append(local.R.VersionTriggerDraftConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &triggerDraftConfigurationR{}
				}
				foreign.R.Version = local
				break
			}
		}
	}

	return nil
}

// LoadSupportedBaseVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (triggerVersionL) LoadSupportedBaseVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerVersion interface{}, mods queries.Applicator) error {
	var slice []*TriggerVersion
	var object *TriggerVersion

	if singular {
		object = maybeTriggerVersion.(*TriggerVersion)
	} else {
		slice = *maybeTriggerVersion.(*[]*TriggerVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &triggerVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerVersionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"base_version\".*, \"a\".\"trigger_version_id\""),
		qm.From("\"base_version\""),
		qm.InnerJoin("\"trigger_version_supported_bases\" as \"a\" on \"base_version\".\"id\" = \"a\".\"supported_id\""),
		qm.WhereIn("\"a\".\"trigger_version_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_version")
	}

	var resultSlice []*BaseVersion

	var localJoinCols []int64
	for results.Next() {
		one := new(BaseVersion)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.BaseID, &one.CreatedAt, &one.CreatedByID, &one.UpdatedAt, &one.UpdatedByID, &one.Version, &one.Description, &one.Readme, &one.DockerImageRef, &one.Entrypoint, &one.Public, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for base_version")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice base_version")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_version")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupportedBaseVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseVersionR{}
			}
			foreign.R.TriggerVersions = append(foreign.R.TriggerVersions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.SupportedBaseVersions = append(local.R.SupportedBaseVersions, foreign)
				if foreign.R == nil {
					foreign.R = &baseVersionR{}
				}
				foreign.R.TriggerVersions = append(foreign.R.TriggerVersions, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the triggerVersion to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByTriggerVersions.
func (o *TriggerVersion) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trigger_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, triggerVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &triggerVersionR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByTriggerVersions: TriggerVersionSlice{o},
		}
	} else {
		related.R.CreatedByTriggerVersions = append(related.R.CreatedByTriggerVersions, o)
	}

	return nil
}

// SetTrigger of the triggerVersion to the related item.
// Sets o.R.Trigger to related.
// Adds o to related.R.TriggerVersions.
func (o *TriggerVersion) SetTrigger(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Trigger) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trigger_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"trigger_id"}),
		strmangle.WhereClause("\"", "\"", 2, triggerVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TriggerID = related.ID
	if o.R == nil {
		o.R = &triggerVersionR{
			Trigger: related,
		}
	} else {
		o.R.Trigger = related
	}

	if related.R == nil {
		related.R = &triggerR{
			TriggerVersions: TriggerVersionSlice{o},
		}
	} else {
		related.R.TriggerVersions = append(related.R.TriggerVersions, o)
	}

	return nil
}

// SetUpdatedBy of the triggerVersion to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByTriggerVersions.
func (o *TriggerVersion) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trigger_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, triggerVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &triggerVersionR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByTriggerVersions: TriggerVersionSlice{o},
		}
	} else {
		related.R.UpdatedByTriggerVersions = append(related.R.UpdatedByTriggerVersions, o)
	}

	return nil
}

// AddVersionTriggerConfigurations adds the given related objects to the existing relationships
// of the trigger_version, optionally inserting them as new records.
// Appends related to o.R.VersionTriggerConfigurations.
// Sets related.R.Version appropriately.
func (o *TriggerVersion) AddVersionTriggerConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VersionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trigger_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
				strmangle.WhereClause("\"", "\"", 2, triggerConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VersionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &triggerVersionR{
			VersionTriggerConfigurations: related,
		}
	} else {
		o.R.VersionTriggerConfigurations = append(o.R.VersionTriggerConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerConfigurationR{
				Version: o,
			}
		} else {
			rel.R.Version = o
		}
	}
	return nil
}

// SetVersionTriggerConfigurations removes all previously related items of the
// trigger_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Version's VersionTriggerConfigurations accordingly.
// Replaces o.R.VersionTriggerConfigurations with related.
// Sets related.R.Version's VersionTriggerConfigurations accordingly.
func (o *TriggerVersion) SetVersionTriggerConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerConfiguration) error {
	query := "update \"trigger_configuration\" set \"version_id\" = null where \"version_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VersionTriggerConfigurations {
			queries.SetScanner(&rel.VersionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Version = nil
		}

		o.R.VersionTriggerConfigurations = nil
	}
	return o.AddVersionTriggerConfigurations(ctx, exec, insert, related...)
}

// RemoveVersionTriggerConfigurations relationships from objects passed in.
// Removes related items from R.VersionTriggerConfigurations (uses pointer comparison, removal does not keep order)
// Sets related.R.Version.
func (o *TriggerVersion) RemoveVersionTriggerConfigurations(ctx context.Context, exec boil.ContextExecutor, related ...*TriggerConfiguration) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VersionID, nil)
		if rel.R != nil {
			rel.R.Version = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("version_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VersionTriggerConfigurations {
			if rel != ri {
				continue
			}

			ln := len(o.R.VersionTriggerConfigurations)
			if ln > 1 && i < ln-1 {
				o.R.VersionTriggerConfigurations[i] = o.R.VersionTriggerConfigurations[ln-1]
			}
			o.R.VersionTriggerConfigurations = o.R.VersionTriggerConfigurations[:ln-1]
			break
		}
	}

	return nil
}

// AddVersionTriggerDraftConfigurations adds the given related objects to the existing relationships
// of the trigger_version, optionally inserting them as new records.
// Appends related to o.R.VersionTriggerDraftConfigurations.
// Sets related.R.Version appropriately.
func (o *TriggerVersion) AddVersionTriggerDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerDraftConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VersionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trigger_draft_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
				strmangle.WhereClause("\"", "\"", 2, triggerDraftConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VersionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &triggerVersionR{
			VersionTriggerDraftConfigurations: related,
		}
	} else {
		o.R.VersionTriggerDraftConfigurations = append(o.R.VersionTriggerDraftConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerDraftConfigurationR{
				Version: o,
			}
		} else {
			rel.R.Version = o
		}
	}
	return nil
}

// SetVersionTriggerDraftConfigurations removes all previously related items of the
// trigger_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Version's VersionTriggerDraftConfigurations accordingly.
// Replaces o.R.VersionTriggerDraftConfigurations with related.
// Sets related.R.Version's VersionTriggerDraftConfigurations accordingly.
func (o *TriggerVersion) SetVersionTriggerDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerDraftConfiguration) error {
	query := "update \"trigger_draft_configuration\" set \"version_id\" = null where \"version_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VersionTriggerDraftConfigurations {
			queries.SetScanner(&rel.VersionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Version = nil
		}

		o.R.VersionTriggerDraftConfigurations = nil
	}
	return o.AddVersionTriggerDraftConfigurations(ctx, exec, insert, related...)
}

// RemoveVersionTriggerDraftConfigurations relationships from objects passed in.
// Removes related items from R.VersionTriggerDraftConfigurations (uses pointer comparison, removal does not keep order)
// Sets related.R.Version.
func (o *TriggerVersion) RemoveVersionTriggerDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, related ...*TriggerDraftConfiguration) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VersionID, nil)
		if rel.R != nil {
			rel.R.Version = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("version_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VersionTriggerDraftConfigurations {
			if rel != ri {
				continue
			}

			ln := len(o.R.VersionTriggerDraftConfigurations)
			if ln > 1 && i < ln-1 {
				o.R.VersionTriggerDraftConfigurations[i] = o.R.VersionTriggerDraftConfigurations[ln-1]
			}
			o.R.VersionTriggerDraftConfigurations = o.R.VersionTriggerDraftConfigurations[:ln-1]
			break
		}
	}

	return nil
}

// AddSupportedBaseVersions adds the given related objects to the existing relationships
// of the trigger_version, optionally inserting them as new records.
// Appends related to o.R.SupportedBaseVersions.
// Sets related.R.TriggerVersions appropriately.
func (o *TriggerVersion) AddSupportedBaseVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"trigger_version_supported_bases\" (\"trigger_version_id\", \"supported_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &triggerVersionR{
			SupportedBaseVersions: related,
		}
	} else {
		o.R.SupportedBaseVersions = append(o.R.SupportedBaseVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseVersionR{
				TriggerVersions: TriggerVersionSlice{o},
			}
		} else {
			rel.R.TriggerVersions = append(rel.R.TriggerVersions, o)
		}
	}
	return nil
}

// SetSupportedBaseVersions removes all previously related items of the
// trigger_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TriggerVersions's SupportedBaseVersions accordingly.
// Replaces o.R.SupportedBaseVersions with related.
// Sets related.R.TriggerVersions's SupportedBaseVersions accordingly.
func (o *TriggerVersion) SetSupportedBaseVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseVersion) error {
	query := "delete from \"trigger_version_supported_bases\" where \"trigger_version_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSupportedBaseVersionsFromTriggerVersionsSlice(o, related)
	if o.R != nil {
		o.R.SupportedBaseVersions = nil
	}
	return o.AddSupportedBaseVersions(ctx, exec, insert, related...)
}

// RemoveSupportedBaseVersions relationships from objects passed in.
// Removes related items from R.SupportedBaseVersions (uses pointer comparison, removal does not keep order)
// Sets related.R.TriggerVersions.
func (o *TriggerVersion) RemoveSupportedBaseVersions(ctx context.Context, exec boil.ContextExecutor, related ...*BaseVersion) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"trigger_version_supported_bases\" where \"trigger_version_id\" = $1 and \"supported_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSupportedBaseVersionsFromTriggerVersionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SupportedBaseVersions {
			if rel != ri {
				continue
			}

			ln := len(o.R.SupportedBaseVersions)
			if ln > 1 && i < ln-1 {
				o.R.SupportedBaseVersions[i] = o.R.SupportedBaseVersions[ln-1]
			}
			o.R.SupportedBaseVersions = o.R.SupportedBaseVersions[:ln-1]
			break
		}
	}

	return nil
}

func removeSupportedBaseVersionsFromTriggerVersionsSlice(o *TriggerVersion, related []*BaseVersion) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.TriggerVersions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.TriggerVersions)
			if ln > 1 && i < ln-1 {
				rel.R.TriggerVersions[i] = rel.R.TriggerVersions[ln-1]
			}
			rel.R.TriggerVersions = rel.R.TriggerVersions[:ln-1]
			break
		}
	}
}

// TriggerVersions retrieves all the records using an executor.
func TriggerVersions(mods ...qm.QueryMod) triggerVersionQuery {
	mods = append(mods, qm.From("\"trigger_version\""))
	return triggerVersionQuery{NewQuery(mods...)}
}

// FindTriggerVersion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTriggerVersion(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TriggerVersion, error) {
	triggerVersionObj := &TriggerVersion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trigger_version\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, triggerVersionObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from trigger_version")
	}

	return triggerVersionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TriggerVersion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no trigger_version provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(triggerVersionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	triggerVersionInsertCacheMut.RLock()
	cache, cached := triggerVersionInsertCache[key]
	triggerVersionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			triggerVersionAllColumns,
			triggerVersionColumnsWithDefault,
			triggerVersionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(triggerVersionType, triggerVersionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(triggerVersionType, triggerVersionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trigger_version\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trigger_version\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into trigger_version")
	}

	if !cached {
		triggerVersionInsertCacheMut.Lock()
		triggerVersionInsertCache[key] = cache
		triggerVersionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TriggerVersion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TriggerVersion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	triggerVersionUpdateCacheMut.RLock()
	cache, cached := triggerVersionUpdateCache[key]
	triggerVersionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			triggerVersionAllColumns,
			triggerVersionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update trigger_version, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trigger_version\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, triggerVersionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(triggerVersionType, triggerVersionMapping, append(wl, triggerVersionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update trigger_version row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for trigger_version")
	}

	if !cached {
		triggerVersionUpdateCacheMut.Lock()
		triggerVersionUpdateCache[key] = cache
		triggerVersionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q triggerVersionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for trigger_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for trigger_version")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TriggerVersionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trigger_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, triggerVersionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in triggerVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all triggerVersion")
	}
	return rowsAff, nil
}

// Delete deletes a single TriggerVersion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TriggerVersion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no TriggerVersion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), triggerVersionPrimaryKeyMapping)
	sql := "DELETE FROM \"trigger_version\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from trigger_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for trigger_version")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q triggerVersionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no triggerVersionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from trigger_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for trigger_version")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TriggerVersionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(triggerVersionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trigger_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, triggerVersionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from triggerVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for trigger_version")
	}

	if len(triggerVersionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TriggerVersion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTriggerVersion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TriggerVersionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TriggerVersionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trigger_version\".* FROM \"trigger_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, triggerVersionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TriggerVersionSlice")
	}

	*o = slice

	return nil
}

// TriggerVersionExists checks if the TriggerVersion row exists.
func TriggerVersionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trigger_version\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if trigger_version exists")
	}

	return exists, nil
}

// TriggerVersion is an object representing the database table.
type TriggerVersionDTO struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TriggerID     int64     `boil:"trigger_id" json:"triggerID" toml:"triggerID" yaml:"triggerID"`
	CreatedAt     time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID   int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID   int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Version       string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	Description   string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Public        bool      `boil:"public" json:"public" toml:"public" yaml:"public"`
	ExampleConfig string    `boil:"example_config" json:"exampleConfig" toml:"exampleConfig" yaml:"exampleConfig"`
	Readme        string    `boil:"readme" json:"readme" toml:"readme" yaml:"readme"`
	FileName      string    `boil:"file_name" json:"fileName" toml:"fileName" yaml:"fileName"`
	FileID        string    `boil:"file_id" json:"fileID" toml:"fileID" yaml:"fileID"`
	InputSchema   null.JSON `boil:"input_schema" json:"inputSchema,omitempty" toml:"inputSchema" yaml:"inputSchema,omitempty"`
	OutputSchema  null.JSON `boil:"output_schema" json:"outputSchema,omitempty" toml:"outputSchema" yaml:"outputSchema,omitempty"`
}

// DTO converts the TriggerVersion to a TriggerVersionDTO struct.
func (o TriggerVersion) DTO() *TriggerVersionDTO {
	return &TriggerVersionDTO{
		ID:            o.ID,
		TriggerID:     o.TriggerID,
		CreatedAt:     o.CreatedAt,
		CreatedByID:   o.CreatedByID,
		UpdatedAt:     o.UpdatedAt,
		UpdatedByID:   o.UpdatedByID,
		Version:       o.Version,
		Description:   o.Description,
		Public:        o.Public,
		ExampleConfig: o.ExampleConfig,
		Readme:        o.Readme,
		FileName:      o.FileName,
		FileID:        o.FileID,
		InputSchema:   o.InputSchema,
		OutputSchema:  o.OutputSchema,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TriggerVersion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no trigger_version provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(triggerVersionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	triggerVersionUpsertCacheMut.RLock()
	cache, cached := triggerVersionUpsertCache[key]
	triggerVersionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			triggerVersionAllColumns,
			triggerVersionColumnsWithDefault,
			triggerVersionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			triggerVersionAllColumns,
			triggerVersionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert trigger_version, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(triggerVersionPrimaryKeyColumns))
			copy(conflict, triggerVersionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trigger_version\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(triggerVersionType, triggerVersionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(triggerVersionType, triggerVersionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert trigger_version")
	}

	if !cached {
		triggerVersionUpsertCacheMut.Lock()
		triggerVersionUpsertCache[key] = cache
		triggerVersionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
