// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ActionDraftConfiguration is an object representing the database table.
type ActionDraftConfiguration struct {
	ID                   int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DraftConfigurationID int64     `boil:"draft_configuration_id" json:"draftConfigurationID" toml:"draftConfigurationID" yaml:"draftConfigurationID"`
	VersionID            int64     `boil:"version_id" json:"versionID" toml:"versionID" yaml:"versionID"`
	Index                int64     `boil:"index" json:"index" toml:"index" yaml:"index"`
	Name                 string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Config               string    `boil:"config" json:"config" toml:"config" yaml:"config"`
	MessageConfig        null.JSON `boil:"message_config" json:"messageConfig,omitempty" toml:"messageConfig" yaml:"messageConfig,omitempty"`

	R *actionDraftConfigurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L actionDraftConfigurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActionDraftConfigurationColumns = struct {
	ID                   string
	DraftConfigurationID string
	VersionID            string
	Index                string
	Name                 string
	Config               string
	MessageConfig        string
}{
	ID:                   "id",
	DraftConfigurationID: "draft_configuration_id",
	VersionID:            "version_id",
	Index:                "index",
	Name:                 "name",
	Config:               "config",
	MessageConfig:        "message_config",
}

// Generated where

var ActionDraftConfigurationWhere = struct {
	ID                   whereHelperint64
	DraftConfigurationID whereHelperint64
	VersionID            whereHelperint64
	Index                whereHelperint64
	Name                 whereHelperstring
	Config               whereHelperstring
	MessageConfig        whereHelpernull_JSON
}{
	ID:                   whereHelperint64{field: "\"action_draft_configuration\".\"id\""},
	DraftConfigurationID: whereHelperint64{field: "\"action_draft_configuration\".\"draft_configuration_id\""},
	VersionID:            whereHelperint64{field: "\"action_draft_configuration\".\"version_id\""},
	Index:                whereHelperint64{field: "\"action_draft_configuration\".\"index\""},
	Name:                 whereHelperstring{field: "\"action_draft_configuration\".\"name\""},
	Config:               whereHelperstring{field: "\"action_draft_configuration\".\"config\""},
	MessageConfig:        whereHelpernull_JSON{field: "\"action_draft_configuration\".\"message_config\""},
}

// ActionDraftConfigurationRels is where relationship names are stored.
var ActionDraftConfigurationRels = struct {
	DraftConfiguration string
	Version            string
}{
	DraftConfiguration: "DraftConfiguration",
	Version:            "Version",
}

// actionDraftConfigurationR is where relationships are stored.
type actionDraftConfigurationR struct {
	DraftConfiguration *DraftConfiguration
	Version            *ActionVersion
}

// NewStruct creates a new relationship struct
func (*actionDraftConfigurationR) NewStruct() *actionDraftConfigurationR {
	return &actionDraftConfigurationR{}
}

// actionDraftConfigurationL is where Load methods for each relationship are stored.
type actionDraftConfigurationL struct{}

var (
	actionDraftConfigurationAllColumns            = []string{"id", "draft_configuration_id", "version_id", "index", "name", "config", "message_config"}
	actionDraftConfigurationColumnsWithoutDefault = []string{"draft_configuration_id", "version_id", "index", "name", "config", "message_config"}
	actionDraftConfigurationColumnsWithDefault    = []string{"id"}
	actionDraftConfigurationPrimaryKeyColumns     = []string{"id"}
)

type (
	// ActionDraftConfigurationSlice is an alias for a slice of pointers to ActionDraftConfiguration.
	// This should generally be used opposed to []ActionDraftConfiguration.
	ActionDraftConfigurationSlice []*ActionDraftConfiguration
	// ActionDraftConfigurationHook is the signature for custom ActionDraftConfiguration hook methods
	ActionDraftConfigurationHook func(context.Context, boil.ContextExecutor, *ActionDraftConfiguration) error

	actionDraftConfigurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	actionDraftConfigurationType                 = reflect.TypeOf(&ActionDraftConfiguration{})
	actionDraftConfigurationMapping              = queries.MakeStructMapping(actionDraftConfigurationType)
	actionDraftConfigurationPrimaryKeyMapping, _ = queries.BindMapping(actionDraftConfigurationType, actionDraftConfigurationMapping, actionDraftConfigurationPrimaryKeyColumns)
	actionDraftConfigurationInsertCacheMut       sync.RWMutex
	actionDraftConfigurationInsertCache          = make(map[string]insertCache)
	actionDraftConfigurationUpdateCacheMut       sync.RWMutex
	actionDraftConfigurationUpdateCache          = make(map[string]updateCache)
	actionDraftConfigurationUpsertCacheMut       sync.RWMutex
	actionDraftConfigurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var actionDraftConfigurationBeforeInsertHooks []ActionDraftConfigurationHook
var actionDraftConfigurationBeforeUpdateHooks []ActionDraftConfigurationHook
var actionDraftConfigurationBeforeDeleteHooks []ActionDraftConfigurationHook
var actionDraftConfigurationBeforeUpsertHooks []ActionDraftConfigurationHook

var actionDraftConfigurationAfterInsertHooks []ActionDraftConfigurationHook
var actionDraftConfigurationAfterSelectHooks []ActionDraftConfigurationHook
var actionDraftConfigurationAfterUpdateHooks []ActionDraftConfigurationHook
var actionDraftConfigurationAfterDeleteHooks []ActionDraftConfigurationHook
var actionDraftConfigurationAfterUpsertHooks []ActionDraftConfigurationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActionDraftConfiguration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActionDraftConfiguration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActionDraftConfiguration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActionDraftConfiguration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActionDraftConfiguration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActionDraftConfiguration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActionDraftConfiguration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActionDraftConfiguration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActionDraftConfiguration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionDraftConfigurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActionDraftConfigurationHook registers your hook function for all future operations.
func AddActionDraftConfigurationHook(hookPoint boil.HookPoint, actionDraftConfigurationHook ActionDraftConfigurationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		actionDraftConfigurationBeforeInsertHooks = append(actionDraftConfigurationBeforeInsertHooks, actionDraftConfigurationHook)
	case boil.BeforeUpdateHook:
		actionDraftConfigurationBeforeUpdateHooks = append(actionDraftConfigurationBeforeUpdateHooks, actionDraftConfigurationHook)
	case boil.BeforeDeleteHook:
		actionDraftConfigurationBeforeDeleteHooks = append(actionDraftConfigurationBeforeDeleteHooks, actionDraftConfigurationHook)
	case boil.BeforeUpsertHook:
		actionDraftConfigurationBeforeUpsertHooks = append(actionDraftConfigurationBeforeUpsertHooks, actionDraftConfigurationHook)
	case boil.AfterInsertHook:
		actionDraftConfigurationAfterInsertHooks = append(actionDraftConfigurationAfterInsertHooks, actionDraftConfigurationHook)
	case boil.AfterSelectHook:
		actionDraftConfigurationAfterSelectHooks = append(actionDraftConfigurationAfterSelectHooks, actionDraftConfigurationHook)
	case boil.AfterUpdateHook:
		actionDraftConfigurationAfterUpdateHooks = append(actionDraftConfigurationAfterUpdateHooks, actionDraftConfigurationHook)
	case boil.AfterDeleteHook:
		actionDraftConfigurationAfterDeleteHooks = append(actionDraftConfigurationAfterDeleteHooks, actionDraftConfigurationHook)
	case boil.AfterUpsertHook:
		actionDraftConfigurationAfterUpsertHooks = append(actionDraftConfigurationAfterUpsertHooks, actionDraftConfigurationHook)
	}
}

// One returns a single actionDraftConfiguration record from the query.
func (q actionDraftConfigurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActionDraftConfiguration, error) {
	o := &ActionDraftConfiguration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for action_draft_configuration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActionDraftConfiguration records from the query.
func (q actionDraftConfigurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActionDraftConfigurationSlice, error) {
	var o []*ActionDraftConfiguration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ActionDraftConfiguration slice")
	}

	if len(actionDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActionDraftConfiguration records in the query.
func (q actionDraftConfigurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count action_draft_configuration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q actionDraftConfigurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if action_draft_configuration exists")
	}

	return count > 0, nil
}

// DraftConfiguration pointed to by the foreign key.
func (o *ActionDraftConfiguration) DraftConfiguration(mods ...qm.QueryMod) draftConfigurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DraftConfigurationID),
	}

	queryMods = append(queryMods, mods...)

	query := DraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"draft_configuration\"")

	return query
}

// Version pointed to by the foreign key.
func (o *ActionDraftConfiguration) Version(mods ...qm.QueryMod) actionVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VersionID),
	}

	queryMods = append(queryMods, mods...)

	query := ActionVersions(queryMods...)
	queries.SetFrom(query.Query, "\"action_version\"")

	return query
}

// LoadDraftConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionDraftConfigurationL) LoadDraftConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*ActionDraftConfiguration
	var object *ActionDraftConfiguration

	if singular {
		object = maybeActionDraftConfiguration.(*ActionDraftConfiguration)
	} else {
		slice = *maybeActionDraftConfiguration.(*[]*ActionDraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionDraftConfigurationR{}
		}
		args = append(args, object.DraftConfigurationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionDraftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.DraftConfigurationID {
					continue Outer
				}
			}

			args = append(args, obj.DraftConfigurationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`draft_configuration`), qm.WhereIn(`draft_configuration.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DraftConfiguration")
	}

	var resultSlice []*DraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DraftConfiguration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for draft_configuration")
	}

	if len(actionDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DraftConfiguration = foreign
		if foreign.R == nil {
			foreign.R = &draftConfigurationR{}
		}
		foreign.R.ActionDraftConfigurations = append(foreign.R.ActionDraftConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DraftConfigurationID == foreign.ID {
				local.R.DraftConfiguration = foreign
				if foreign.R == nil {
					foreign.R = &draftConfigurationR{}
				}
				foreign.R.ActionDraftConfigurations = append(foreign.R.ActionDraftConfigurations, local)
				break
			}
		}
	}

	return nil
}

// LoadVersion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionDraftConfigurationL) LoadVersion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*ActionDraftConfiguration
	var object *ActionDraftConfiguration

	if singular {
		object = maybeActionDraftConfiguration.(*ActionDraftConfiguration)
	} else {
		slice = *maybeActionDraftConfiguration.(*[]*ActionDraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionDraftConfigurationR{}
		}
		args = append(args, object.VersionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionDraftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.VersionID {
					continue Outer
				}
			}

			args = append(args, obj.VersionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_version`), qm.WhereIn(`action_version.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ActionVersion")
	}

	var resultSlice []*ActionVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ActionVersion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for action_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_version")
	}

	if len(actionDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Version = foreign
		if foreign.R == nil {
			foreign.R = &actionVersionR{}
		}
		foreign.R.VersionActionDraftConfigurations = append(foreign.R.VersionActionDraftConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VersionID == foreign.ID {
				local.R.Version = foreign
				if foreign.R == nil {
					foreign.R = &actionVersionR{}
				}
				foreign.R.VersionActionDraftConfigurations = append(foreign.R.VersionActionDraftConfigurations, local)
				break
			}
		}
	}

	return nil
}

// SetDraftConfiguration of the actionDraftConfiguration to the related item.
// Sets o.R.DraftConfiguration to related.
// Adds o to related.R.ActionDraftConfigurations.
func (o *ActionDraftConfiguration) SetDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DraftConfiguration) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"draft_configuration_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionDraftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DraftConfigurationID = related.ID
	if o.R == nil {
		o.R = &actionDraftConfigurationR{
			DraftConfiguration: related,
		}
	} else {
		o.R.DraftConfiguration = related
	}

	if related.R == nil {
		related.R = &draftConfigurationR{
			ActionDraftConfigurations: ActionDraftConfigurationSlice{o},
		}
	} else {
		related.R.ActionDraftConfigurations = append(related.R.ActionDraftConfigurations, o)
	}

	return nil
}

// SetVersion of the actionDraftConfiguration to the related item.
// Sets o.R.Version to related.
// Adds o to related.R.VersionActionDraftConfigurations.
func (o *ActionDraftConfiguration) SetVersion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ActionVersion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionDraftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VersionID = related.ID
	if o.R == nil {
		o.R = &actionDraftConfigurationR{
			Version: related,
		}
	} else {
		o.R.Version = related
	}

	if related.R == nil {
		related.R = &actionVersionR{
			VersionActionDraftConfigurations: ActionDraftConfigurationSlice{o},
		}
	} else {
		related.R.VersionActionDraftConfigurations = append(related.R.VersionActionDraftConfigurations, o)
	}

	return nil
}

// ActionDraftConfigurations retrieves all the records using an executor.
func ActionDraftConfigurations(mods ...qm.QueryMod) actionDraftConfigurationQuery {
	mods = append(mods, qm.From("\"action_draft_configuration\""))
	return actionDraftConfigurationQuery{NewQuery(mods...)}
}

// FindActionDraftConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActionDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ActionDraftConfiguration, error) {
	actionDraftConfigurationObj := &ActionDraftConfiguration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"action_draft_configuration\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, actionDraftConfigurationObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from action_draft_configuration")
	}

	return actionDraftConfigurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActionDraftConfiguration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no action_draft_configuration provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionDraftConfigurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	actionDraftConfigurationInsertCacheMut.RLock()
	cache, cached := actionDraftConfigurationInsertCache[key]
	actionDraftConfigurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			actionDraftConfigurationAllColumns,
			actionDraftConfigurationColumnsWithDefault,
			actionDraftConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(actionDraftConfigurationType, actionDraftConfigurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(actionDraftConfigurationType, actionDraftConfigurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"action_draft_configuration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"action_draft_configuration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into action_draft_configuration")
	}

	if !cached {
		actionDraftConfigurationInsertCacheMut.Lock()
		actionDraftConfigurationInsertCache[key] = cache
		actionDraftConfigurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActionDraftConfiguration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActionDraftConfiguration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	actionDraftConfigurationUpdateCacheMut.RLock()
	cache, cached := actionDraftConfigurationUpdateCache[key]
	actionDraftConfigurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			actionDraftConfigurationAllColumns,
			actionDraftConfigurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update action_draft_configuration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"action_draft_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, actionDraftConfigurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(actionDraftConfigurationType, actionDraftConfigurationMapping, append(wl, actionDraftConfigurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update action_draft_configuration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for action_draft_configuration")
	}

	if !cached {
		actionDraftConfigurationUpdateCacheMut.Lock()
		actionDraftConfigurationUpdateCache[key] = cache
		actionDraftConfigurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q actionDraftConfigurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for action_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for action_draft_configuration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActionDraftConfigurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"action_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, actionDraftConfigurationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in actionDraftConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all actionDraftConfiguration")
	}
	return rowsAff, nil
}

// Delete deletes a single ActionDraftConfiguration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActionDraftConfiguration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ActionDraftConfiguration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), actionDraftConfigurationPrimaryKeyMapping)
	sql := "DELETE FROM \"action_draft_configuration\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from action_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for action_draft_configuration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q actionDraftConfigurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no actionDraftConfigurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from action_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for action_draft_configuration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActionDraftConfigurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(actionDraftConfigurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"action_draft_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, actionDraftConfigurationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from actionDraftConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for action_draft_configuration")
	}

	if len(actionDraftConfigurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActionDraftConfiguration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActionDraftConfiguration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActionDraftConfigurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActionDraftConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"action_draft_configuration\".* FROM \"action_draft_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, actionDraftConfigurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ActionDraftConfigurationSlice")
	}

	*o = slice

	return nil
}

// ActionDraftConfigurationExists checks if the ActionDraftConfiguration row exists.
func ActionDraftConfigurationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"action_draft_configuration\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if action_draft_configuration exists")
	}

	return exists, nil
}

// ActionDraftConfiguration is an object representing the database table.
type ActionDraftConfigurationDTO struct {
	ID                   int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DraftConfigurationID int64     `boil:"draft_configuration_id" json:"draftConfigurationID" toml:"draftConfigurationID" yaml:"draftConfigurationID"`
	VersionID            int64     `boil:"version_id" json:"versionID" toml:"versionID" yaml:"versionID"`
	Index                int64     `boil:"index" json:"index" toml:"index" yaml:"index"`
	Name                 string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Config               string    `boil:"config" json:"config" toml:"config" yaml:"config"`
	MessageConfig        null.JSON `boil:"message_config" json:"messageConfig,omitempty" toml:"messageConfig" yaml:"messageConfig,omitempty"`
}

// DTO converts the ActionDraftConfiguration to a ActionDraftConfigurationDTO struct.
func (o ActionDraftConfiguration) DTO() *ActionDraftConfigurationDTO {
	return &ActionDraftConfigurationDTO{
		ID:                   o.ID,
		DraftConfigurationID: o.DraftConfigurationID,
		VersionID:            o.VersionID,
		Index:                o.Index,
		Name:                 o.Name,
		Config:               o.Config,
		MessageConfig:        o.MessageConfig,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActionDraftConfiguration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no action_draft_configuration provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionDraftConfigurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	actionDraftConfigurationUpsertCacheMut.RLock()
	cache, cached := actionDraftConfigurationUpsertCache[key]
	actionDraftConfigurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			actionDraftConfigurationAllColumns,
			actionDraftConfigurationColumnsWithDefault,
			actionDraftConfigurationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			actionDraftConfigurationAllColumns,
			actionDraftConfigurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert action_draft_configuration, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(actionDraftConfigurationPrimaryKeyColumns))
			copy(conflict, actionDraftConfigurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"action_draft_configuration\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(actionDraftConfigurationType, actionDraftConfigurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(actionDraftConfigurationType, actionDraftConfigurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert action_draft_configuration")
	}

	if !cached {
		actionDraftConfigurationUpsertCacheMut.Lock()
		actionDraftConfigurationUpsertCache[key] = cache
		actionDraftConfigurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
