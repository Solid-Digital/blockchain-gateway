// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Organization is an object representing the database table.
type Organization struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	DisplayName string    `boil:"display_name" json:"displayName" toml:"displayName" yaml:"displayName"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *organizationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationColumns = struct {
	ID          string
	CreatedAt   string
	CreatedByID string
	UpdatedAt   string
	UpdatedByID string
	DisplayName string
	Name        string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	CreatedByID: "created_by_id",
	UpdatedAt:   "updated_at",
	UpdatedByID: "updated_by_id",
	DisplayName: "display_name",
	Name:        "name",
}

// Generated where

var OrganizationWhere = struct {
	ID          whereHelperint64
	CreatedAt   whereHelpertime_Time
	CreatedByID whereHelperint64
	UpdatedAt   whereHelpertime_Time
	UpdatedByID whereHelperint64
	DisplayName whereHelperstring
	Name        whereHelperstring
}{
	ID:          whereHelperint64{field: "\"organization\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"organization\".\"created_at\""},
	CreatedByID: whereHelperint64{field: "\"organization\".\"created_by_id\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"organization\".\"updated_at\""},
	UpdatedByID: whereHelperint64{field: "\"organization\".\"updated_by_id\""},
	DisplayName: whereHelperstring{field: "\"organization\".\"display_name\""},
	Name:        whereHelperstring{field: "\"organization\".\"name\""},
}

// OrganizationRels is where relationship names are stored.
var OrganizationRels = struct {
	CreatedBy                    string
	UpdatedBy                    string
	DeveloperActions             string
	DeveloperBases               string
	Configurations               string
	DraftConfigurations          string
	Environments                 string
	EnvironmentVariables         string
	OrganizationBillingProviders string
	Pipelines                    string
	Subscriptions                string
	DeveloperTriggers            string
	Users                        string
	DefaultOrganizationUsers     string
}{
	CreatedBy:                    "CreatedBy",
	UpdatedBy:                    "UpdatedBy",
	DeveloperActions:             "DeveloperActions",
	DeveloperBases:               "DeveloperBases",
	Configurations:               "Configurations",
	DraftConfigurations:          "DraftConfigurations",
	Environments:                 "Environments",
	EnvironmentVariables:         "EnvironmentVariables",
	OrganizationBillingProviders: "OrganizationBillingProviders",
	Pipelines:                    "Pipelines",
	Subscriptions:                "Subscriptions",
	DeveloperTriggers:            "DeveloperTriggers",
	Users:                        "Users",
	DefaultOrganizationUsers:     "DefaultOrganizationUsers",
}

// organizationR is where relationships are stored.
type organizationR struct {
	CreatedBy                    *User
	UpdatedBy                    *User
	DeveloperActions             ActionSlice
	DeveloperBases               BaseSlice
	Configurations               ConfigurationSlice
	DraftConfigurations          DraftConfigurationSlice
	Environments                 EnvironmentSlice
	EnvironmentVariables         EnvironmentVariableSlice
	OrganizationBillingProviders OrganizationBillingProviderSlice
	Pipelines                    PipelineSlice
	Subscriptions                SubscriptionSlice
	DeveloperTriggers            TriggerSlice
	Users                        UserSlice
	DefaultOrganizationUsers     UserSlice
}

// NewStruct creates a new relationship struct
func (*organizationR) NewStruct() *organizationR {
	return &organizationR{}
}

// organizationL is where Load methods for each relationship are stored.
type organizationL struct{}

var (
	organizationAllColumns            = []string{"id", "created_at", "created_by_id", "updated_at", "updated_by_id", "display_name", "name"}
	organizationColumnsWithoutDefault = []string{"created_at", "created_by_id", "updated_at", "updated_by_id", "display_name", "name"}
	organizationColumnsWithDefault    = []string{"id"}
	organizationPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrganizationSlice is an alias for a slice of pointers to Organization.
	// This should generally be used opposed to []Organization.
	OrganizationSlice []*Organization
	// OrganizationHook is the signature for custom Organization hook methods
	OrganizationHook func(context.Context, boil.ContextExecutor, *Organization) error

	organizationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationType                 = reflect.TypeOf(&Organization{})
	organizationMapping              = queries.MakeStructMapping(organizationType)
	organizationPrimaryKeyMapping, _ = queries.BindMapping(organizationType, organizationMapping, organizationPrimaryKeyColumns)
	organizationInsertCacheMut       sync.RWMutex
	organizationInsertCache          = make(map[string]insertCache)
	organizationUpdateCacheMut       sync.RWMutex
	organizationUpdateCache          = make(map[string]updateCache)
	organizationUpsertCacheMut       sync.RWMutex
	organizationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationBeforeInsertHooks []OrganizationHook
var organizationBeforeUpdateHooks []OrganizationHook
var organizationBeforeDeleteHooks []OrganizationHook
var organizationBeforeUpsertHooks []OrganizationHook

var organizationAfterInsertHooks []OrganizationHook
var organizationAfterSelectHooks []OrganizationHook
var organizationAfterUpdateHooks []OrganizationHook
var organizationAfterDeleteHooks []OrganizationHook
var organizationAfterUpsertHooks []OrganizationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Organization) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Organization) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Organization) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Organization) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Organization) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Organization) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Organization) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Organization) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Organization) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationHook registers your hook function for all future operations.
func AddOrganizationHook(hookPoint boil.HookPoint, organizationHook OrganizationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationBeforeInsertHooks = append(organizationBeforeInsertHooks, organizationHook)
	case boil.BeforeUpdateHook:
		organizationBeforeUpdateHooks = append(organizationBeforeUpdateHooks, organizationHook)
	case boil.BeforeDeleteHook:
		organizationBeforeDeleteHooks = append(organizationBeforeDeleteHooks, organizationHook)
	case boil.BeforeUpsertHook:
		organizationBeforeUpsertHooks = append(organizationBeforeUpsertHooks, organizationHook)
	case boil.AfterInsertHook:
		organizationAfterInsertHooks = append(organizationAfterInsertHooks, organizationHook)
	case boil.AfterSelectHook:
		organizationAfterSelectHooks = append(organizationAfterSelectHooks, organizationHook)
	case boil.AfterUpdateHook:
		organizationAfterUpdateHooks = append(organizationAfterUpdateHooks, organizationHook)
	case boil.AfterDeleteHook:
		organizationAfterDeleteHooks = append(organizationAfterDeleteHooks, organizationHook)
	case boil.AfterUpsertHook:
		organizationAfterUpsertHooks = append(organizationAfterUpsertHooks, organizationHook)
	}
}

// One returns a single organization record from the query.
func (q organizationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Organization, error) {
	o := &Organization{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for organization")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Organization records from the query.
func (q organizationQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationSlice, error) {
	var o []*Organization

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Organization slice")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Organization records in the query.
func (q organizationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count organization rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if organization exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *Organization) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *Organization) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// DeveloperActions retrieves all the action's Actions with an executor via developer_id column.
func (o *Organization) DeveloperActions(mods ...qm.QueryMod) actionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action\".\"developer_id\"=?", o.ID),
	)

	query := Actions(queryMods...)
	queries.SetFrom(query.Query, "\"action\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action\".*"})
	}

	return query
}

// DeveloperBases retrieves all the base's Bases with an executor via developer_id column.
func (o *Organization) DeveloperBases(mods ...qm.QueryMod) baseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base\".\"developer_id\"=?", o.ID),
	)

	query := Bases(queryMods...)
	queries.SetFrom(query.Query, "\"base\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base\".*"})
	}

	return query
}

// Configurations retrieves all the configuration's Configurations with an executor.
func (o *Organization) Configurations(mods ...qm.QueryMod) configurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"configuration\".\"organization_id\"=?", o.ID),
	)

	query := Configurations(queryMods...)
	queries.SetFrom(query.Query, "\"configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"configuration\".*"})
	}

	return query
}

// DraftConfigurations retrieves all the draft_configuration's DraftConfigurations with an executor.
func (o *Organization) DraftConfigurations(mods ...qm.QueryMod) draftConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"draft_configuration\".\"organization_id\"=?", o.ID),
	)

	query := DraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"draft_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"draft_configuration\".*"})
	}

	return query
}

// Environments retrieves all the environment's Environments with an executor.
func (o *Organization) Environments(mods ...qm.QueryMod) environmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"environment\".\"organization_id\"=?", o.ID),
	)

	query := Environments(queryMods...)
	queries.SetFrom(query.Query, "\"environment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"environment\".*"})
	}

	return query
}

// EnvironmentVariables retrieves all the environment_variable's EnvironmentVariables with an executor.
func (o *Organization) EnvironmentVariables(mods ...qm.QueryMod) environmentVariableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"environment_variable\".\"organization_id\"=?", o.ID),
	)

	query := EnvironmentVariables(queryMods...)
	queries.SetFrom(query.Query, "\"environment_variable\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"environment_variable\".*"})
	}

	return query
}

// OrganizationBillingProviders retrieves all the organization_billing_provider's OrganizationBillingProviders with an executor.
func (o *Organization) OrganizationBillingProviders(mods ...qm.QueryMod) organizationBillingProviderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organization_billing_provider\".\"organization_id\"=?", o.ID),
	)

	query := OrganizationBillingProviders(queryMods...)
	queries.SetFrom(query.Query, "\"organization_billing_provider\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organization_billing_provider\".*"})
	}

	return query
}

// Pipelines retrieves all the pipeline's Pipelines with an executor.
func (o *Organization) Pipelines(mods ...qm.QueryMod) pipelineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pipeline\".\"organization_id\"=?", o.ID),
	)

	query := Pipelines(queryMods...)
	queries.SetFrom(query.Query, "\"pipeline\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pipeline\".*"})
	}

	return query
}

// Subscriptions retrieves all the subscription's Subscriptions with an executor.
func (o *Organization) Subscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscription\".\"organization_id\"=?", o.ID),
	)

	query := Subscriptions(queryMods...)
	queries.SetFrom(query.Query, "\"subscription\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscription\".*"})
	}

	return query
}

// DeveloperTriggers retrieves all the trigger's Triggers with an executor via developer_id column.
func (o *Organization) DeveloperTriggers(mods ...qm.QueryMod) triggerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trigger\".\"developer_id\"=?", o.ID),
	)

	query := Triggers(queryMods...)
	queries.SetFrom(query.Query, "\"trigger\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trigger\".*"})
	}

	return query
}

// Users retrieves all the user's Users with an executor.
func (o *Organization) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"user_organization\" on \"users\".\"id\" = \"user_organization\".\"user_id\""),
		qm.Where("\"user_organization\".\"organization_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// DefaultOrganizationUsers retrieves all the user's Users with an executor via default_organization_id column.
func (o *Organization) DefaultOrganizationUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"default_organization_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByOrganizations = append(foreign.R.CreatedByOrganizations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByOrganizations = append(foreign.R.CreatedByOrganizations, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByOrganizations = append(foreign.R.UpdatedByOrganizations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByOrganizations = append(foreign.R.UpdatedByOrganizations, local)
				break
			}
		}
	}

	return nil
}

// LoadDeveloperActions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadDeveloperActions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action`), qm.WhereIn(`action.developer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action")
	}

	var resultSlice []*Action
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action")
	}

	if len(actionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeveloperActions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionR{}
			}
			foreign.R.Developer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DeveloperID {
				local.R.DeveloperActions = append(local.R.DeveloperActions, foreign)
				if foreign.R == nil {
					foreign.R = &actionR{}
				}
				foreign.R.Developer = local
				break
			}
		}
	}

	return nil
}

// LoadDeveloperBases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadDeveloperBases(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base`), qm.WhereIn(`base.developer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base")
	}

	var resultSlice []*Base
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base")
	}

	if len(baseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeveloperBases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseR{}
			}
			foreign.R.Developer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DeveloperID {
				local.R.DeveloperBases = append(local.R.DeveloperBases, foreign)
				if foreign.R == nil {
					foreign.R = &baseR{}
				}
				foreign.R.Developer = local
				break
			}
		}
	}

	return nil
}

// LoadConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`configuration`), qm.WhereIn(`configuration.organization_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load configuration")
	}

	var resultSlice []*Configuration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for configuration")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Configurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configurationR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.Configurations = append(local.R.Configurations, foreign)
				if foreign.R == nil {
					foreign.R = &configurationR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadDraftConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadDraftConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`draft_configuration`), qm.WhereIn(`draft_configuration.organization_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load draft_configuration")
	}

	var resultSlice []*DraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice draft_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for draft_configuration")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DraftConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &draftConfigurationR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.DraftConfigurations = append(local.R.DraftConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &draftConfigurationR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadEnvironments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadEnvironments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`environment`), qm.WhereIn(`environment.organization_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load environment")
	}

	var resultSlice []*Environment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice environment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on environment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environment")
	}

	if len(environmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Environments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &environmentR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.Environments = append(local.R.Environments, foreign)
				if foreign.R == nil {
					foreign.R = &environmentR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadEnvironmentVariables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadEnvironmentVariables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`environment_variable`), qm.WhereIn(`environment_variable.organization_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load environment_variable")
	}

	var resultSlice []*EnvironmentVariable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice environment_variable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on environment_variable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environment_variable")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EnvironmentVariables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &environmentVariableR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.EnvironmentVariables = append(local.R.EnvironmentVariables, foreign)
				if foreign.R == nil {
					foreign.R = &environmentVariableR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizationBillingProviders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadOrganizationBillingProviders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization_billing_provider`), qm.WhereIn(`organization_billing_provider.organization_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organization_billing_provider")
	}

	var resultSlice []*OrganizationBillingProvider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organization_billing_provider")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organization_billing_provider")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization_billing_provider")
	}

	if len(organizationBillingProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrganizationBillingProviders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationBillingProviderR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.OrganizationBillingProviders = append(local.R.OrganizationBillingProviders, foreign)
				if foreign.R == nil {
					foreign.R = &organizationBillingProviderR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadPipelines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadPipelines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pipeline`), qm.WhereIn(`pipeline.organization_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pipeline")
	}

	var resultSlice []*Pipeline
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pipeline")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pipeline")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pipeline")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Pipelines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pipelineR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.Pipelines = append(local.R.Pipelines, foreign)
				if foreign.R == nil {
					foreign.R = &pipelineR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscription`), qm.WhereIn(`subscription.organization_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscription")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscription")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscription")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Subscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.Organization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationID {
				local.R.Subscriptions = append(local.R.Subscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.Organization = local
				break
			}
		}
	}

	return nil
}

// LoadDeveloperTriggers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadDeveloperTriggers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger`), qm.WhereIn(`trigger.developer_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger")
	}

	var resultSlice []*Trigger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trigger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger")
	}

	if len(triggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeveloperTriggers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerR{}
			}
			foreign.R.Developer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DeveloperID {
				local.R.DeveloperTriggers = append(local.R.DeveloperTriggers, foreign)
				if foreign.R == nil {
					foreign.R = &triggerR{}
				}
				foreign.R.Developer = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".*, \"a\".\"organization_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"user_organization\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"organization_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []int64
	for results.Next() {
		one := new(User)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.CreatedAt, &one.CreatedByID, &one.UpdatedAt, &one.UpdatedByID, &one.FullName, &one.PasswordHash, &one.Email, &one.DefaultOrganizationID, &one.Status, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Organizations = append(foreign.R.Organizations, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Organizations = append(foreign.R.Organizations, local)
				break
			}
		}
	}

	return nil
}

// LoadDefaultOrganizationUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationL) LoadDefaultOrganizationUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganization interface{}, mods queries.Applicator) error {
	var slice []*Organization
	var object *Organization

	if singular {
		object = maybeOrganization.(*Organization)
	} else {
		slice = *maybeOrganization.(*[]*Organization)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.default_organization_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DefaultOrganizationUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.DefaultOrganization = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DefaultOrganizationID) {
				local.R.DefaultOrganizationUsers = append(local.R.DefaultOrganizationUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DefaultOrganization = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the organization to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByOrganizations.
func (o *Organization) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organization\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &organizationR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByOrganizations: OrganizationSlice{o},
		}
	} else {
		related.R.CreatedByOrganizations = append(related.R.CreatedByOrganizations, o)
	}

	return nil
}

// SetUpdatedBy of the organization to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByOrganizations.
func (o *Organization) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organization\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &organizationR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByOrganizations: OrganizationSlice{o},
		}
	} else {
		related.R.UpdatedByOrganizations = append(related.R.UpdatedByOrganizations, o)
	}

	return nil
}

// AddDeveloperActions adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.DeveloperActions.
// Sets related.R.Developer appropriately.
func (o *Organization) AddDeveloperActions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Action) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeveloperID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"developer_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeveloperID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			DeveloperActions: related,
		}
	} else {
		o.R.DeveloperActions = append(o.R.DeveloperActions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionR{
				Developer: o,
			}
		} else {
			rel.R.Developer = o
		}
	}
	return nil
}

// AddDeveloperBases adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.DeveloperBases.
// Sets related.R.Developer appropriately.
func (o *Organization) AddDeveloperBases(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Base) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeveloperID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"developer_id"}),
				strmangle.WhereClause("\"", "\"", 2, basePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeveloperID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			DeveloperBases: related,
		}
	} else {
		o.R.DeveloperBases = append(o.R.DeveloperBases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseR{
				Developer: o,
			}
		} else {
			rel.R.Developer = o
		}
	}
	return nil
}

// AddConfigurations adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Configurations.
// Sets related.R.Organization appropriately.
func (o *Organization) AddConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Configuration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, configurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			Configurations: related,
		}
	} else {
		o.R.Configurations = append(o.R.Configurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configurationR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddDraftConfigurations adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.DraftConfigurations.
// Sets related.R.Organization appropriately.
func (o *Organization) AddDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DraftConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"draft_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, draftConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			DraftConfigurations: related,
		}
	} else {
		o.R.DraftConfigurations = append(o.R.DraftConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &draftConfigurationR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddEnvironments adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Environments.
// Sets related.R.Organization appropriately.
func (o *Organization) AddEnvironments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Environment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"environment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, environmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			Environments: related,
		}
	} else {
		o.R.Environments = append(o.R.Environments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &environmentR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddEnvironmentVariables adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.EnvironmentVariables.
// Sets related.R.Organization appropriately.
func (o *Organization) AddEnvironmentVariables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EnvironmentVariable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"environment_variable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			EnvironmentVariables: related,
		}
	} else {
		o.R.EnvironmentVariables = append(o.R.EnvironmentVariables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &environmentVariableR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddOrganizationBillingProviders adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.OrganizationBillingProviders.
// Sets related.R.Organization appropriately.
func (o *Organization) AddOrganizationBillingProviders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationBillingProvider) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organization_billing_provider\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationBillingProviderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			OrganizationBillingProviders: related,
		}
	} else {
		o.R.OrganizationBillingProviders = append(o.R.OrganizationBillingProviders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationBillingProviderR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddPipelines adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Pipelines.
// Sets related.R.Organization appropriately.
func (o *Organization) AddPipelines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pipeline) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pipeline\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, pipelinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			Pipelines: related,
		}
	} else {
		o.R.Pipelines = append(o.R.Pipelines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pipelineR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddSubscriptions adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Subscriptions.
// Sets related.R.Organization appropriately.
func (o *Organization) AddSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscription\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			Subscriptions: related,
		}
	} else {
		o.R.Subscriptions = append(o.R.Subscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				Organization: o,
			}
		} else {
			rel.R.Organization = o
		}
	}
	return nil
}

// AddDeveloperTriggers adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.DeveloperTriggers.
// Sets related.R.Developer appropriately.
func (o *Organization) AddDeveloperTriggers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Trigger) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeveloperID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trigger\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"developer_id"}),
				strmangle.WhereClause("\"", "\"", 2, triggerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeveloperID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			DeveloperTriggers: related,
		}
	} else {
		o.R.DeveloperTriggers = append(o.R.DeveloperTriggers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerR{
				Developer: o,
			}
		} else {
			rel.R.Developer = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Organizations appropriately.
func (o *Organization) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"user_organization\" (\"organization_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &organizationR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Organizations: OrganizationSlice{o},
			}
		} else {
			rel.R.Organizations = append(rel.R.Organizations, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// organization replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Organizations's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Organizations's Users accordingly.
func (o *Organization) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"user_organization\" where \"organization_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromOrganizationsSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}
	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Organizations.
func (o *Organization) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"user_organization\" where \"organization_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromOrganizationsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromOrganizationsSlice(o *Organization, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Organizations {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Organizations)
			if ln > 1 && i < ln-1 {
				rel.R.Organizations[i] = rel.R.Organizations[ln-1]
			}
			rel.R.Organizations = rel.R.Organizations[:ln-1]
			break
		}
	}
}

// AddDefaultOrganizationUsers adds the given related objects to the existing relationships
// of the organization, optionally inserting them as new records.
// Appends related to o.R.DefaultOrganizationUsers.
// Sets related.R.DefaultOrganization appropriately.
func (o *Organization) AddDefaultOrganizationUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DefaultOrganizationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"default_organization_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DefaultOrganizationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &organizationR{
			DefaultOrganizationUsers: related,
		}
	} else {
		o.R.DefaultOrganizationUsers = append(o.R.DefaultOrganizationUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				DefaultOrganization: o,
			}
		} else {
			rel.R.DefaultOrganization = o
		}
	}
	return nil
}

// SetDefaultOrganizationUsers removes all previously related items of the
// organization replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DefaultOrganization's DefaultOrganizationUsers accordingly.
// Replaces o.R.DefaultOrganizationUsers with related.
// Sets related.R.DefaultOrganization's DefaultOrganizationUsers accordingly.
func (o *Organization) SetDefaultOrganizationUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"default_organization_id\" = null where \"default_organization_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DefaultOrganizationUsers {
			queries.SetScanner(&rel.DefaultOrganizationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DefaultOrganization = nil
		}

		o.R.DefaultOrganizationUsers = nil
	}
	return o.AddDefaultOrganizationUsers(ctx, exec, insert, related...)
}

// RemoveDefaultOrganizationUsers relationships from objects passed in.
// Removes related items from R.DefaultOrganizationUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.DefaultOrganization.
func (o *Organization) RemoveDefaultOrganizationUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DefaultOrganizationID, nil)
		if rel.R != nil {
			rel.R.DefaultOrganization = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("default_organization_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DefaultOrganizationUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.DefaultOrganizationUsers)
			if ln > 1 && i < ln-1 {
				o.R.DefaultOrganizationUsers[i] = o.R.DefaultOrganizationUsers[ln-1]
			}
			o.R.DefaultOrganizationUsers = o.R.DefaultOrganizationUsers[:ln-1]
			break
		}
	}

	return nil
}

// Organizations retrieves all the records using an executor.
func Organizations(mods ...qm.QueryMod) organizationQuery {
	mods = append(mods, qm.From("\"organization\""))
	return organizationQuery{NewQuery(mods...)}
}

// FindOrganization retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganization(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Organization, error) {
	organizationObj := &Organization{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organization\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organizationObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from organization")
	}

	return organizationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Organization) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no organization provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationInsertCacheMut.RLock()
	cache, cached := organizationInsertCache[key]
	organizationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationAllColumns,
			organizationColumnsWithDefault,
			organizationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationType, organizationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organization\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organization\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into organization")
	}

	if !cached {
		organizationInsertCacheMut.Lock()
		organizationInsertCache[key] = cache
		organizationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Organization.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Organization) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationUpdateCacheMut.RLock()
	cache, cached := organizationUpdateCache[key]
	organizationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationAllColumns,
			organizationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update organization, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organization\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, append(wl, organizationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update organization row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for organization")
	}

	if !cached {
		organizationUpdateCacheMut.Lock()
		organizationUpdateCache[key] = cache
		organizationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for organization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for organization")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organization\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in organization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all organization")
	}
	return rowsAff, nil
}

// Delete deletes a single Organization record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Organization) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Organization provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationPrimaryKeyMapping)
	sql := "DELETE FROM \"organization\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from organization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for organization")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no organizationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from organization")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for organization")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organization\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from organization slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for organization")
	}

	if len(organizationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Organization) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganization(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organization\".* FROM \"organization\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in OrganizationSlice")
	}

	*o = slice

	return nil
}

// OrganizationExists checks if the Organization row exists.
func OrganizationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organization\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if organization exists")
	}

	return exists, nil
}

// Organization is an object representing the database table.
type OrganizationDTO struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	DisplayName string    `boil:"display_name" json:"displayName" toml:"displayName" yaml:"displayName"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
}

// DTO converts the Organization to a OrganizationDTO struct.
func (o Organization) DTO() *OrganizationDTO {
	return &OrganizationDTO{
		ID:          o.ID,
		CreatedAt:   o.CreatedAt,
		CreatedByID: o.CreatedByID,
		UpdatedAt:   o.UpdatedAt,
		UpdatedByID: o.UpdatedByID,
		DisplayName: o.DisplayName,
		Name:        o.Name,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Organization) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no organization provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationUpsertCacheMut.RLock()
	cache, cached := organizationUpsertCache[key]
	organizationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationAllColumns,
			organizationColumnsWithDefault,
			organizationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationAllColumns,
			organizationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert organization, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organizationPrimaryKeyColumns))
			copy(conflict, organizationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organization\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organizationType, organizationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationType, organizationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert organization")
	}

	if !cached {
		organizationUpsertCacheMut.Lock()
		organizationUpsertCache[key] = cache
		organizationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
