// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID                    int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt             time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID           null.Int64  `boil:"created_by_id" json:"createdByID,omitempty" toml:"createdByID" yaml:"createdByID,omitempty"`
	UpdatedAt             time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID           null.Int64  `boil:"updated_by_id" json:"updatedByID,omitempty" toml:"updatedByID" yaml:"updatedByID,omitempty"`
	FullName              string      `boil:"full_name" json:"fullName" toml:"fullName" yaml:"fullName"`
	PasswordHash          string      `boil:"password_hash" json:"passwordHash" toml:"passwordHash" yaml:"passwordHash"`
	Email                 null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	DefaultOrganizationID null.Int64  `boil:"default_organization_id" json:"defaultOrganizationID,omitempty" toml:"defaultOrganizationID" yaml:"defaultOrganizationID,omitempty"`
	Status                null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID                    string
	CreatedAt             string
	CreatedByID           string
	UpdatedAt             string
	UpdatedByID           string
	FullName              string
	PasswordHash          string
	Email                 string
	DefaultOrganizationID string
	Status                string
}{
	ID:                    "id",
	CreatedAt:             "created_at",
	CreatedByID:           "created_by_id",
	UpdatedAt:             "updated_at",
	UpdatedByID:           "updated_by_id",
	FullName:              "full_name",
	PasswordHash:          "password_hash",
	Email:                 "email",
	DefaultOrganizationID: "default_organization_id",
	Status:                "status",
}

// Generated where

var UserWhere = struct {
	ID                    whereHelperint64
	CreatedAt             whereHelpertime_Time
	CreatedByID           whereHelpernull_Int64
	UpdatedAt             whereHelpertime_Time
	UpdatedByID           whereHelpernull_Int64
	FullName              whereHelperstring
	PasswordHash          whereHelperstring
	Email                 whereHelpernull_String
	DefaultOrganizationID whereHelpernull_Int64
	Status                whereHelpernull_String
}{
	ID:                    whereHelperint64{field: "\"users\".\"id\""},
	CreatedAt:             whereHelpertime_Time{field: "\"users\".\"created_at\""},
	CreatedByID:           whereHelpernull_Int64{field: "\"users\".\"created_by_id\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"users\".\"updated_at\""},
	UpdatedByID:           whereHelpernull_Int64{field: "\"users\".\"updated_by_id\""},
	FullName:              whereHelperstring{field: "\"users\".\"full_name\""},
	PasswordHash:          whereHelperstring{field: "\"users\".\"password_hash\""},
	Email:                 whereHelpernull_String{field: "\"users\".\"email\""},
	DefaultOrganizationID: whereHelpernull_Int64{field: "\"users\".\"default_organization_id\""},
	Status:                whereHelpernull_String{field: "\"users\".\"status\""},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	CreatedBy                             string
	DefaultOrganization                   string
	UpdatedBy                             string
	AccountConfirmationTokens             string
	CreatedByActions                      string
	UpdatedByActions                      string
	CreatedByActionVersions               string
	UpdatedByActionVersions               string
	CreatedByBases                        string
	UpdatedByBases                        string
	CreatedByBaseVersions                 string
	UpdatedByBaseVersions                 string
	CreatedByConfigurations               string
	UpdatedByConfigurations               string
	CreatedByDeployments                  string
	UpdatedByDeployments                  string
	CreatedByDraftConfigurations          string
	UpdatedByDraftConfigurations          string
	CreatedByEnvironments                 string
	UpdatedByEnvironments                 string
	CreatedByEnvironmentVariables         string
	UpdatedByEnvironmentVariables         string
	CreatedByOrganizations                string
	UpdatedByOrganizations                string
	CreatedByOrganizationBillingProviders string
	UpdatedByOrganizationBillingProviders string
	CreatedByPipelines                    string
	UpdatedByPipelines                    string
	CreatedBySubscriptions                string
	UpdatedBySubscriptions                string
	CreatedBySubscriptionPlans            string
	UpdatedBySubscriptionPlans            string
	CreatedByTriggers                     string
	UpdatedByTriggers                     string
	CreatedByTriggerVersions              string
	UpdatedByTriggerVersions              string
	Organizations                         string
	CreatedByUsers                        string
	UpdatedByUsers                        string
}{
	CreatedBy:                             "CreatedBy",
	DefaultOrganization:                   "DefaultOrganization",
	UpdatedBy:                             "UpdatedBy",
	AccountConfirmationTokens:             "AccountConfirmationTokens",
	CreatedByActions:                      "CreatedByActions",
	UpdatedByActions:                      "UpdatedByActions",
	CreatedByActionVersions:               "CreatedByActionVersions",
	UpdatedByActionVersions:               "UpdatedByActionVersions",
	CreatedByBases:                        "CreatedByBases",
	UpdatedByBases:                        "UpdatedByBases",
	CreatedByBaseVersions:                 "CreatedByBaseVersions",
	UpdatedByBaseVersions:                 "UpdatedByBaseVersions",
	CreatedByConfigurations:               "CreatedByConfigurations",
	UpdatedByConfigurations:               "UpdatedByConfigurations",
	CreatedByDeployments:                  "CreatedByDeployments",
	UpdatedByDeployments:                  "UpdatedByDeployments",
	CreatedByDraftConfigurations:          "CreatedByDraftConfigurations",
	UpdatedByDraftConfigurations:          "UpdatedByDraftConfigurations",
	CreatedByEnvironments:                 "CreatedByEnvironments",
	UpdatedByEnvironments:                 "UpdatedByEnvironments",
	CreatedByEnvironmentVariables:         "CreatedByEnvironmentVariables",
	UpdatedByEnvironmentVariables:         "UpdatedByEnvironmentVariables",
	CreatedByOrganizations:                "CreatedByOrganizations",
	UpdatedByOrganizations:                "UpdatedByOrganizations",
	CreatedByOrganizationBillingProviders: "CreatedByOrganizationBillingProviders",
	UpdatedByOrganizationBillingProviders: "UpdatedByOrganizationBillingProviders",
	CreatedByPipelines:                    "CreatedByPipelines",
	UpdatedByPipelines:                    "UpdatedByPipelines",
	CreatedBySubscriptions:                "CreatedBySubscriptions",
	UpdatedBySubscriptions:                "UpdatedBySubscriptions",
	CreatedBySubscriptionPlans:            "CreatedBySubscriptionPlans",
	UpdatedBySubscriptionPlans:            "UpdatedBySubscriptionPlans",
	CreatedByTriggers:                     "CreatedByTriggers",
	UpdatedByTriggers:                     "UpdatedByTriggers",
	CreatedByTriggerVersions:              "CreatedByTriggerVersions",
	UpdatedByTriggerVersions:              "UpdatedByTriggerVersions",
	Organizations:                         "Organizations",
	CreatedByUsers:                        "CreatedByUsers",
	UpdatedByUsers:                        "UpdatedByUsers",
}

// userR is where relationships are stored.
type userR struct {
	CreatedBy                             *User
	DefaultOrganization                   *Organization
	UpdatedBy                             *User
	AccountConfirmationTokens             AccountConfirmationTokenSlice
	CreatedByActions                      ActionSlice
	UpdatedByActions                      ActionSlice
	CreatedByActionVersions               ActionVersionSlice
	UpdatedByActionVersions               ActionVersionSlice
	CreatedByBases                        BaseSlice
	UpdatedByBases                        BaseSlice
	CreatedByBaseVersions                 BaseVersionSlice
	UpdatedByBaseVersions                 BaseVersionSlice
	CreatedByConfigurations               ConfigurationSlice
	UpdatedByConfigurations               ConfigurationSlice
	CreatedByDeployments                  DeploymentSlice
	UpdatedByDeployments                  DeploymentSlice
	CreatedByDraftConfigurations          DraftConfigurationSlice
	UpdatedByDraftConfigurations          DraftConfigurationSlice
	CreatedByEnvironments                 EnvironmentSlice
	UpdatedByEnvironments                 EnvironmentSlice
	CreatedByEnvironmentVariables         EnvironmentVariableSlice
	UpdatedByEnvironmentVariables         EnvironmentVariableSlice
	CreatedByOrganizations                OrganizationSlice
	UpdatedByOrganizations                OrganizationSlice
	CreatedByOrganizationBillingProviders OrganizationBillingProviderSlice
	UpdatedByOrganizationBillingProviders OrganizationBillingProviderSlice
	CreatedByPipelines                    PipelineSlice
	UpdatedByPipelines                    PipelineSlice
	CreatedBySubscriptions                SubscriptionSlice
	UpdatedBySubscriptions                SubscriptionSlice
	CreatedBySubscriptionPlans            SubscriptionPlanSlice
	UpdatedBySubscriptionPlans            SubscriptionPlanSlice
	CreatedByTriggers                     TriggerSlice
	UpdatedByTriggers                     TriggerSlice
	CreatedByTriggerVersions              TriggerVersionSlice
	UpdatedByTriggerVersions              TriggerVersionSlice
	Organizations                         OrganizationSlice
	CreatedByUsers                        UserSlice
	UpdatedByUsers                        UserSlice
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "created_at", "created_by_id", "updated_at", "updated_by_id", "full_name", "password_hash", "email", "default_organization_id", "status"}
	userColumnsWithoutDefault = []string{"created_at", "created_by_id", "updated_at", "updated_by_id", "full_name", "password_hash", "email", "default_organization_id", "status"}
	userColumnsWithDefault    = []string{"id"}
	userPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should generally be used opposed to []User.
	UserSlice []*User
	// UserHook is the signature for custom User hook methods
	UserHook func(context.Context, boil.ContextExecutor, *User) error

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBeforeInsertHooks []UserHook
var userBeforeUpdateHooks []UserHook
var userBeforeDeleteHooks []UserHook
var userBeforeUpsertHooks []UserHook

var userAfterInsertHooks []UserHook
var userAfterSelectHooks []UserHook
var userAfterUpdateHooks []UserHook
var userAfterDeleteHooks []UserHook
var userAfterUpsertHooks []UserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *User) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *User) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *User) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *User) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *User) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *User) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *User) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *User) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *User) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHook registers your hook function for all future operations.
func AddUserHook(hookPoint boil.HookPoint, userHook UserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userBeforeInsertHooks = append(userBeforeInsertHooks, userHook)
	case boil.BeforeUpdateHook:
		userBeforeUpdateHooks = append(userBeforeUpdateHooks, userHook)
	case boil.BeforeDeleteHook:
		userBeforeDeleteHooks = append(userBeforeDeleteHooks, userHook)
	case boil.BeforeUpsertHook:
		userBeforeUpsertHooks = append(userBeforeUpsertHooks, userHook)
	case boil.AfterInsertHook:
		userAfterInsertHooks = append(userAfterInsertHooks, userHook)
	case boil.AfterSelectHook:
		userAfterSelectHooks = append(userAfterSelectHooks, userHook)
	case boil.AfterUpdateHook:
		userAfterUpdateHooks = append(userAfterUpdateHooks, userHook)
	case boil.AfterDeleteHook:
		userAfterDeleteHooks = append(userAfterDeleteHooks, userHook)
	case boil.AfterUpsertHook:
		userAfterUpsertHooks = append(userAfterUpsertHooks, userHook)
	}
}

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all User records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {
	var o []*User

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to User slice")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if users exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *User) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// DefaultOrganization pointed to by the foreign key.
func (o *User) DefaultOrganization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DefaultOrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *User) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// AccountConfirmationTokens retrieves all the account_confirmation_token's AccountConfirmationTokens with an executor.
func (o *User) AccountConfirmationTokens(mods ...qm.QueryMod) accountConfirmationTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"account_confirmation_token\".\"user_id\"=?", o.ID),
	)

	query := AccountConfirmationTokens(queryMods...)
	queries.SetFrom(query.Query, "\"account_confirmation_token\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"account_confirmation_token\".*"})
	}

	return query
}

// CreatedByActions retrieves all the action's Actions with an executor via created_by_id column.
func (o *User) CreatedByActions(mods ...qm.QueryMod) actionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action\".\"created_by_id\"=?", o.ID),
	)

	query := Actions(queryMods...)
	queries.SetFrom(query.Query, "\"action\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action\".*"})
	}

	return query
}

// UpdatedByActions retrieves all the action's Actions with an executor via updated_by_id column.
func (o *User) UpdatedByActions(mods ...qm.QueryMod) actionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action\".\"updated_by_id\"=?", o.ID),
	)

	query := Actions(queryMods...)
	queries.SetFrom(query.Query, "\"action\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action\".*"})
	}

	return query
}

// CreatedByActionVersions retrieves all the action_version's ActionVersions with an executor via created_by_id column.
func (o *User) CreatedByActionVersions(mods ...qm.QueryMod) actionVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action_version\".\"created_by_id\"=?", o.ID),
	)

	query := ActionVersions(queryMods...)
	queries.SetFrom(query.Query, "\"action_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action_version\".*"})
	}

	return query
}

// UpdatedByActionVersions retrieves all the action_version's ActionVersions with an executor via updated_by_id column.
func (o *User) UpdatedByActionVersions(mods ...qm.QueryMod) actionVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action_version\".\"updated_by_id\"=?", o.ID),
	)

	query := ActionVersions(queryMods...)
	queries.SetFrom(query.Query, "\"action_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action_version\".*"})
	}

	return query
}

// CreatedByBases retrieves all the base's Bases with an executor via created_by_id column.
func (o *User) CreatedByBases(mods ...qm.QueryMod) baseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base\".\"created_by_id\"=?", o.ID),
	)

	query := Bases(queryMods...)
	queries.SetFrom(query.Query, "\"base\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base\".*"})
	}

	return query
}

// UpdatedByBases retrieves all the base's Bases with an executor via updated_by_id column.
func (o *User) UpdatedByBases(mods ...qm.QueryMod) baseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base\".\"updated_by_id\"=?", o.ID),
	)

	query := Bases(queryMods...)
	queries.SetFrom(query.Query, "\"base\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base\".*"})
	}

	return query
}

// CreatedByBaseVersions retrieves all the base_version's BaseVersions with an executor via created_by_id column.
func (o *User) CreatedByBaseVersions(mods ...qm.QueryMod) baseVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base_version\".\"created_by_id\"=?", o.ID),
	)

	query := BaseVersions(queryMods...)
	queries.SetFrom(query.Query, "\"base_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base_version\".*"})
	}

	return query
}

// UpdatedByBaseVersions retrieves all the base_version's BaseVersions with an executor via updated_by_id column.
func (o *User) UpdatedByBaseVersions(mods ...qm.QueryMod) baseVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base_version\".\"updated_by_id\"=?", o.ID),
	)

	query := BaseVersions(queryMods...)
	queries.SetFrom(query.Query, "\"base_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base_version\".*"})
	}

	return query
}

// CreatedByConfigurations retrieves all the configuration's Configurations with an executor via created_by_id column.
func (o *User) CreatedByConfigurations(mods ...qm.QueryMod) configurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"configuration\".\"created_by_id\"=?", o.ID),
	)

	query := Configurations(queryMods...)
	queries.SetFrom(query.Query, "\"configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"configuration\".*"})
	}

	return query
}

// UpdatedByConfigurations retrieves all the configuration's Configurations with an executor via updated_by_id column.
func (o *User) UpdatedByConfigurations(mods ...qm.QueryMod) configurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"configuration\".\"updated_by_id\"=?", o.ID),
	)

	query := Configurations(queryMods...)
	queries.SetFrom(query.Query, "\"configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"configuration\".*"})
	}

	return query
}

// CreatedByDeployments retrieves all the deployment's Deployments with an executor via created_by_id column.
func (o *User) CreatedByDeployments(mods ...qm.QueryMod) deploymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deployment\".\"created_by_id\"=?", o.ID),
	)

	query := Deployments(queryMods...)
	queries.SetFrom(query.Query, "\"deployment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"deployment\".*"})
	}

	return query
}

// UpdatedByDeployments retrieves all the deployment's Deployments with an executor via updated_by_id column.
func (o *User) UpdatedByDeployments(mods ...qm.QueryMod) deploymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deployment\".\"updated_by_id\"=?", o.ID),
	)

	query := Deployments(queryMods...)
	queries.SetFrom(query.Query, "\"deployment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"deployment\".*"})
	}

	return query
}

// CreatedByDraftConfigurations retrieves all the draft_configuration's DraftConfigurations with an executor via created_by_id column.
func (o *User) CreatedByDraftConfigurations(mods ...qm.QueryMod) draftConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"draft_configuration\".\"created_by_id\"=?", o.ID),
	)

	query := DraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"draft_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"draft_configuration\".*"})
	}

	return query
}

// UpdatedByDraftConfigurations retrieves all the draft_configuration's DraftConfigurations with an executor via updated_by_id column.
func (o *User) UpdatedByDraftConfigurations(mods ...qm.QueryMod) draftConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"draft_configuration\".\"updated_by_id\"=?", o.ID),
	)

	query := DraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"draft_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"draft_configuration\".*"})
	}

	return query
}

// CreatedByEnvironments retrieves all the environment's Environments with an executor via created_by_id column.
func (o *User) CreatedByEnvironments(mods ...qm.QueryMod) environmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"environment\".\"created_by_id\"=?", o.ID),
	)

	query := Environments(queryMods...)
	queries.SetFrom(query.Query, "\"environment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"environment\".*"})
	}

	return query
}

// UpdatedByEnvironments retrieves all the environment's Environments with an executor via updated_by_id column.
func (o *User) UpdatedByEnvironments(mods ...qm.QueryMod) environmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"environment\".\"updated_by_id\"=?", o.ID),
	)

	query := Environments(queryMods...)
	queries.SetFrom(query.Query, "\"environment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"environment\".*"})
	}

	return query
}

// CreatedByEnvironmentVariables retrieves all the environment_variable's EnvironmentVariables with an executor via created_by_id column.
func (o *User) CreatedByEnvironmentVariables(mods ...qm.QueryMod) environmentVariableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"environment_variable\".\"created_by_id\"=?", o.ID),
	)

	query := EnvironmentVariables(queryMods...)
	queries.SetFrom(query.Query, "\"environment_variable\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"environment_variable\".*"})
	}

	return query
}

// UpdatedByEnvironmentVariables retrieves all the environment_variable's EnvironmentVariables with an executor via updated_by_id column.
func (o *User) UpdatedByEnvironmentVariables(mods ...qm.QueryMod) environmentVariableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"environment_variable\".\"updated_by_id\"=?", o.ID),
	)

	query := EnvironmentVariables(queryMods...)
	queries.SetFrom(query.Query, "\"environment_variable\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"environment_variable\".*"})
	}

	return query
}

// CreatedByOrganizations retrieves all the organization's Organizations with an executor via created_by_id column.
func (o *User) CreatedByOrganizations(mods ...qm.QueryMod) organizationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organization\".\"created_by_id\"=?", o.ID),
	)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organization\".*"})
	}

	return query
}

// UpdatedByOrganizations retrieves all the organization's Organizations with an executor via updated_by_id column.
func (o *User) UpdatedByOrganizations(mods ...qm.QueryMod) organizationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organization\".\"updated_by_id\"=?", o.ID),
	)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organization\".*"})
	}

	return query
}

// CreatedByOrganizationBillingProviders retrieves all the organization_billing_provider's OrganizationBillingProviders with an executor via created_by_id column.
func (o *User) CreatedByOrganizationBillingProviders(mods ...qm.QueryMod) organizationBillingProviderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organization_billing_provider\".\"created_by_id\"=?", o.ID),
	)

	query := OrganizationBillingProviders(queryMods...)
	queries.SetFrom(query.Query, "\"organization_billing_provider\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organization_billing_provider\".*"})
	}

	return query
}

// UpdatedByOrganizationBillingProviders retrieves all the organization_billing_provider's OrganizationBillingProviders with an executor via updated_by_id column.
func (o *User) UpdatedByOrganizationBillingProviders(mods ...qm.QueryMod) organizationBillingProviderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organization_billing_provider\".\"updated_by_id\"=?", o.ID),
	)

	query := OrganizationBillingProviders(queryMods...)
	queries.SetFrom(query.Query, "\"organization_billing_provider\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organization_billing_provider\".*"})
	}

	return query
}

// CreatedByPipelines retrieves all the pipeline's Pipelines with an executor via created_by_id column.
func (o *User) CreatedByPipelines(mods ...qm.QueryMod) pipelineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pipeline\".\"created_by_id\"=?", o.ID),
	)

	query := Pipelines(queryMods...)
	queries.SetFrom(query.Query, "\"pipeline\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pipeline\".*"})
	}

	return query
}

// UpdatedByPipelines retrieves all the pipeline's Pipelines with an executor via updated_by_id column.
func (o *User) UpdatedByPipelines(mods ...qm.QueryMod) pipelineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pipeline\".\"updated_by_id\"=?", o.ID),
	)

	query := Pipelines(queryMods...)
	queries.SetFrom(query.Query, "\"pipeline\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pipeline\".*"})
	}

	return query
}

// CreatedBySubscriptions retrieves all the subscription's Subscriptions with an executor via created_by_id column.
func (o *User) CreatedBySubscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscription\".\"created_by_id\"=?", o.ID),
	)

	query := Subscriptions(queryMods...)
	queries.SetFrom(query.Query, "\"subscription\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscription\".*"})
	}

	return query
}

// UpdatedBySubscriptions retrieves all the subscription's Subscriptions with an executor via updated_by_id column.
func (o *User) UpdatedBySubscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscription\".\"updated_by_id\"=?", o.ID),
	)

	query := Subscriptions(queryMods...)
	queries.SetFrom(query.Query, "\"subscription\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscription\".*"})
	}

	return query
}

// CreatedBySubscriptionPlans retrieves all the subscription_plan's SubscriptionPlans with an executor via created_by_id column.
func (o *User) CreatedBySubscriptionPlans(mods ...qm.QueryMod) subscriptionPlanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscription_plan\".\"created_by_id\"=?", o.ID),
	)

	query := SubscriptionPlans(queryMods...)
	queries.SetFrom(query.Query, "\"subscription_plan\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscription_plan\".*"})
	}

	return query
}

// UpdatedBySubscriptionPlans retrieves all the subscription_plan's SubscriptionPlans with an executor via updated_by_id column.
func (o *User) UpdatedBySubscriptionPlans(mods ...qm.QueryMod) subscriptionPlanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscription_plan\".\"updated_by_id\"=?", o.ID),
	)

	query := SubscriptionPlans(queryMods...)
	queries.SetFrom(query.Query, "\"subscription_plan\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscription_plan\".*"})
	}

	return query
}

// CreatedByTriggers retrieves all the trigger's Triggers with an executor via created_by_id column.
func (o *User) CreatedByTriggers(mods ...qm.QueryMod) triggerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trigger\".\"created_by_id\"=?", o.ID),
	)

	query := Triggers(queryMods...)
	queries.SetFrom(query.Query, "\"trigger\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trigger\".*"})
	}

	return query
}

// UpdatedByTriggers retrieves all the trigger's Triggers with an executor via updated_by_id column.
func (o *User) UpdatedByTriggers(mods ...qm.QueryMod) triggerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trigger\".\"updated_by_id\"=?", o.ID),
	)

	query := Triggers(queryMods...)
	queries.SetFrom(query.Query, "\"trigger\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trigger\".*"})
	}

	return query
}

// CreatedByTriggerVersions retrieves all the trigger_version's TriggerVersions with an executor via created_by_id column.
func (o *User) CreatedByTriggerVersions(mods ...qm.QueryMod) triggerVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trigger_version\".\"created_by_id\"=?", o.ID),
	)

	query := TriggerVersions(queryMods...)
	queries.SetFrom(query.Query, "\"trigger_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trigger_version\".*"})
	}

	return query
}

// UpdatedByTriggerVersions retrieves all the trigger_version's TriggerVersions with an executor via updated_by_id column.
func (o *User) UpdatedByTriggerVersions(mods ...qm.QueryMod) triggerVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trigger_version\".\"updated_by_id\"=?", o.ID),
	)

	query := TriggerVersions(queryMods...)
	queries.SetFrom(query.Query, "\"trigger_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trigger_version\".*"})
	}

	return query
}

// Organizations retrieves all the organization's Organizations with an executor.
func (o *User) Organizations(mods ...qm.QueryMod) organizationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"user_organization\" on \"organization\".\"id\" = \"user_organization\".\"organization_id\""),
		qm.Where("\"user_organization\".\"user_id\"=?", o.ID),
	)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organization\".*"})
	}

	return query
}

// CreatedByUsers retrieves all the user's Users with an executor via created_by_id column.
func (o *User) CreatedByUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"created_by_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// UpdatedByUsers retrieves all the user's Users with an executor via updated_by_id column.
func (o *User) UpdatedByUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"updated_by_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.CreatedByID) {
			args = append(args, object.CreatedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatedByID) {
				args = append(args, obj.CreatedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByUsers = append(foreign.R.CreatedByUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedByID, foreign.ID) {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByUsers = append(foreign.R.CreatedByUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadDefaultOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadDefaultOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.DefaultOrganizationID) {
			args = append(args, object.DefaultOrganizationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DefaultOrganizationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DefaultOrganizationID) {
				args = append(args, obj.DefaultOrganizationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DefaultOrganization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.DefaultOrganizationUsers = append(foreign.R.DefaultOrganizationUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DefaultOrganizationID, foreign.ID) {
				local.R.DefaultOrganization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.DefaultOrganizationUsers = append(foreign.R.DefaultOrganizationUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.UpdatedByID) {
			args = append(args, object.UpdatedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UpdatedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UpdatedByID) {
				args = append(args, obj.UpdatedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByUsers = append(foreign.R.UpdatedByUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UpdatedByID, foreign.ID) {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByUsers = append(foreign.R.UpdatedByUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadAccountConfirmationTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadAccountConfirmationTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`account_confirmation_token`), qm.WhereIn(`account_confirmation_token.user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load account_confirmation_token")
	}

	var resultSlice []*AccountConfirmationToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice account_confirmation_token")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on account_confirmation_token")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account_confirmation_token")
	}

	if len(accountConfirmationTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AccountConfirmationTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &accountConfirmationTokenR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.AccountConfirmationTokens = append(local.R.AccountConfirmationTokens, foreign)
				if foreign.R == nil {
					foreign.R = &accountConfirmationTokenR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByActions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByActions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action`), qm.WhereIn(`action.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action")
	}

	var resultSlice []*Action
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action")
	}

	if len(actionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByActions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByActions = append(local.R.CreatedByActions, foreign)
				if foreign.R == nil {
					foreign.R = &actionR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByActions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByActions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action`), qm.WhereIn(`action.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action")
	}

	var resultSlice []*Action
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action")
	}

	if len(actionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByActions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByActions = append(local.R.UpdatedByActions, foreign)
				if foreign.R == nil {
					foreign.R = &actionR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByActionVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByActionVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_version`), qm.WhereIn(`action_version.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action_version")
	}

	var resultSlice []*ActionVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action_version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_version")
	}

	if len(actionVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByActionVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionVersionR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByActionVersions = append(local.R.CreatedByActionVersions, foreign)
				if foreign.R == nil {
					foreign.R = &actionVersionR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByActionVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByActionVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_version`), qm.WhereIn(`action_version.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action_version")
	}

	var resultSlice []*ActionVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action_version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_version")
	}

	if len(actionVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByActionVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionVersionR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByActionVersions = append(local.R.UpdatedByActionVersions, foreign)
				if foreign.R == nil {
					foreign.R = &actionVersionR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByBases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByBases(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base`), qm.WhereIn(`base.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base")
	}

	var resultSlice []*Base
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base")
	}

	if len(baseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByBases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByBases = append(local.R.CreatedByBases, foreign)
				if foreign.R == nil {
					foreign.R = &baseR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByBases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByBases(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base`), qm.WhereIn(`base.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base")
	}

	var resultSlice []*Base
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base")
	}

	if len(baseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByBases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByBases = append(local.R.UpdatedByBases, foreign)
				if foreign.R == nil {
					foreign.R = &baseR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByBaseVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByBaseVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base_version`), qm.WhereIn(`base_version.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_version")
	}

	var resultSlice []*BaseVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base_version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_version")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByBaseVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseVersionR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByBaseVersions = append(local.R.CreatedByBaseVersions, foreign)
				if foreign.R == nil {
					foreign.R = &baseVersionR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByBaseVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByBaseVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base_version`), qm.WhereIn(`base_version.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_version")
	}

	var resultSlice []*BaseVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base_version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_version")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByBaseVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseVersionR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByBaseVersions = append(local.R.UpdatedByBaseVersions, foreign)
				if foreign.R == nil {
					foreign.R = &baseVersionR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`configuration`), qm.WhereIn(`configuration.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load configuration")
	}

	var resultSlice []*Configuration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for configuration")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configurationR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByConfigurations = append(local.R.CreatedByConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &configurationR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`configuration`), qm.WhereIn(`configuration.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load configuration")
	}

	var resultSlice []*Configuration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for configuration")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configurationR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByConfigurations = append(local.R.UpdatedByConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &configurationR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByDeployments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByDeployments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`deployment`), qm.WhereIn(`deployment.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deployment")
	}

	var resultSlice []*Deployment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deployment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deployment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deployment")
	}

	if len(deploymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByDeployments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deploymentR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByDeployments = append(local.R.CreatedByDeployments, foreign)
				if foreign.R == nil {
					foreign.R = &deploymentR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByDeployments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByDeployments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`deployment`), qm.WhereIn(`deployment.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deployment")
	}

	var resultSlice []*Deployment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deployment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deployment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deployment")
	}

	if len(deploymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByDeployments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deploymentR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByDeployments = append(local.R.UpdatedByDeployments, foreign)
				if foreign.R == nil {
					foreign.R = &deploymentR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByDraftConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByDraftConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`draft_configuration`), qm.WhereIn(`draft_configuration.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load draft_configuration")
	}

	var resultSlice []*DraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice draft_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for draft_configuration")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByDraftConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &draftConfigurationR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByDraftConfigurations = append(local.R.CreatedByDraftConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &draftConfigurationR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByDraftConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByDraftConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`draft_configuration`), qm.WhereIn(`draft_configuration.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load draft_configuration")
	}

	var resultSlice []*DraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice draft_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for draft_configuration")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByDraftConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &draftConfigurationR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByDraftConfigurations = append(local.R.UpdatedByDraftConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &draftConfigurationR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByEnvironments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByEnvironments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`environment`), qm.WhereIn(`environment.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load environment")
	}

	var resultSlice []*Environment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice environment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on environment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environment")
	}

	if len(environmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByEnvironments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &environmentR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByEnvironments = append(local.R.CreatedByEnvironments, foreign)
				if foreign.R == nil {
					foreign.R = &environmentR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByEnvironments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByEnvironments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`environment`), qm.WhereIn(`environment.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load environment")
	}

	var resultSlice []*Environment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice environment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on environment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environment")
	}

	if len(environmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByEnvironments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &environmentR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByEnvironments = append(local.R.UpdatedByEnvironments, foreign)
				if foreign.R == nil {
					foreign.R = &environmentR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByEnvironmentVariables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByEnvironmentVariables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`environment_variable`), qm.WhereIn(`environment_variable.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load environment_variable")
	}

	var resultSlice []*EnvironmentVariable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice environment_variable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on environment_variable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environment_variable")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByEnvironmentVariables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &environmentVariableR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByEnvironmentVariables = append(local.R.CreatedByEnvironmentVariables, foreign)
				if foreign.R == nil {
					foreign.R = &environmentVariableR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByEnvironmentVariables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByEnvironmentVariables(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`environment_variable`), qm.WhereIn(`environment_variable.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load environment_variable")
	}

	var resultSlice []*EnvironmentVariable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice environment_variable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on environment_variable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environment_variable")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByEnvironmentVariables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &environmentVariableR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByEnvironmentVariables = append(local.R.UpdatedByEnvironmentVariables, foreign)
				if foreign.R == nil {
					foreign.R = &environmentVariableR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByOrganizations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByOrganizations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByOrganizations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByOrganizations = append(local.R.CreatedByOrganizations, foreign)
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByOrganizations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByOrganizations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByOrganizations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByOrganizations = append(local.R.UpdatedByOrganizations, foreign)
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByOrganizationBillingProviders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByOrganizationBillingProviders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization_billing_provider`), qm.WhereIn(`organization_billing_provider.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organization_billing_provider")
	}

	var resultSlice []*OrganizationBillingProvider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organization_billing_provider")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organization_billing_provider")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization_billing_provider")
	}

	if len(organizationBillingProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByOrganizationBillingProviders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationBillingProviderR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByOrganizationBillingProviders = append(local.R.CreatedByOrganizationBillingProviders, foreign)
				if foreign.R == nil {
					foreign.R = &organizationBillingProviderR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByOrganizationBillingProviders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByOrganizationBillingProviders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization_billing_provider`), qm.WhereIn(`organization_billing_provider.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organization_billing_provider")
	}

	var resultSlice []*OrganizationBillingProvider
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organization_billing_provider")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organization_billing_provider")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization_billing_provider")
	}

	if len(organizationBillingProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByOrganizationBillingProviders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationBillingProviderR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByOrganizationBillingProviders = append(local.R.UpdatedByOrganizationBillingProviders, foreign)
				if foreign.R == nil {
					foreign.R = &organizationBillingProviderR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByPipelines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByPipelines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pipeline`), qm.WhereIn(`pipeline.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pipeline")
	}

	var resultSlice []*Pipeline
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pipeline")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pipeline")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pipeline")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByPipelines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pipelineR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByPipelines = append(local.R.CreatedByPipelines, foreign)
				if foreign.R == nil {
					foreign.R = &pipelineR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByPipelines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByPipelines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pipeline`), qm.WhereIn(`pipeline.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pipeline")
	}

	var resultSlice []*Pipeline
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pipeline")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pipeline")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pipeline")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByPipelines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pipelineR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByPipelines = append(local.R.UpdatedByPipelines, foreign)
				if foreign.R == nil {
					foreign.R = &pipelineR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedBySubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedBySubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscription`), qm.WhereIn(`subscription.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscription")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscription")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscription")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedBySubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedBySubscriptions = append(local.R.CreatedBySubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBySubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedBySubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscription`), qm.WhereIn(`subscription.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscription")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscription")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscription")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedBySubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedBySubscriptions = append(local.R.UpdatedBySubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedBySubscriptionPlans allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedBySubscriptionPlans(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscription_plan`), qm.WhereIn(`subscription_plan.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscription_plan")
	}

	var resultSlice []*SubscriptionPlan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscription_plan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscription_plan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscription_plan")
	}

	if len(subscriptionPlanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedBySubscriptionPlans = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionPlanR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedBySubscriptionPlans = append(local.R.CreatedBySubscriptionPlans, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionPlanR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBySubscriptionPlans allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedBySubscriptionPlans(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscription_plan`), qm.WhereIn(`subscription_plan.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscription_plan")
	}

	var resultSlice []*SubscriptionPlan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscription_plan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscription_plan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscription_plan")
	}

	if len(subscriptionPlanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedBySubscriptionPlans = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionPlanR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedBySubscriptionPlans = append(local.R.UpdatedBySubscriptionPlans, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionPlanR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByTriggers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByTriggers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger`), qm.WhereIn(`trigger.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger")
	}

	var resultSlice []*Trigger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trigger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger")
	}

	if len(triggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByTriggers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByTriggers = append(local.R.CreatedByTriggers, foreign)
				if foreign.R == nil {
					foreign.R = &triggerR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByTriggers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByTriggers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger`), qm.WhereIn(`trigger.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger")
	}

	var resultSlice []*Trigger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trigger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger")
	}

	if len(triggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByTriggers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByTriggers = append(local.R.UpdatedByTriggers, foreign)
				if foreign.R == nil {
					foreign.R = &triggerR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByTriggerVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByTriggerVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger_version`), qm.WhereIn(`trigger_version.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger_version")
	}

	var resultSlice []*TriggerVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trigger_version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_version")
	}

	if len(triggerVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByTriggerVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerVersionR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedByID {
				local.R.CreatedByTriggerVersions = append(local.R.CreatedByTriggerVersions, foreign)
				if foreign.R == nil {
					foreign.R = &triggerVersionR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByTriggerVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByTriggerVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger_version`), qm.WhereIn(`trigger_version.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger_version")
	}

	var resultSlice []*TriggerVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trigger_version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_version")
	}

	if len(triggerVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByTriggerVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerVersionR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedByID {
				local.R.UpdatedByTriggerVersions = append(local.R.UpdatedByTriggerVersions, foreign)
				if foreign.R == nil {
					foreign.R = &triggerVersionR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadOrganizations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadOrganizations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"organization\".*, \"a\".\"user_id\""),
		qm.From("\"organization\""),
		qm.InnerJoin("\"user_organization\" as \"a\" on \"organization\".\"id\" = \"a\".\"organization_id\""),
		qm.WhereIn("\"a\".\"user_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organization")
	}

	var resultSlice []*Organization

	var localJoinCols []int64
	for results.Next() {
		one := new(Organization)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.CreatedAt, &one.CreatedByID, &one.UpdatedAt, &one.UpdatedByID, &one.DisplayName, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for organization")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice organization")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Organizations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationR{}
			}
			foreign.R.Users = append(foreign.R.Users, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Organizations = append(local.R.Organizations, foreign)
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Users = append(foreign.R.Users, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.created_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.CreatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedByID) {
				local.R.CreatedByUsers = append(local.R.CreatedByUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedBy = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.updated_by_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.UpdatedBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UpdatedByID) {
				local.R.UpdatedByUsers = append(local.R.UpdatedByUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedBy = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the user to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByUsers.
func (o *User) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedByID, related.ID)
	if o.R == nil {
		o.R = &userR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByUsers: UserSlice{o},
		}
	} else {
		related.R.CreatedByUsers = append(related.R.CreatedByUsers, o)
	}

	return nil
}

// RemoveCreatedBy relationship.
// Sets o.R.CreatedBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *User) RemoveCreatedBy(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedByID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.CreatedBy = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByUsers {
		if queries.Equal(o.CreatedByID, ri.CreatedByID) {
			continue
		}

		ln := len(related.R.CreatedByUsers)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByUsers[i] = related.R.CreatedByUsers[ln-1]
		}
		related.R.CreatedByUsers = related.R.CreatedByUsers[:ln-1]
		break
	}
	return nil
}

// SetDefaultOrganization of the user to the related item.
// Sets o.R.DefaultOrganization to related.
// Adds o to related.R.DefaultOrganizationUsers.
func (o *User) SetDefaultOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"default_organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DefaultOrganizationID, related.ID)
	if o.R == nil {
		o.R = &userR{
			DefaultOrganization: related,
		}
	} else {
		o.R.DefaultOrganization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			DefaultOrganizationUsers: UserSlice{o},
		}
	} else {
		related.R.DefaultOrganizationUsers = append(related.R.DefaultOrganizationUsers, o)
	}

	return nil
}

// RemoveDefaultOrganization relationship.
// Sets o.R.DefaultOrganization to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *User) RemoveDefaultOrganization(ctx context.Context, exec boil.ContextExecutor, related *Organization) error {
	var err error

	queries.SetScanner(&o.DefaultOrganizationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("default_organization_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.DefaultOrganization = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DefaultOrganizationUsers {
		if queries.Equal(o.DefaultOrganizationID, ri.DefaultOrganizationID) {
			continue
		}

		ln := len(related.R.DefaultOrganizationUsers)
		if ln > 1 && i < ln-1 {
			related.R.DefaultOrganizationUsers[i] = related.R.DefaultOrganizationUsers[ln-1]
		}
		related.R.DefaultOrganizationUsers = related.R.DefaultOrganizationUsers[:ln-1]
		break
	}
	return nil
}

// SetUpdatedBy of the user to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByUsers.
func (o *User) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UpdatedByID, related.ID)
	if o.R == nil {
		o.R = &userR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByUsers: UserSlice{o},
		}
	} else {
		related.R.UpdatedByUsers = append(related.R.UpdatedByUsers, o)
	}

	return nil
}

// RemoveUpdatedBy relationship.
// Sets o.R.UpdatedBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *User) RemoveUpdatedBy(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UpdatedByID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("updated_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.UpdatedBy = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UpdatedByUsers {
		if queries.Equal(o.UpdatedByID, ri.UpdatedByID) {
			continue
		}

		ln := len(related.R.UpdatedByUsers)
		if ln > 1 && i < ln-1 {
			related.R.UpdatedByUsers[i] = related.R.UpdatedByUsers[ln-1]
		}
		related.R.UpdatedByUsers = related.R.UpdatedByUsers[:ln-1]
		break
	}
	return nil
}

// AddAccountConfirmationTokens adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AccountConfirmationTokens.
// Sets related.R.User appropriately.
func (o *User) AddAccountConfirmationTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AccountConfirmationToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"account_confirmation_token\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, accountConfirmationTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			AccountConfirmationTokens: related,
		}
	} else {
		o.R.AccountConfirmationTokens = append(o.R.AccountConfirmationTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountConfirmationTokenR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddCreatedByActions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByActions.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByActions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Action) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByActions: related,
		}
	} else {
		o.R.CreatedByActions = append(o.R.CreatedByActions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByActions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByActions.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByActions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Action) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByActions: related,
		}
	} else {
		o.R.UpdatedByActions = append(o.R.UpdatedByActions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByActionVersions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByActionVersions.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByActionVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action_version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByActionVersions: related,
		}
	} else {
		o.R.CreatedByActionVersions = append(o.R.CreatedByActionVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionVersionR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByActionVersions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByActionVersions.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByActionVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action_version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByActionVersions: related,
		}
	} else {
		o.R.UpdatedByActionVersions = append(o.R.UpdatedByActionVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionVersionR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByBases adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByBases.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByBases(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Base) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, basePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByBases: related,
		}
	} else {
		o.R.CreatedByBases = append(o.R.CreatedByBases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByBases adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByBases.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByBases(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Base) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, basePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByBases: related,
		}
	} else {
		o.R.UpdatedByBases = append(o.R.UpdatedByBases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByBaseVersions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByBaseVersions.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByBaseVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base_version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, baseVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByBaseVersions: related,
		}
	} else {
		o.R.CreatedByBaseVersions = append(o.R.CreatedByBaseVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseVersionR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByBaseVersions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByBaseVersions.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByBaseVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base_version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, baseVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByBaseVersions: related,
		}
	} else {
		o.R.UpdatedByBaseVersions = append(o.R.UpdatedByBaseVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseVersionR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByConfigurations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByConfigurations.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Configuration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, configurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByConfigurations: related,
		}
	} else {
		o.R.CreatedByConfigurations = append(o.R.CreatedByConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configurationR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByConfigurations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByConfigurations.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Configuration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, configurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByConfigurations: related,
		}
	} else {
		o.R.UpdatedByConfigurations = append(o.R.UpdatedByConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configurationR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByDeployments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByDeployments.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByDeployments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Deployment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deployment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, deploymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByDeployments: related,
		}
	} else {
		o.R.CreatedByDeployments = append(o.R.CreatedByDeployments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deploymentR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByDeployments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByDeployments.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByDeployments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Deployment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deployment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, deploymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByDeployments: related,
		}
	} else {
		o.R.UpdatedByDeployments = append(o.R.UpdatedByDeployments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deploymentR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByDraftConfigurations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByDraftConfigurations.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DraftConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"draft_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, draftConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByDraftConfigurations: related,
		}
	} else {
		o.R.CreatedByDraftConfigurations = append(o.R.CreatedByDraftConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &draftConfigurationR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByDraftConfigurations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByDraftConfigurations.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DraftConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"draft_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, draftConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByDraftConfigurations: related,
		}
	} else {
		o.R.UpdatedByDraftConfigurations = append(o.R.UpdatedByDraftConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &draftConfigurationR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByEnvironments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByEnvironments.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByEnvironments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Environment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"environment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, environmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByEnvironments: related,
		}
	} else {
		o.R.CreatedByEnvironments = append(o.R.CreatedByEnvironments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &environmentR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByEnvironments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByEnvironments.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByEnvironments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Environment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"environment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, environmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByEnvironments: related,
		}
	} else {
		o.R.UpdatedByEnvironments = append(o.R.UpdatedByEnvironments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &environmentR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByEnvironmentVariables adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByEnvironmentVariables.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByEnvironmentVariables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EnvironmentVariable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"environment_variable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByEnvironmentVariables: related,
		}
	} else {
		o.R.CreatedByEnvironmentVariables = append(o.R.CreatedByEnvironmentVariables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &environmentVariableR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByEnvironmentVariables adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByEnvironmentVariables.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByEnvironmentVariables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EnvironmentVariable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"environment_variable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByEnvironmentVariables: related,
		}
	} else {
		o.R.UpdatedByEnvironmentVariables = append(o.R.UpdatedByEnvironmentVariables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &environmentVariableR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByOrganizations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByOrganizations.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByOrganizations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organization\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByOrganizations: related,
		}
	} else {
		o.R.CreatedByOrganizations = append(o.R.CreatedByOrganizations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByOrganizations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByOrganizations.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByOrganizations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organization\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByOrganizations: related,
		}
	} else {
		o.R.UpdatedByOrganizations = append(o.R.UpdatedByOrganizations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByOrganizationBillingProviders adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByOrganizationBillingProviders.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByOrganizationBillingProviders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationBillingProvider) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organization_billing_provider\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationBillingProviderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByOrganizationBillingProviders: related,
		}
	} else {
		o.R.CreatedByOrganizationBillingProviders = append(o.R.CreatedByOrganizationBillingProviders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationBillingProviderR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByOrganizationBillingProviders adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByOrganizationBillingProviders.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByOrganizationBillingProviders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationBillingProvider) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organization_billing_provider\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationBillingProviderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByOrganizationBillingProviders: related,
		}
	} else {
		o.R.UpdatedByOrganizationBillingProviders = append(o.R.UpdatedByOrganizationBillingProviders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationBillingProviderR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByPipelines adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByPipelines.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByPipelines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pipeline) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pipeline\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, pipelinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByPipelines: related,
		}
	} else {
		o.R.CreatedByPipelines = append(o.R.CreatedByPipelines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pipelineR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByPipelines adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByPipelines.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByPipelines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pipeline) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pipeline\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, pipelinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByPipelines: related,
		}
	} else {
		o.R.UpdatedByPipelines = append(o.R.UpdatedByPipelines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pipelineR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedBySubscriptions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedBySubscriptions.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedBySubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscription\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedBySubscriptions: related,
		}
	} else {
		o.R.CreatedBySubscriptions = append(o.R.CreatedBySubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedBySubscriptions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedBySubscriptions.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedBySubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscription\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedBySubscriptions: related,
		}
	} else {
		o.R.UpdatedBySubscriptions = append(o.R.UpdatedBySubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedBySubscriptionPlans adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedBySubscriptionPlans.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedBySubscriptionPlans(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SubscriptionPlan) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscription_plan\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPlanPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedBySubscriptionPlans: related,
		}
	} else {
		o.R.CreatedBySubscriptionPlans = append(o.R.CreatedBySubscriptionPlans, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionPlanR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedBySubscriptionPlans adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedBySubscriptionPlans.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedBySubscriptionPlans(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SubscriptionPlan) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscription_plan\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPlanPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedBySubscriptionPlans: related,
		}
	} else {
		o.R.UpdatedBySubscriptionPlans = append(o.R.UpdatedBySubscriptionPlans, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionPlanR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByTriggers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByTriggers.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByTriggers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Trigger) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trigger\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, triggerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByTriggers: related,
		}
	} else {
		o.R.CreatedByTriggers = append(o.R.CreatedByTriggers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByTriggers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByTriggers.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByTriggers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Trigger) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trigger\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, triggerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByTriggers: related,
		}
	} else {
		o.R.UpdatedByTriggers = append(o.R.UpdatedByTriggers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddCreatedByTriggerVersions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByTriggerVersions.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByTriggerVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trigger_version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, triggerVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByTriggerVersions: related,
		}
	} else {
		o.R.CreatedByTriggerVersions = append(o.R.CreatedByTriggerVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerVersionR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// AddUpdatedByTriggerVersions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByTriggerVersions.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByTriggerVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedByID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trigger_version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, triggerVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedByID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByTriggerVersions: related,
		}
	} else {
		o.R.UpdatedByTriggerVersions = append(o.R.UpdatedByTriggerVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerVersionR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// AddOrganizations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Organizations.
// Sets related.R.Users appropriately.
func (o *User) AddOrganizations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"user_organization\" (\"user_id\", \"organization_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &userR{
			Organizations: related,
		}
	} else {
		o.R.Organizations = append(o.R.Organizations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationR{
				Users: UserSlice{o},
			}
		} else {
			rel.R.Users = append(rel.R.Users, o)
		}
	}
	return nil
}

// SetOrganizations removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Users's Organizations accordingly.
// Replaces o.R.Organizations with related.
// Sets related.R.Users's Organizations accordingly.
func (o *User) SetOrganizations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Organization) error {
	query := "delete from \"user_organization\" where \"user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeOrganizationsFromUsersSlice(o, related)
	if o.R != nil {
		o.R.Organizations = nil
	}
	return o.AddOrganizations(ctx, exec, insert, related...)
}

// RemoveOrganizations relationships from objects passed in.
// Removes related items from R.Organizations (uses pointer comparison, removal does not keep order)
// Sets related.R.Users.
func (o *User) RemoveOrganizations(ctx context.Context, exec boil.ContextExecutor, related ...*Organization) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"user_organization\" where \"user_id\" = $1 and \"organization_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeOrganizationsFromUsersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Organizations {
			if rel != ri {
				continue
			}

			ln := len(o.R.Organizations)
			if ln > 1 && i < ln-1 {
				o.R.Organizations[i] = o.R.Organizations[ln-1]
			}
			o.R.Organizations = o.R.Organizations[:ln-1]
			break
		}
	}

	return nil
}

func removeOrganizationsFromUsersSlice(o *User, related []*Organization) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Users {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Users)
			if ln > 1 && i < ln-1 {
				rel.R.Users[i] = rel.R.Users[ln-1]
			}
			rel.R.Users = rel.R.Users[:ln-1]
			break
		}
	}
}

// AddCreatedByUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByUsers.
// Sets related.R.CreatedBy appropriately.
func (o *User) AddCreatedByUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedByID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedByID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByUsers: related,
		}
	} else {
		o.R.CreatedByUsers = append(o.R.CreatedByUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				CreatedBy: o,
			}
		} else {
			rel.R.CreatedBy = o
		}
	}
	return nil
}

// SetCreatedByUsers removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedBy's CreatedByUsers accordingly.
// Replaces o.R.CreatedByUsers with related.
// Sets related.R.CreatedBy's CreatedByUsers accordingly.
func (o *User) SetCreatedByUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"created_by_id\" = null where \"created_by_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByUsers {
			queries.SetScanner(&rel.CreatedByID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedBy = nil
		}

		o.R.CreatedByUsers = nil
	}
	return o.AddCreatedByUsers(ctx, exec, insert, related...)
}

// RemoveCreatedByUsers relationships from objects passed in.
// Removes related items from R.CreatedByUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedBy.
func (o *User) RemoveCreatedByUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedByID, nil)
		if rel.R != nil {
			rel.R.CreatedBy = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByUsers)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByUsers[i] = o.R.CreatedByUsers[ln-1]
			}
			o.R.CreatedByUsers = o.R.CreatedByUsers[:ln-1]
			break
		}
	}

	return nil
}

// AddUpdatedByUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByUsers.
// Sets related.R.UpdatedBy appropriately.
func (o *User) AddUpdatedByUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UpdatedByID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UpdatedByID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByUsers: related,
		}
	} else {
		o.R.UpdatedByUsers = append(o.R.UpdatedByUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				UpdatedBy: o,
			}
		} else {
			rel.R.UpdatedBy = o
		}
	}
	return nil
}

// SetUpdatedByUsers removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UpdatedBy's UpdatedByUsers accordingly.
// Replaces o.R.UpdatedByUsers with related.
// Sets related.R.UpdatedBy's UpdatedByUsers accordingly.
func (o *User) SetUpdatedByUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"updated_by_id\" = null where \"updated_by_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UpdatedByUsers {
			queries.SetScanner(&rel.UpdatedByID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UpdatedBy = nil
		}

		o.R.UpdatedByUsers = nil
	}
	return o.AddUpdatedByUsers(ctx, exec, insert, related...)
}

// RemoveUpdatedByUsers relationships from objects passed in.
// Removes related items from R.UpdatedByUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.UpdatedBy.
func (o *User) RemoveUpdatedByUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UpdatedByID, nil)
		if rel.R != nil {
			rel.R.UpdatedBy = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("updated_by_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UpdatedByUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.UpdatedByUsers)
			if ln > 1 && i < ln-1 {
				o.R.UpdatedByUsers[i] = o.R.UpdatedByUsers[ln-1]
			}
			o.R.UpdatedByUsers = o.R.UpdatedByUsers[:ln-1]
			break
		}
	}

	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("\"users\""))
	return userQuery{NewQuery(mods...)}
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from users")
	}

	return userObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into users")
	}

	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no User provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM \"users\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for users")
	}

	if len(userAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users\".* FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if users exists")
	}

	return exists, nil
}

// User is an object representing the database table.
type UserDTO struct {
	ID                    int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt             time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID           null.Int64  `boil:"created_by_id" json:"createdByID,omitempty" toml:"createdByID" yaml:"createdByID,omitempty"`
	UpdatedAt             time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID           null.Int64  `boil:"updated_by_id" json:"updatedByID,omitempty" toml:"updatedByID" yaml:"updatedByID,omitempty"`
	FullName              string      `boil:"full_name" json:"fullName" toml:"fullName" yaml:"fullName"`
	PasswordHash          string      `boil:"password_hash" json:"passwordHash" toml:"passwordHash" yaml:"passwordHash"`
	Email                 null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	DefaultOrganizationID null.Int64  `boil:"default_organization_id" json:"defaultOrganizationID,omitempty" toml:"defaultOrganizationID" yaml:"defaultOrganizationID,omitempty"`
	Status                null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
}

// DTO converts the User to a UserDTO struct.
func (o User) DTO() *UserDTO {
	return &UserDTO{
		ID:                    o.ID,
		CreatedAt:             o.CreatedAt,
		CreatedByID:           o.CreatedByID,
		UpdatedAt:             o.UpdatedAt,
		UpdatedByID:           o.UpdatedByID,
		FullName:              o.FullName,
		PasswordHash:          o.PasswordHash,
		Email:                 o.Email,
		DefaultOrganizationID: o.DefaultOrganizationID,
		Status:                o.Status,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPrimaryKeyColumns))
			copy(conflict, userPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert users")
	}

	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
