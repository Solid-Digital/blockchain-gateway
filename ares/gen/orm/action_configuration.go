// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ActionConfiguration is an object representing the database table.
type ActionConfiguration struct {
	ID              int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ConfigurationID int64     `boil:"configuration_id" json:"configurationID" toml:"configurationID" yaml:"configurationID"`
	VersionID       int64     `boil:"version_id" json:"versionID" toml:"versionID" yaml:"versionID"`
	Index           int64     `boil:"index" json:"index" toml:"index" yaml:"index"`
	Name            string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Config          string    `boil:"config" json:"config" toml:"config" yaml:"config"`
	MessageConfig   null.JSON `boil:"message_config" json:"messageConfig,omitempty" toml:"messageConfig" yaml:"messageConfig,omitempty"`

	R *actionConfigurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L actionConfigurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActionConfigurationColumns = struct {
	ID              string
	ConfigurationID string
	VersionID       string
	Index           string
	Name            string
	Config          string
	MessageConfig   string
}{
	ID:              "id",
	ConfigurationID: "configuration_id",
	VersionID:       "version_id",
	Index:           "index",
	Name:            "name",
	Config:          "config",
	MessageConfig:   "message_config",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ActionConfigurationWhere = struct {
	ID              whereHelperint64
	ConfigurationID whereHelperint64
	VersionID       whereHelperint64
	Index           whereHelperint64
	Name            whereHelperstring
	Config          whereHelperstring
	MessageConfig   whereHelpernull_JSON
}{
	ID:              whereHelperint64{field: "\"action_configuration\".\"id\""},
	ConfigurationID: whereHelperint64{field: "\"action_configuration\".\"configuration_id\""},
	VersionID:       whereHelperint64{field: "\"action_configuration\".\"version_id\""},
	Index:           whereHelperint64{field: "\"action_configuration\".\"index\""},
	Name:            whereHelperstring{field: "\"action_configuration\".\"name\""},
	Config:          whereHelperstring{field: "\"action_configuration\".\"config\""},
	MessageConfig:   whereHelpernull_JSON{field: "\"action_configuration\".\"message_config\""},
}

// ActionConfigurationRels is where relationship names are stored.
var ActionConfigurationRels = struct {
	Configuration string
	Version       string
}{
	Configuration: "Configuration",
	Version:       "Version",
}

// actionConfigurationR is where relationships are stored.
type actionConfigurationR struct {
	Configuration *Configuration
	Version       *ActionVersion
}

// NewStruct creates a new relationship struct
func (*actionConfigurationR) NewStruct() *actionConfigurationR {
	return &actionConfigurationR{}
}

// actionConfigurationL is where Load methods for each relationship are stored.
type actionConfigurationL struct{}

var (
	actionConfigurationAllColumns            = []string{"id", "configuration_id", "version_id", "index", "name", "config", "message_config"}
	actionConfigurationColumnsWithoutDefault = []string{"configuration_id", "version_id", "index", "name", "config", "message_config"}
	actionConfigurationColumnsWithDefault    = []string{"id"}
	actionConfigurationPrimaryKeyColumns     = []string{"id"}
)

type (
	// ActionConfigurationSlice is an alias for a slice of pointers to ActionConfiguration.
	// This should generally be used opposed to []ActionConfiguration.
	ActionConfigurationSlice []*ActionConfiguration
	// ActionConfigurationHook is the signature for custom ActionConfiguration hook methods
	ActionConfigurationHook func(context.Context, boil.ContextExecutor, *ActionConfiguration) error

	actionConfigurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	actionConfigurationType                 = reflect.TypeOf(&ActionConfiguration{})
	actionConfigurationMapping              = queries.MakeStructMapping(actionConfigurationType)
	actionConfigurationPrimaryKeyMapping, _ = queries.BindMapping(actionConfigurationType, actionConfigurationMapping, actionConfigurationPrimaryKeyColumns)
	actionConfigurationInsertCacheMut       sync.RWMutex
	actionConfigurationInsertCache          = make(map[string]insertCache)
	actionConfigurationUpdateCacheMut       sync.RWMutex
	actionConfigurationUpdateCache          = make(map[string]updateCache)
	actionConfigurationUpsertCacheMut       sync.RWMutex
	actionConfigurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var actionConfigurationBeforeInsertHooks []ActionConfigurationHook
var actionConfigurationBeforeUpdateHooks []ActionConfigurationHook
var actionConfigurationBeforeDeleteHooks []ActionConfigurationHook
var actionConfigurationBeforeUpsertHooks []ActionConfigurationHook

var actionConfigurationAfterInsertHooks []ActionConfigurationHook
var actionConfigurationAfterSelectHooks []ActionConfigurationHook
var actionConfigurationAfterUpdateHooks []ActionConfigurationHook
var actionConfigurationAfterDeleteHooks []ActionConfigurationHook
var actionConfigurationAfterUpsertHooks []ActionConfigurationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActionConfiguration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActionConfiguration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActionConfiguration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActionConfiguration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActionConfiguration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActionConfiguration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActionConfiguration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActionConfiguration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActionConfiguration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionConfigurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActionConfigurationHook registers your hook function for all future operations.
func AddActionConfigurationHook(hookPoint boil.HookPoint, actionConfigurationHook ActionConfigurationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		actionConfigurationBeforeInsertHooks = append(actionConfigurationBeforeInsertHooks, actionConfigurationHook)
	case boil.BeforeUpdateHook:
		actionConfigurationBeforeUpdateHooks = append(actionConfigurationBeforeUpdateHooks, actionConfigurationHook)
	case boil.BeforeDeleteHook:
		actionConfigurationBeforeDeleteHooks = append(actionConfigurationBeforeDeleteHooks, actionConfigurationHook)
	case boil.BeforeUpsertHook:
		actionConfigurationBeforeUpsertHooks = append(actionConfigurationBeforeUpsertHooks, actionConfigurationHook)
	case boil.AfterInsertHook:
		actionConfigurationAfterInsertHooks = append(actionConfigurationAfterInsertHooks, actionConfigurationHook)
	case boil.AfterSelectHook:
		actionConfigurationAfterSelectHooks = append(actionConfigurationAfterSelectHooks, actionConfigurationHook)
	case boil.AfterUpdateHook:
		actionConfigurationAfterUpdateHooks = append(actionConfigurationAfterUpdateHooks, actionConfigurationHook)
	case boil.AfterDeleteHook:
		actionConfigurationAfterDeleteHooks = append(actionConfigurationAfterDeleteHooks, actionConfigurationHook)
	case boil.AfterUpsertHook:
		actionConfigurationAfterUpsertHooks = append(actionConfigurationAfterUpsertHooks, actionConfigurationHook)
	}
}

// One returns a single actionConfiguration record from the query.
func (q actionConfigurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActionConfiguration, error) {
	o := &ActionConfiguration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for action_configuration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActionConfiguration records from the query.
func (q actionConfigurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActionConfigurationSlice, error) {
	var o []*ActionConfiguration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ActionConfiguration slice")
	}

	if len(actionConfigurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActionConfiguration records in the query.
func (q actionConfigurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count action_configuration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q actionConfigurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if action_configuration exists")
	}

	return count > 0, nil
}

// Configuration pointed to by the foreign key.
func (o *ActionConfiguration) Configuration(mods ...qm.QueryMod) configurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConfigurationID),
	}

	queryMods = append(queryMods, mods...)

	query := Configurations(queryMods...)
	queries.SetFrom(query.Query, "\"configuration\"")

	return query
}

// Version pointed to by the foreign key.
func (o *ActionConfiguration) Version(mods ...qm.QueryMod) actionVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VersionID),
	}

	queryMods = append(queryMods, mods...)

	query := ActionVersions(queryMods...)
	queries.SetFrom(query.Query, "\"action_version\"")

	return query
}

// LoadConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionConfigurationL) LoadConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionConfiguration interface{}, mods queries.Applicator) error {
	var slice []*ActionConfiguration
	var object *ActionConfiguration

	if singular {
		object = maybeActionConfiguration.(*ActionConfiguration)
	} else {
		slice = *maybeActionConfiguration.(*[]*ActionConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionConfigurationR{}
		}
		args = append(args, object.ConfigurationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionConfigurationR{}
			}

			for _, a := range args {
				if a == obj.ConfigurationID {
					continue Outer
				}
			}

			args = append(args, obj.ConfigurationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`configuration`), qm.WhereIn(`configuration.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Configuration")
	}

	var resultSlice []*Configuration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for configuration")
	}

	if len(actionConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Configuration = foreign
		if foreign.R == nil {
			foreign.R = &configurationR{}
		}
		foreign.R.ActionConfigurations = append(foreign.R.ActionConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigurationID == foreign.ID {
				local.R.Configuration = foreign
				if foreign.R == nil {
					foreign.R = &configurationR{}
				}
				foreign.R.ActionConfigurations = append(foreign.R.ActionConfigurations, local)
				break
			}
		}
	}

	return nil
}

// LoadVersion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionConfigurationL) LoadVersion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionConfiguration interface{}, mods queries.Applicator) error {
	var slice []*ActionConfiguration
	var object *ActionConfiguration

	if singular {
		object = maybeActionConfiguration.(*ActionConfiguration)
	} else {
		slice = *maybeActionConfiguration.(*[]*ActionConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionConfigurationR{}
		}
		args = append(args, object.VersionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionConfigurationR{}
			}

			for _, a := range args {
				if a == obj.VersionID {
					continue Outer
				}
			}

			args = append(args, obj.VersionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_version`), qm.WhereIn(`action_version.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ActionVersion")
	}

	var resultSlice []*ActionVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ActionVersion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for action_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_version")
	}

	if len(actionConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Version = foreign
		if foreign.R == nil {
			foreign.R = &actionVersionR{}
		}
		foreign.R.VersionActionConfigurations = append(foreign.R.VersionActionConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VersionID == foreign.ID {
				local.R.Version = foreign
				if foreign.R == nil {
					foreign.R = &actionVersionR{}
				}
				foreign.R.VersionActionConfigurations = append(foreign.R.VersionActionConfigurations, local)
				break
			}
		}
	}

	return nil
}

// SetConfiguration of the actionConfiguration to the related item.
// Sets o.R.Configuration to related.
// Adds o to related.R.ActionConfigurations.
func (o *ActionConfiguration) SetConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Configuration) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"configuration_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigurationID = related.ID
	if o.R == nil {
		o.R = &actionConfigurationR{
			Configuration: related,
		}
	} else {
		o.R.Configuration = related
	}

	if related.R == nil {
		related.R = &configurationR{
			ActionConfigurations: ActionConfigurationSlice{o},
		}
	} else {
		related.R.ActionConfigurations = append(related.R.ActionConfigurations, o)
	}

	return nil
}

// SetVersion of the actionConfiguration to the related item.
// Sets o.R.Version to related.
// Adds o to related.R.VersionActionConfigurations.
func (o *ActionConfiguration) SetVersion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ActionVersion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VersionID = related.ID
	if o.R == nil {
		o.R = &actionConfigurationR{
			Version: related,
		}
	} else {
		o.R.Version = related
	}

	if related.R == nil {
		related.R = &actionVersionR{
			VersionActionConfigurations: ActionConfigurationSlice{o},
		}
	} else {
		related.R.VersionActionConfigurations = append(related.R.VersionActionConfigurations, o)
	}

	return nil
}

// ActionConfigurations retrieves all the records using an executor.
func ActionConfigurations(mods ...qm.QueryMod) actionConfigurationQuery {
	mods = append(mods, qm.From("\"action_configuration\""))
	return actionConfigurationQuery{NewQuery(mods...)}
}

// FindActionConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActionConfiguration(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ActionConfiguration, error) {
	actionConfigurationObj := &ActionConfiguration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"action_configuration\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, actionConfigurationObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from action_configuration")
	}

	return actionConfigurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActionConfiguration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no action_configuration provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionConfigurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	actionConfigurationInsertCacheMut.RLock()
	cache, cached := actionConfigurationInsertCache[key]
	actionConfigurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			actionConfigurationAllColumns,
			actionConfigurationColumnsWithDefault,
			actionConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(actionConfigurationType, actionConfigurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(actionConfigurationType, actionConfigurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"action_configuration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"action_configuration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into action_configuration")
	}

	if !cached {
		actionConfigurationInsertCacheMut.Lock()
		actionConfigurationInsertCache[key] = cache
		actionConfigurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActionConfiguration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActionConfiguration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	actionConfigurationUpdateCacheMut.RLock()
	cache, cached := actionConfigurationUpdateCache[key]
	actionConfigurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			actionConfigurationAllColumns,
			actionConfigurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update action_configuration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"action_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, actionConfigurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(actionConfigurationType, actionConfigurationMapping, append(wl, actionConfigurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update action_configuration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for action_configuration")
	}

	if !cached {
		actionConfigurationUpdateCacheMut.Lock()
		actionConfigurationUpdateCache[key] = cache
		actionConfigurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q actionConfigurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for action_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for action_configuration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActionConfigurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"action_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, actionConfigurationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in actionConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all actionConfiguration")
	}
	return rowsAff, nil
}

// Delete deletes a single ActionConfiguration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActionConfiguration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ActionConfiguration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), actionConfigurationPrimaryKeyMapping)
	sql := "DELETE FROM \"action_configuration\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from action_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for action_configuration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q actionConfigurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no actionConfigurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from action_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for action_configuration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActionConfigurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(actionConfigurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"action_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, actionConfigurationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from actionConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for action_configuration")
	}

	if len(actionConfigurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActionConfiguration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActionConfiguration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActionConfigurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActionConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"action_configuration\".* FROM \"action_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, actionConfigurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ActionConfigurationSlice")
	}

	*o = slice

	return nil
}

// ActionConfigurationExists checks if the ActionConfiguration row exists.
func ActionConfigurationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"action_configuration\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if action_configuration exists")
	}

	return exists, nil
}

// ActionConfiguration is an object representing the database table.
type ActionConfigurationDTO struct {
	ID              int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ConfigurationID int64     `boil:"configuration_id" json:"configurationID" toml:"configurationID" yaml:"configurationID"`
	VersionID       int64     `boil:"version_id" json:"versionID" toml:"versionID" yaml:"versionID"`
	Index           int64     `boil:"index" json:"index" toml:"index" yaml:"index"`
	Name            string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Config          string    `boil:"config" json:"config" toml:"config" yaml:"config"`
	MessageConfig   null.JSON `boil:"message_config" json:"messageConfig,omitempty" toml:"messageConfig" yaml:"messageConfig,omitempty"`
}

// DTO converts the ActionConfiguration to a ActionConfigurationDTO struct.
func (o ActionConfiguration) DTO() *ActionConfigurationDTO {
	return &ActionConfigurationDTO{
		ID:              o.ID,
		ConfigurationID: o.ConfigurationID,
		VersionID:       o.VersionID,
		Index:           o.Index,
		Name:            o.Name,
		Config:          o.Config,
		MessageConfig:   o.MessageConfig,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActionConfiguration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no action_configuration provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionConfigurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	actionConfigurationUpsertCacheMut.RLock()
	cache, cached := actionConfigurationUpsertCache[key]
	actionConfigurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			actionConfigurationAllColumns,
			actionConfigurationColumnsWithDefault,
			actionConfigurationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			actionConfigurationAllColumns,
			actionConfigurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert action_configuration, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(actionConfigurationPrimaryKeyColumns))
			copy(conflict, actionConfigurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"action_configuration\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(actionConfigurationType, actionConfigurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(actionConfigurationType, actionConfigurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert action_configuration")
	}

	if !cached {
		actionConfigurationUpsertCacheMut.Lock()
		actionConfigurationUpsertCache[key] = cache
		actionConfigurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
