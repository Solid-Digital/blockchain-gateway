// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SubscriptionPlan is an object representing the database table.
type SubscriptionPlan struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID   int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID   int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	PipelineLimit int64     `boil:"pipeline_limit" json:"pipelineLimit" toml:"pipelineLimit" yaml:"pipelineLimit"`

	R *subscriptionPlanR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subscriptionPlanL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubscriptionPlanColumns = struct {
	ID            string
	CreatedAt     string
	CreatedByID   string
	UpdatedAt     string
	UpdatedByID   string
	Name          string
	PipelineLimit string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	CreatedByID:   "created_by_id",
	UpdatedAt:     "updated_at",
	UpdatedByID:   "updated_by_id",
	Name:          "name",
	PipelineLimit: "pipeline_limit",
}

// Generated where

var SubscriptionPlanWhere = struct {
	ID            whereHelperint64
	CreatedAt     whereHelpertime_Time
	CreatedByID   whereHelperint64
	UpdatedAt     whereHelpertime_Time
	UpdatedByID   whereHelperint64
	Name          whereHelperstring
	PipelineLimit whereHelperint64
}{
	ID:            whereHelperint64{field: "\"subscription_plan\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"subscription_plan\".\"created_at\""},
	CreatedByID:   whereHelperint64{field: "\"subscription_plan\".\"created_by_id\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"subscription_plan\".\"updated_at\""},
	UpdatedByID:   whereHelperint64{field: "\"subscription_plan\".\"updated_by_id\""},
	Name:          whereHelperstring{field: "\"subscription_plan\".\"name\""},
	PipelineLimit: whereHelperint64{field: "\"subscription_plan\".\"pipeline_limit\""},
}

// SubscriptionPlanRels is where relationship names are stored.
var SubscriptionPlanRels = struct {
	CreatedBy     string
	UpdatedBy     string
	Subscriptions string
}{
	CreatedBy:     "CreatedBy",
	UpdatedBy:     "UpdatedBy",
	Subscriptions: "Subscriptions",
}

// subscriptionPlanR is where relationships are stored.
type subscriptionPlanR struct {
	CreatedBy     *User
	UpdatedBy     *User
	Subscriptions SubscriptionSlice
}

// NewStruct creates a new relationship struct
func (*subscriptionPlanR) NewStruct() *subscriptionPlanR {
	return &subscriptionPlanR{}
}

// subscriptionPlanL is where Load methods for each relationship are stored.
type subscriptionPlanL struct{}

var (
	subscriptionPlanAllColumns            = []string{"id", "created_at", "created_by_id", "updated_at", "updated_by_id", "name", "pipeline_limit"}
	subscriptionPlanColumnsWithoutDefault = []string{"created_at", "created_by_id", "updated_at", "updated_by_id", "name", "pipeline_limit"}
	subscriptionPlanColumnsWithDefault    = []string{"id"}
	subscriptionPlanPrimaryKeyColumns     = []string{"id"}
)

type (
	// SubscriptionPlanSlice is an alias for a slice of pointers to SubscriptionPlan.
	// This should generally be used opposed to []SubscriptionPlan.
	SubscriptionPlanSlice []*SubscriptionPlan
	// SubscriptionPlanHook is the signature for custom SubscriptionPlan hook methods
	SubscriptionPlanHook func(context.Context, boil.ContextExecutor, *SubscriptionPlan) error

	subscriptionPlanQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subscriptionPlanType                 = reflect.TypeOf(&SubscriptionPlan{})
	subscriptionPlanMapping              = queries.MakeStructMapping(subscriptionPlanType)
	subscriptionPlanPrimaryKeyMapping, _ = queries.BindMapping(subscriptionPlanType, subscriptionPlanMapping, subscriptionPlanPrimaryKeyColumns)
	subscriptionPlanInsertCacheMut       sync.RWMutex
	subscriptionPlanInsertCache          = make(map[string]insertCache)
	subscriptionPlanUpdateCacheMut       sync.RWMutex
	subscriptionPlanUpdateCache          = make(map[string]updateCache)
	subscriptionPlanUpsertCacheMut       sync.RWMutex
	subscriptionPlanUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var subscriptionPlanBeforeInsertHooks []SubscriptionPlanHook
var subscriptionPlanBeforeUpdateHooks []SubscriptionPlanHook
var subscriptionPlanBeforeDeleteHooks []SubscriptionPlanHook
var subscriptionPlanBeforeUpsertHooks []SubscriptionPlanHook

var subscriptionPlanAfterInsertHooks []SubscriptionPlanHook
var subscriptionPlanAfterSelectHooks []SubscriptionPlanHook
var subscriptionPlanAfterUpdateHooks []SubscriptionPlanHook
var subscriptionPlanAfterDeleteHooks []SubscriptionPlanHook
var subscriptionPlanAfterUpsertHooks []SubscriptionPlanHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SubscriptionPlan) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SubscriptionPlan) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SubscriptionPlan) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SubscriptionPlan) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SubscriptionPlan) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SubscriptionPlan) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SubscriptionPlan) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SubscriptionPlan) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SubscriptionPlan) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionPlanAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubscriptionPlanHook registers your hook function for all future operations.
func AddSubscriptionPlanHook(hookPoint boil.HookPoint, subscriptionPlanHook SubscriptionPlanHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		subscriptionPlanBeforeInsertHooks = append(subscriptionPlanBeforeInsertHooks, subscriptionPlanHook)
	case boil.BeforeUpdateHook:
		subscriptionPlanBeforeUpdateHooks = append(subscriptionPlanBeforeUpdateHooks, subscriptionPlanHook)
	case boil.BeforeDeleteHook:
		subscriptionPlanBeforeDeleteHooks = append(subscriptionPlanBeforeDeleteHooks, subscriptionPlanHook)
	case boil.BeforeUpsertHook:
		subscriptionPlanBeforeUpsertHooks = append(subscriptionPlanBeforeUpsertHooks, subscriptionPlanHook)
	case boil.AfterInsertHook:
		subscriptionPlanAfterInsertHooks = append(subscriptionPlanAfterInsertHooks, subscriptionPlanHook)
	case boil.AfterSelectHook:
		subscriptionPlanAfterSelectHooks = append(subscriptionPlanAfterSelectHooks, subscriptionPlanHook)
	case boil.AfterUpdateHook:
		subscriptionPlanAfterUpdateHooks = append(subscriptionPlanAfterUpdateHooks, subscriptionPlanHook)
	case boil.AfterDeleteHook:
		subscriptionPlanAfterDeleteHooks = append(subscriptionPlanAfterDeleteHooks, subscriptionPlanHook)
	case boil.AfterUpsertHook:
		subscriptionPlanAfterUpsertHooks = append(subscriptionPlanAfterUpsertHooks, subscriptionPlanHook)
	}
}

// One returns a single subscriptionPlan record from the query.
func (q subscriptionPlanQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SubscriptionPlan, error) {
	o := &SubscriptionPlan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for subscription_plan")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SubscriptionPlan records from the query.
func (q subscriptionPlanQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubscriptionPlanSlice, error) {
	var o []*SubscriptionPlan

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to SubscriptionPlan slice")
	}

	if len(subscriptionPlanAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SubscriptionPlan records in the query.
func (q subscriptionPlanQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count subscription_plan rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subscriptionPlanQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if subscription_plan exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *SubscriptionPlan) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *SubscriptionPlan) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Subscriptions retrieves all the subscription's Subscriptions with an executor.
func (o *SubscriptionPlan) Subscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscription\".\"subscription_plan_id\"=?", o.ID),
	)

	query := Subscriptions(queryMods...)
	queries.SetFrom(query.Query, "\"subscription\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"subscription\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionPlanL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscriptionPlan interface{}, mods queries.Applicator) error {
	var slice []*SubscriptionPlan
	var object *SubscriptionPlan

	if singular {
		object = maybeSubscriptionPlan.(*SubscriptionPlan)
	} else {
		slice = *maybeSubscriptionPlan.(*[]*SubscriptionPlan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriptionPlanR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionPlanR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(subscriptionPlanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedBySubscriptionPlans = append(foreign.R.CreatedBySubscriptionPlans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedBySubscriptionPlans = append(foreign.R.CreatedBySubscriptionPlans, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionPlanL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscriptionPlan interface{}, mods queries.Applicator) error {
	var slice []*SubscriptionPlan
	var object *SubscriptionPlan

	if singular {
		object = maybeSubscriptionPlan.(*SubscriptionPlan)
	} else {
		slice = *maybeSubscriptionPlan.(*[]*SubscriptionPlan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriptionPlanR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionPlanR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(subscriptionPlanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedBySubscriptionPlans = append(foreign.R.UpdatedBySubscriptionPlans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedBySubscriptionPlans = append(foreign.R.UpdatedBySubscriptionPlans, local)
				break
			}
		}
	}

	return nil
}

// LoadSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subscriptionPlanL) LoadSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscriptionPlan interface{}, mods queries.Applicator) error {
	var slice []*SubscriptionPlan
	var object *SubscriptionPlan

	if singular {
		object = maybeSubscriptionPlan.(*SubscriptionPlan)
	} else {
		slice = *maybeSubscriptionPlan.(*[]*SubscriptionPlan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subscriptionPlanR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionPlanR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subscription`), qm.WhereIn(`subscription.subscription_plan_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscription")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscription")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscription")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscription")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Subscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.SubscriptionPlan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SubscriptionPlanID {
				local.R.Subscriptions = append(local.R.Subscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.SubscriptionPlan = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the subscriptionPlan to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedBySubscriptionPlans.
func (o *SubscriptionPlan) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscription_plan\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPlanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &subscriptionPlanR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedBySubscriptionPlans: SubscriptionPlanSlice{o},
		}
	} else {
		related.R.CreatedBySubscriptionPlans = append(related.R.CreatedBySubscriptionPlans, o)
	}

	return nil
}

// SetUpdatedBy of the subscriptionPlan to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedBySubscriptionPlans.
func (o *SubscriptionPlan) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscription_plan\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPlanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &subscriptionPlanR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedBySubscriptionPlans: SubscriptionPlanSlice{o},
		}
	} else {
		related.R.UpdatedBySubscriptionPlans = append(related.R.UpdatedBySubscriptionPlans, o)
	}

	return nil
}

// AddSubscriptions adds the given related objects to the existing relationships
// of the subscription_plan, optionally inserting them as new records.
// Appends related to o.R.Subscriptions.
// Sets related.R.SubscriptionPlan appropriately.
func (o *SubscriptionPlan) AddSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SubscriptionPlanID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscription\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"subscription_plan_id"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SubscriptionPlanID = o.ID
		}
	}

	if o.R == nil {
		o.R = &subscriptionPlanR{
			Subscriptions: related,
		}
	} else {
		o.R.Subscriptions = append(o.R.Subscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				SubscriptionPlan: o,
			}
		} else {
			rel.R.SubscriptionPlan = o
		}
	}
	return nil
}

// SubscriptionPlans retrieves all the records using an executor.
func SubscriptionPlans(mods ...qm.QueryMod) subscriptionPlanQuery {
	mods = append(mods, qm.From("\"subscription_plan\""))
	return subscriptionPlanQuery{NewQuery(mods...)}
}

// FindSubscriptionPlan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubscriptionPlan(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SubscriptionPlan, error) {
	subscriptionPlanObj := &SubscriptionPlan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subscription_plan\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, subscriptionPlanObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from subscription_plan")
	}

	return subscriptionPlanObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubscriptionPlan) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no subscription_plan provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriptionPlanColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subscriptionPlanInsertCacheMut.RLock()
	cache, cached := subscriptionPlanInsertCache[key]
	subscriptionPlanInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subscriptionPlanAllColumns,
			subscriptionPlanColumnsWithDefault,
			subscriptionPlanColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subscriptionPlanType, subscriptionPlanMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subscriptionPlanType, subscriptionPlanMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subscription_plan\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subscription_plan\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into subscription_plan")
	}

	if !cached {
		subscriptionPlanInsertCacheMut.Lock()
		subscriptionPlanInsertCache[key] = cache
		subscriptionPlanInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SubscriptionPlan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubscriptionPlan) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subscriptionPlanUpdateCacheMut.RLock()
	cache, cached := subscriptionPlanUpdateCache[key]
	subscriptionPlanUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subscriptionPlanAllColumns,
			subscriptionPlanPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update subscription_plan, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subscription_plan\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subscriptionPlanPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subscriptionPlanType, subscriptionPlanMapping, append(wl, subscriptionPlanPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update subscription_plan row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for subscription_plan")
	}

	if !cached {
		subscriptionPlanUpdateCacheMut.Lock()
		subscriptionPlanUpdateCache[key] = cache
		subscriptionPlanUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q subscriptionPlanQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for subscription_plan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for subscription_plan")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubscriptionPlanSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPlanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subscription_plan\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subscriptionPlanPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in subscriptionPlan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all subscriptionPlan")
	}
	return rowsAff, nil
}

// Delete deletes a single SubscriptionPlan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubscriptionPlan) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no SubscriptionPlan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subscriptionPlanPrimaryKeyMapping)
	sql := "DELETE FROM \"subscription_plan\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from subscription_plan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for subscription_plan")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subscriptionPlanQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no subscriptionPlanQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from subscription_plan")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for subscription_plan")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubscriptionPlanSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(subscriptionPlanBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPlanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subscription_plan\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subscriptionPlanPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from subscriptionPlan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for subscription_plan")
	}

	if len(subscriptionPlanAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubscriptionPlan) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubscriptionPlan(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubscriptionPlanSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubscriptionPlanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPlanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subscription_plan\".* FROM \"subscription_plan\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subscriptionPlanPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in SubscriptionPlanSlice")
	}

	*o = slice

	return nil
}

// SubscriptionPlanExists checks if the SubscriptionPlan row exists.
func SubscriptionPlanExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subscription_plan\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if subscription_plan exists")
	}

	return exists, nil
}

// SubscriptionPlan is an object representing the database table.
type SubscriptionPlanDTO struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID   int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID   int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	PipelineLimit int64     `boil:"pipeline_limit" json:"pipelineLimit" toml:"pipelineLimit" yaml:"pipelineLimit"`
}

// DTO converts the SubscriptionPlan to a SubscriptionPlanDTO struct.
func (o SubscriptionPlan) DTO() *SubscriptionPlanDTO {
	return &SubscriptionPlanDTO{
		ID:            o.ID,
		CreatedAt:     o.CreatedAt,
		CreatedByID:   o.CreatedByID,
		UpdatedAt:     o.UpdatedAt,
		UpdatedByID:   o.UpdatedByID,
		Name:          o.Name,
		PipelineLimit: o.PipelineLimit,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubscriptionPlan) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no subscription_plan provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriptionPlanColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subscriptionPlanUpsertCacheMut.RLock()
	cache, cached := subscriptionPlanUpsertCache[key]
	subscriptionPlanUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subscriptionPlanAllColumns,
			subscriptionPlanColumnsWithDefault,
			subscriptionPlanColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			subscriptionPlanAllColumns,
			subscriptionPlanPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert subscription_plan, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subscriptionPlanPrimaryKeyColumns))
			copy(conflict, subscriptionPlanPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subscription_plan\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subscriptionPlanType, subscriptionPlanMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subscriptionPlanType, subscriptionPlanMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert subscription_plan")
	}

	if !cached {
		subscriptionPlanUpsertCacheMut.Lock()
		subscriptionPlanUpsertCache[key] = cache
		subscriptionPlanUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
