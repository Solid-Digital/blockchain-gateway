// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// EnvironmentVariable is an object representing the database table.
type EnvironmentVariable struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID int64     `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	PipelineID     int64     `boil:"pipeline_id" json:"pipelineID" toml:"pipelineID" yaml:"pipelineID"`
	EnvironmentID  int64     `boil:"environment_id" json:"environmentID" toml:"environmentID" yaml:"environmentID"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Index          int64     `boil:"index" json:"index" toml:"index" yaml:"index"`
	Key            string    `boil:"key" json:"key" toml:"key" yaml:"key"`
	Value          string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	Secret         bool      `boil:"secret" json:"secret" toml:"secret" yaml:"secret"`
	Deployed       bool      `boil:"deployed" json:"deployed" toml:"deployed" yaml:"deployed"`

	R *environmentVariableR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L environmentVariableL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EnvironmentVariableColumns = struct {
	ID             string
	OrganizationID string
	PipelineID     string
	EnvironmentID  string
	CreatedAt      string
	CreatedByID    string
	UpdatedAt      string
	UpdatedByID    string
	Index          string
	Key            string
	Value          string
	Secret         string
	Deployed       string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	PipelineID:     "pipeline_id",
	EnvironmentID:  "environment_id",
	CreatedAt:      "created_at",
	CreatedByID:    "created_by_id",
	UpdatedAt:      "updated_at",
	UpdatedByID:    "updated_by_id",
	Index:          "index",
	Key:            "key",
	Value:          "value",
	Secret:         "secret",
	Deployed:       "deployed",
}

// Generated where

var EnvironmentVariableWhere = struct {
	ID             whereHelperint64
	OrganizationID whereHelperint64
	PipelineID     whereHelperint64
	EnvironmentID  whereHelperint64
	CreatedAt      whereHelpertime_Time
	CreatedByID    whereHelperint64
	UpdatedAt      whereHelpertime_Time
	UpdatedByID    whereHelperint64
	Index          whereHelperint64
	Key            whereHelperstring
	Value          whereHelperstring
	Secret         whereHelperbool
	Deployed       whereHelperbool
}{
	ID:             whereHelperint64{field: "\"environment_variable\".\"id\""},
	OrganizationID: whereHelperint64{field: "\"environment_variable\".\"organization_id\""},
	PipelineID:     whereHelperint64{field: "\"environment_variable\".\"pipeline_id\""},
	EnvironmentID:  whereHelperint64{field: "\"environment_variable\".\"environment_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"environment_variable\".\"created_at\""},
	CreatedByID:    whereHelperint64{field: "\"environment_variable\".\"created_by_id\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"environment_variable\".\"updated_at\""},
	UpdatedByID:    whereHelperint64{field: "\"environment_variable\".\"updated_by_id\""},
	Index:          whereHelperint64{field: "\"environment_variable\".\"index\""},
	Key:            whereHelperstring{field: "\"environment_variable\".\"key\""},
	Value:          whereHelperstring{field: "\"environment_variable\".\"value\""},
	Secret:         whereHelperbool{field: "\"environment_variable\".\"secret\""},
	Deployed:       whereHelperbool{field: "\"environment_variable\".\"deployed\""},
}

// EnvironmentVariableRels is where relationship names are stored.
var EnvironmentVariableRels = struct {
	CreatedBy    string
	Environment  string
	Organization string
	Pipeline     string
	UpdatedBy    string
}{
	CreatedBy:    "CreatedBy",
	Environment:  "Environment",
	Organization: "Organization",
	Pipeline:     "Pipeline",
	UpdatedBy:    "UpdatedBy",
}

// environmentVariableR is where relationships are stored.
type environmentVariableR struct {
	CreatedBy    *User
	Environment  *Environment
	Organization *Organization
	Pipeline     *Pipeline
	UpdatedBy    *User
}

// NewStruct creates a new relationship struct
func (*environmentVariableR) NewStruct() *environmentVariableR {
	return &environmentVariableR{}
}

// environmentVariableL is where Load methods for each relationship are stored.
type environmentVariableL struct{}

var (
	environmentVariableAllColumns            = []string{"id", "organization_id", "pipeline_id", "environment_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "index", "key", "value", "secret", "deployed"}
	environmentVariableColumnsWithoutDefault = []string{"organization_id", "pipeline_id", "environment_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "index", "key", "value", "secret", "deployed"}
	environmentVariableColumnsWithDefault    = []string{"id"}
	environmentVariablePrimaryKeyColumns     = []string{"id"}
)

type (
	// EnvironmentVariableSlice is an alias for a slice of pointers to EnvironmentVariable.
	// This should generally be used opposed to []EnvironmentVariable.
	EnvironmentVariableSlice []*EnvironmentVariable
	// EnvironmentVariableHook is the signature for custom EnvironmentVariable hook methods
	EnvironmentVariableHook func(context.Context, boil.ContextExecutor, *EnvironmentVariable) error

	environmentVariableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	environmentVariableType                 = reflect.TypeOf(&EnvironmentVariable{})
	environmentVariableMapping              = queries.MakeStructMapping(environmentVariableType)
	environmentVariablePrimaryKeyMapping, _ = queries.BindMapping(environmentVariableType, environmentVariableMapping, environmentVariablePrimaryKeyColumns)
	environmentVariableInsertCacheMut       sync.RWMutex
	environmentVariableInsertCache          = make(map[string]insertCache)
	environmentVariableUpdateCacheMut       sync.RWMutex
	environmentVariableUpdateCache          = make(map[string]updateCache)
	environmentVariableUpsertCacheMut       sync.RWMutex
	environmentVariableUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var environmentVariableBeforeInsertHooks []EnvironmentVariableHook
var environmentVariableBeforeUpdateHooks []EnvironmentVariableHook
var environmentVariableBeforeDeleteHooks []EnvironmentVariableHook
var environmentVariableBeforeUpsertHooks []EnvironmentVariableHook

var environmentVariableAfterInsertHooks []EnvironmentVariableHook
var environmentVariableAfterSelectHooks []EnvironmentVariableHook
var environmentVariableAfterUpdateHooks []EnvironmentVariableHook
var environmentVariableAfterDeleteHooks []EnvironmentVariableHook
var environmentVariableAfterUpsertHooks []EnvironmentVariableHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EnvironmentVariable) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EnvironmentVariable) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EnvironmentVariable) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EnvironmentVariable) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EnvironmentVariable) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EnvironmentVariable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EnvironmentVariable) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EnvironmentVariable) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EnvironmentVariable) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range environmentVariableAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEnvironmentVariableHook registers your hook function for all future operations.
func AddEnvironmentVariableHook(hookPoint boil.HookPoint, environmentVariableHook EnvironmentVariableHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		environmentVariableBeforeInsertHooks = append(environmentVariableBeforeInsertHooks, environmentVariableHook)
	case boil.BeforeUpdateHook:
		environmentVariableBeforeUpdateHooks = append(environmentVariableBeforeUpdateHooks, environmentVariableHook)
	case boil.BeforeDeleteHook:
		environmentVariableBeforeDeleteHooks = append(environmentVariableBeforeDeleteHooks, environmentVariableHook)
	case boil.BeforeUpsertHook:
		environmentVariableBeforeUpsertHooks = append(environmentVariableBeforeUpsertHooks, environmentVariableHook)
	case boil.AfterInsertHook:
		environmentVariableAfterInsertHooks = append(environmentVariableAfterInsertHooks, environmentVariableHook)
	case boil.AfterSelectHook:
		environmentVariableAfterSelectHooks = append(environmentVariableAfterSelectHooks, environmentVariableHook)
	case boil.AfterUpdateHook:
		environmentVariableAfterUpdateHooks = append(environmentVariableAfterUpdateHooks, environmentVariableHook)
	case boil.AfterDeleteHook:
		environmentVariableAfterDeleteHooks = append(environmentVariableAfterDeleteHooks, environmentVariableHook)
	case boil.AfterUpsertHook:
		environmentVariableAfterUpsertHooks = append(environmentVariableAfterUpsertHooks, environmentVariableHook)
	}
}

// One returns a single environmentVariable record from the query.
func (q environmentVariableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EnvironmentVariable, error) {
	o := &EnvironmentVariable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for environment_variable")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EnvironmentVariable records from the query.
func (q environmentVariableQuery) All(ctx context.Context, exec boil.ContextExecutor) (EnvironmentVariableSlice, error) {
	var o []*EnvironmentVariable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to EnvironmentVariable slice")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EnvironmentVariable records in the query.
func (q environmentVariableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count environment_variable rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q environmentVariableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if environment_variable exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *EnvironmentVariable) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Environment pointed to by the foreign key.
func (o *EnvironmentVariable) Environment(mods ...qm.QueryMod) environmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EnvironmentID),
	}

	queryMods = append(queryMods, mods...)

	query := Environments(queryMods...)
	queries.SetFrom(query.Query, "\"environment\"")

	return query
}

// Organization pointed to by the foreign key.
func (o *EnvironmentVariable) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// Pipeline pointed to by the foreign key.
func (o *EnvironmentVariable) Pipeline(mods ...qm.QueryMod) pipelineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PipelineID),
	}

	queryMods = append(queryMods, mods...)

	query := Pipelines(queryMods...)
	queries.SetFrom(query.Query, "\"pipeline\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *EnvironmentVariable) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (environmentVariableL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEnvironmentVariable interface{}, mods queries.Applicator) error {
	var slice []*EnvironmentVariable
	var object *EnvironmentVariable

	if singular {
		object = maybeEnvironmentVariable.(*EnvironmentVariable)
	} else {
		slice = *maybeEnvironmentVariable.(*[]*EnvironmentVariable)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &environmentVariableR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &environmentVariableR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByEnvironmentVariables = append(foreign.R.CreatedByEnvironmentVariables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByEnvironmentVariables = append(foreign.R.CreatedByEnvironmentVariables, local)
				break
			}
		}
	}

	return nil
}

// LoadEnvironment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (environmentVariableL) LoadEnvironment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEnvironmentVariable interface{}, mods queries.Applicator) error {
	var slice []*EnvironmentVariable
	var object *EnvironmentVariable

	if singular {
		object = maybeEnvironmentVariable.(*EnvironmentVariable)
	} else {
		slice = *maybeEnvironmentVariable.(*[]*EnvironmentVariable)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &environmentVariableR{}
		}
		args = append(args, object.EnvironmentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &environmentVariableR{}
			}

			for _, a := range args {
				if a == obj.EnvironmentID {
					continue Outer
				}
			}

			args = append(args, obj.EnvironmentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`environment`), qm.WhereIn(`environment.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Environment")
	}

	var resultSlice []*Environment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Environment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for environment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environment")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Environment = foreign
		if foreign.R == nil {
			foreign.R = &environmentR{}
		}
		foreign.R.EnvironmentVariables = append(foreign.R.EnvironmentVariables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EnvironmentID == foreign.ID {
				local.R.Environment = foreign
				if foreign.R == nil {
					foreign.R = &environmentR{}
				}
				foreign.R.EnvironmentVariables = append(foreign.R.EnvironmentVariables, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (environmentVariableL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEnvironmentVariable interface{}, mods queries.Applicator) error {
	var slice []*EnvironmentVariable
	var object *EnvironmentVariable

	if singular {
		object = maybeEnvironmentVariable.(*EnvironmentVariable)
	} else {
		slice = *maybeEnvironmentVariable.(*[]*EnvironmentVariable)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &environmentVariableR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &environmentVariableR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.EnvironmentVariables = append(foreign.R.EnvironmentVariables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.EnvironmentVariables = append(foreign.R.EnvironmentVariables, local)
				break
			}
		}
	}

	return nil
}

// LoadPipeline allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (environmentVariableL) LoadPipeline(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEnvironmentVariable interface{}, mods queries.Applicator) error {
	var slice []*EnvironmentVariable
	var object *EnvironmentVariable

	if singular {
		object = maybeEnvironmentVariable.(*EnvironmentVariable)
	} else {
		slice = *maybeEnvironmentVariable.(*[]*EnvironmentVariable)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &environmentVariableR{}
		}
		args = append(args, object.PipelineID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &environmentVariableR{}
			}

			for _, a := range args {
				if a == obj.PipelineID {
					continue Outer
				}
			}

			args = append(args, obj.PipelineID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pipeline`), qm.WhereIn(`pipeline.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pipeline")
	}

	var resultSlice []*Pipeline
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pipeline")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pipeline")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pipeline")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pipeline = foreign
		if foreign.R == nil {
			foreign.R = &pipelineR{}
		}
		foreign.R.EnvironmentVariables = append(foreign.R.EnvironmentVariables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PipelineID == foreign.ID {
				local.R.Pipeline = foreign
				if foreign.R == nil {
					foreign.R = &pipelineR{}
				}
				foreign.R.EnvironmentVariables = append(foreign.R.EnvironmentVariables, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (environmentVariableL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEnvironmentVariable interface{}, mods queries.Applicator) error {
	var slice []*EnvironmentVariable
	var object *EnvironmentVariable

	if singular {
		object = maybeEnvironmentVariable.(*EnvironmentVariable)
	} else {
		slice = *maybeEnvironmentVariable.(*[]*EnvironmentVariable)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &environmentVariableR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &environmentVariableR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByEnvironmentVariables = append(foreign.R.UpdatedByEnvironmentVariables, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByEnvironmentVariables = append(foreign.R.UpdatedByEnvironmentVariables, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the environmentVariable to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByEnvironmentVariables.
func (o *EnvironmentVariable) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"environment_variable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &environmentVariableR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByEnvironmentVariables: EnvironmentVariableSlice{o},
		}
	} else {
		related.R.CreatedByEnvironmentVariables = append(related.R.CreatedByEnvironmentVariables, o)
	}

	return nil
}

// SetEnvironment of the environmentVariable to the related item.
// Sets o.R.Environment to related.
// Adds o to related.R.EnvironmentVariables.
func (o *EnvironmentVariable) SetEnvironment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Environment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"environment_variable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"environment_id"}),
		strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EnvironmentID = related.ID
	if o.R == nil {
		o.R = &environmentVariableR{
			Environment: related,
		}
	} else {
		o.R.Environment = related
	}

	if related.R == nil {
		related.R = &environmentR{
			EnvironmentVariables: EnvironmentVariableSlice{o},
		}
	} else {
		related.R.EnvironmentVariables = append(related.R.EnvironmentVariables, o)
	}

	return nil
}

// SetOrganization of the environmentVariable to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.EnvironmentVariables.
func (o *EnvironmentVariable) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"environment_variable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &environmentVariableR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			EnvironmentVariables: EnvironmentVariableSlice{o},
		}
	} else {
		related.R.EnvironmentVariables = append(related.R.EnvironmentVariables, o)
	}

	return nil
}

// SetPipeline of the environmentVariable to the related item.
// Sets o.R.Pipeline to related.
// Adds o to related.R.EnvironmentVariables.
func (o *EnvironmentVariable) SetPipeline(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pipeline) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"environment_variable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pipeline_id"}),
		strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PipelineID = related.ID
	if o.R == nil {
		o.R = &environmentVariableR{
			Pipeline: related,
		}
	} else {
		o.R.Pipeline = related
	}

	if related.R == nil {
		related.R = &pipelineR{
			EnvironmentVariables: EnvironmentVariableSlice{o},
		}
	} else {
		related.R.EnvironmentVariables = append(related.R.EnvironmentVariables, o)
	}

	return nil
}

// SetUpdatedBy of the environmentVariable to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByEnvironmentVariables.
func (o *EnvironmentVariable) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"environment_variable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &environmentVariableR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByEnvironmentVariables: EnvironmentVariableSlice{o},
		}
	} else {
		related.R.UpdatedByEnvironmentVariables = append(related.R.UpdatedByEnvironmentVariables, o)
	}

	return nil
}

// EnvironmentVariables retrieves all the records using an executor.
func EnvironmentVariables(mods ...qm.QueryMod) environmentVariableQuery {
	mods = append(mods, qm.From("\"environment_variable\""))
	return environmentVariableQuery{NewQuery(mods...)}
}

// FindEnvironmentVariable retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEnvironmentVariable(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*EnvironmentVariable, error) {
	environmentVariableObj := &EnvironmentVariable{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"environment_variable\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, environmentVariableObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from environment_variable")
	}

	return environmentVariableObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EnvironmentVariable) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no environment_variable provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(environmentVariableColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	environmentVariableInsertCacheMut.RLock()
	cache, cached := environmentVariableInsertCache[key]
	environmentVariableInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			environmentVariableAllColumns,
			environmentVariableColumnsWithDefault,
			environmentVariableColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"environment_variable\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"environment_variable\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into environment_variable")
	}

	if !cached {
		environmentVariableInsertCacheMut.Lock()
		environmentVariableInsertCache[key] = cache
		environmentVariableInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EnvironmentVariable.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EnvironmentVariable) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	environmentVariableUpdateCacheMut.RLock()
	cache, cached := environmentVariableUpdateCache[key]
	environmentVariableUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			environmentVariableAllColumns,
			environmentVariablePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update environment_variable, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"environment_variable\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, environmentVariablePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, append(wl, environmentVariablePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update environment_variable row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for environment_variable")
	}

	if !cached {
		environmentVariableUpdateCacheMut.Lock()
		environmentVariableUpdateCache[key] = cache
		environmentVariableUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q environmentVariableQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for environment_variable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for environment_variable")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EnvironmentVariableSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), environmentVariablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"environment_variable\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, environmentVariablePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in environmentVariable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all environmentVariable")
	}
	return rowsAff, nil
}

// Delete deletes a single EnvironmentVariable record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EnvironmentVariable) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no EnvironmentVariable provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), environmentVariablePrimaryKeyMapping)
	sql := "DELETE FROM \"environment_variable\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from environment_variable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for environment_variable")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q environmentVariableQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no environmentVariableQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from environment_variable")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for environment_variable")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EnvironmentVariableSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(environmentVariableBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), environmentVariablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"environment_variable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, environmentVariablePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from environmentVariable slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for environment_variable")
	}

	if len(environmentVariableAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EnvironmentVariable) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEnvironmentVariable(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EnvironmentVariableSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EnvironmentVariableSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), environmentVariablePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"environment_variable\".* FROM \"environment_variable\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, environmentVariablePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in EnvironmentVariableSlice")
	}

	*o = slice

	return nil
}

// EnvironmentVariableExists checks if the EnvironmentVariable row exists.
func EnvironmentVariableExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"environment_variable\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if environment_variable exists")
	}

	return exists, nil
}

// EnvironmentVariable is an object representing the database table.
type EnvironmentVariableDTO struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID int64     `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	PipelineID     int64     `boil:"pipeline_id" json:"pipelineID" toml:"pipelineID" yaml:"pipelineID"`
	EnvironmentID  int64     `boil:"environment_id" json:"environmentID" toml:"environmentID" yaml:"environmentID"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Index          int64     `boil:"index" json:"index" toml:"index" yaml:"index"`
	Key            string    `boil:"key" json:"key" toml:"key" yaml:"key"`
	Value          string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	Secret         bool      `boil:"secret" json:"secret" toml:"secret" yaml:"secret"`
	Deployed       bool      `boil:"deployed" json:"deployed" toml:"deployed" yaml:"deployed"`
}

// DTO converts the EnvironmentVariable to a EnvironmentVariableDTO struct.
func (o EnvironmentVariable) DTO() *EnvironmentVariableDTO {
	return &EnvironmentVariableDTO{
		ID:             o.ID,
		OrganizationID: o.OrganizationID,
		PipelineID:     o.PipelineID,
		EnvironmentID:  o.EnvironmentID,
		CreatedAt:      o.CreatedAt,
		CreatedByID:    o.CreatedByID,
		UpdatedAt:      o.UpdatedAt,
		UpdatedByID:    o.UpdatedByID,
		Index:          o.Index,
		Key:            o.Key,
		Value:          o.Value,
		Secret:         o.Secret,
		Deployed:       o.Deployed,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EnvironmentVariable) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no environment_variable provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(environmentVariableColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	environmentVariableUpsertCacheMut.RLock()
	cache, cached := environmentVariableUpsertCache[key]
	environmentVariableUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			environmentVariableAllColumns,
			environmentVariableColumnsWithDefault,
			environmentVariableColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			environmentVariableAllColumns,
			environmentVariablePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert environment_variable, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(environmentVariablePrimaryKeyColumns))
			copy(conflict, environmentVariablePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"environment_variable\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(environmentVariableType, environmentVariableMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert environment_variable")
	}

	if !cached {
		environmentVariableUpsertCacheMut.Lock()
		environmentVariableUpsertCache[key] = cache
		environmentVariableUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
