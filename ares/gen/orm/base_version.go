// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BaseVersion is an object representing the database table.
type BaseVersion struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseID         int64     `boil:"base_id" json:"baseID" toml:"baseID" yaml:"baseID"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Version        string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	Description    string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Readme         string    `boil:"readme" json:"readme" toml:"readme" yaml:"readme"`
	DockerImageRef string    `boil:"docker_image_ref" json:"dockerImageRef" toml:"dockerImageRef" yaml:"dockerImageRef"`
	Entrypoint     string    `boil:"entrypoint" json:"entrypoint" toml:"entrypoint" yaml:"entrypoint"`
	Public         bool      `boil:"public" json:"public" toml:"public" yaml:"public"`

	R *baseVersionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L baseVersionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BaseVersionColumns = struct {
	ID             string
	BaseID         string
	CreatedAt      string
	CreatedByID    string
	UpdatedAt      string
	UpdatedByID    string
	Version        string
	Description    string
	Readme         string
	DockerImageRef string
	Entrypoint     string
	Public         string
}{
	ID:             "id",
	BaseID:         "base_id",
	CreatedAt:      "created_at",
	CreatedByID:    "created_by_id",
	UpdatedAt:      "updated_at",
	UpdatedByID:    "updated_by_id",
	Version:        "version",
	Description:    "description",
	Readme:         "readme",
	DockerImageRef: "docker_image_ref",
	Entrypoint:     "entrypoint",
	Public:         "public",
}

// Generated where

var BaseVersionWhere = struct {
	ID             whereHelperint64
	BaseID         whereHelperint64
	CreatedAt      whereHelpertime_Time
	CreatedByID    whereHelperint64
	UpdatedAt      whereHelpertime_Time
	UpdatedByID    whereHelperint64
	Version        whereHelperstring
	Description    whereHelperstring
	Readme         whereHelperstring
	DockerImageRef whereHelperstring
	Entrypoint     whereHelperstring
	Public         whereHelperbool
}{
	ID:             whereHelperint64{field: "\"base_version\".\"id\""},
	BaseID:         whereHelperint64{field: "\"base_version\".\"base_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"base_version\".\"created_at\""},
	CreatedByID:    whereHelperint64{field: "\"base_version\".\"created_by_id\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"base_version\".\"updated_at\""},
	UpdatedByID:    whereHelperint64{field: "\"base_version\".\"updated_by_id\""},
	Version:        whereHelperstring{field: "\"base_version\".\"version\""},
	Description:    whereHelperstring{field: "\"base_version\".\"description\""},
	Readme:         whereHelperstring{field: "\"base_version\".\"readme\""},
	DockerImageRef: whereHelperstring{field: "\"base_version\".\"docker_image_ref\""},
	Entrypoint:     whereHelperstring{field: "\"base_version\".\"entrypoint\""},
	Public:         whereHelperbool{field: "\"base_version\".\"public\""},
}

// BaseVersionRels is where relationship names are stored.
var BaseVersionRels = struct {
	Base                           string
	CreatedBy                      string
	UpdatedBy                      string
	ActionVersions                 string
	VersionBaseConfigurations      string
	VersionBaseDraftConfigurations string
	TriggerVersions                string
}{
	Base:                           "Base",
	CreatedBy:                      "CreatedBy",
	UpdatedBy:                      "UpdatedBy",
	ActionVersions:                 "ActionVersions",
	VersionBaseConfigurations:      "VersionBaseConfigurations",
	VersionBaseDraftConfigurations: "VersionBaseDraftConfigurations",
	TriggerVersions:                "TriggerVersions",
}

// baseVersionR is where relationships are stored.
type baseVersionR struct {
	Base                           *Base
	CreatedBy                      *User
	UpdatedBy                      *User
	ActionVersions                 ActionVersionSlice
	VersionBaseConfigurations      BaseConfigurationSlice
	VersionBaseDraftConfigurations BaseDraftConfigurationSlice
	TriggerVersions                TriggerVersionSlice
}

// NewStruct creates a new relationship struct
func (*baseVersionR) NewStruct() *baseVersionR {
	return &baseVersionR{}
}

// baseVersionL is where Load methods for each relationship are stored.
type baseVersionL struct{}

var (
	baseVersionAllColumns            = []string{"id", "base_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "version", "description", "readme", "docker_image_ref", "entrypoint", "public"}
	baseVersionColumnsWithoutDefault = []string{"base_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "version", "description", "readme", "docker_image_ref", "entrypoint"}
	baseVersionColumnsWithDefault    = []string{"id", "public"}
	baseVersionPrimaryKeyColumns     = []string{"id"}
)

type (
	// BaseVersionSlice is an alias for a slice of pointers to BaseVersion.
	// This should generally be used opposed to []BaseVersion.
	BaseVersionSlice []*BaseVersion
	// BaseVersionHook is the signature for custom BaseVersion hook methods
	BaseVersionHook func(context.Context, boil.ContextExecutor, *BaseVersion) error

	baseVersionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	baseVersionType                 = reflect.TypeOf(&BaseVersion{})
	baseVersionMapping              = queries.MakeStructMapping(baseVersionType)
	baseVersionPrimaryKeyMapping, _ = queries.BindMapping(baseVersionType, baseVersionMapping, baseVersionPrimaryKeyColumns)
	baseVersionInsertCacheMut       sync.RWMutex
	baseVersionInsertCache          = make(map[string]insertCache)
	baseVersionUpdateCacheMut       sync.RWMutex
	baseVersionUpdateCache          = make(map[string]updateCache)
	baseVersionUpsertCacheMut       sync.RWMutex
	baseVersionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var baseVersionBeforeInsertHooks []BaseVersionHook
var baseVersionBeforeUpdateHooks []BaseVersionHook
var baseVersionBeforeDeleteHooks []BaseVersionHook
var baseVersionBeforeUpsertHooks []BaseVersionHook

var baseVersionAfterInsertHooks []BaseVersionHook
var baseVersionAfterSelectHooks []BaseVersionHook
var baseVersionAfterUpdateHooks []BaseVersionHook
var baseVersionAfterDeleteHooks []BaseVersionHook
var baseVersionAfterUpsertHooks []BaseVersionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BaseVersion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BaseVersion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BaseVersion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BaseVersion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BaseVersion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BaseVersion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BaseVersion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BaseVersion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BaseVersion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseVersionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBaseVersionHook registers your hook function for all future operations.
func AddBaseVersionHook(hookPoint boil.HookPoint, baseVersionHook BaseVersionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		baseVersionBeforeInsertHooks = append(baseVersionBeforeInsertHooks, baseVersionHook)
	case boil.BeforeUpdateHook:
		baseVersionBeforeUpdateHooks = append(baseVersionBeforeUpdateHooks, baseVersionHook)
	case boil.BeforeDeleteHook:
		baseVersionBeforeDeleteHooks = append(baseVersionBeforeDeleteHooks, baseVersionHook)
	case boil.BeforeUpsertHook:
		baseVersionBeforeUpsertHooks = append(baseVersionBeforeUpsertHooks, baseVersionHook)
	case boil.AfterInsertHook:
		baseVersionAfterInsertHooks = append(baseVersionAfterInsertHooks, baseVersionHook)
	case boil.AfterSelectHook:
		baseVersionAfterSelectHooks = append(baseVersionAfterSelectHooks, baseVersionHook)
	case boil.AfterUpdateHook:
		baseVersionAfterUpdateHooks = append(baseVersionAfterUpdateHooks, baseVersionHook)
	case boil.AfterDeleteHook:
		baseVersionAfterDeleteHooks = append(baseVersionAfterDeleteHooks, baseVersionHook)
	case boil.AfterUpsertHook:
		baseVersionAfterUpsertHooks = append(baseVersionAfterUpsertHooks, baseVersionHook)
	}
}

// One returns a single baseVersion record from the query.
func (q baseVersionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BaseVersion, error) {
	o := &BaseVersion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for base_version")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BaseVersion records from the query.
func (q baseVersionQuery) All(ctx context.Context, exec boil.ContextExecutor) (BaseVersionSlice, error) {
	var o []*BaseVersion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to BaseVersion slice")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BaseVersion records in the query.
func (q baseVersionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count base_version rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q baseVersionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if base_version exists")
	}

	return count > 0, nil
}

// Base pointed to by the foreign key.
func (o *BaseVersion) Base(mods ...qm.QueryMod) baseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BaseID),
	}

	queryMods = append(queryMods, mods...)

	query := Bases(queryMods...)
	queries.SetFrom(query.Query, "\"base\"")

	return query
}

// CreatedBy pointed to by the foreign key.
func (o *BaseVersion) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *BaseVersion) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ActionVersions retrieves all the action_version's ActionVersions with an executor.
func (o *BaseVersion) ActionVersions(mods ...qm.QueryMod) actionVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"action_version_supported_bases\" on \"action_version\".\"id\" = \"action_version_supported_bases\".\"action_version_id\""),
		qm.Where("\"action_version_supported_bases\".\"supported_id\"=?", o.ID),
	)

	query := ActionVersions(queryMods...)
	queries.SetFrom(query.Query, "\"action_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action_version\".*"})
	}

	return query
}

// VersionBaseConfigurations retrieves all the base_configuration's BaseConfigurations with an executor via version_id column.
func (o *BaseVersion) VersionBaseConfigurations(mods ...qm.QueryMod) baseConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base_configuration\".\"version_id\"=?", o.ID),
	)

	query := BaseConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"base_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base_configuration\".*"})
	}

	return query
}

// VersionBaseDraftConfigurations retrieves all the base_draft_configuration's BaseDraftConfigurations with an executor via version_id column.
func (o *BaseVersion) VersionBaseDraftConfigurations(mods ...qm.QueryMod) baseDraftConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base_draft_configuration\".\"version_id\"=?", o.ID),
	)

	query := BaseDraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"base_draft_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base_draft_configuration\".*"})
	}

	return query
}

// TriggerVersions retrieves all the trigger_version's TriggerVersions with an executor.
func (o *BaseVersion) TriggerVersions(mods ...qm.QueryMod) triggerVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"trigger_version_supported_bases\" on \"trigger_version\".\"id\" = \"trigger_version_supported_bases\".\"trigger_version_id\""),
		qm.Where("\"trigger_version_supported_bases\".\"supported_id\"=?", o.ID),
	)

	query := TriggerVersions(queryMods...)
	queries.SetFrom(query.Query, "\"trigger_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trigger_version\".*"})
	}

	return query
}

// LoadBase allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseVersionL) LoadBase(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseVersion interface{}, mods queries.Applicator) error {
	var slice []*BaseVersion
	var object *BaseVersion

	if singular {
		object = maybeBaseVersion.(*BaseVersion)
	} else {
		slice = *maybeBaseVersion.(*[]*BaseVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseVersionR{}
		}
		args = append(args, object.BaseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseVersionR{}
			}

			for _, a := range args {
				if a == obj.BaseID {
					continue Outer
				}
			}

			args = append(args, obj.BaseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base`), qm.WhereIn(`base.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Base")
	}

	var resultSlice []*Base
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Base")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for base")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Base = foreign
		if foreign.R == nil {
			foreign.R = &baseR{}
		}
		foreign.R.BaseVersions = append(foreign.R.BaseVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BaseID == foreign.ID {
				local.R.Base = foreign
				if foreign.R == nil {
					foreign.R = &baseR{}
				}
				foreign.R.BaseVersions = append(foreign.R.BaseVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseVersionL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseVersion interface{}, mods queries.Applicator) error {
	var slice []*BaseVersion
	var object *BaseVersion

	if singular {
		object = maybeBaseVersion.(*BaseVersion)
	} else {
		slice = *maybeBaseVersion.(*[]*BaseVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseVersionR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseVersionR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByBaseVersions = append(foreign.R.CreatedByBaseVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByBaseVersions = append(foreign.R.CreatedByBaseVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseVersionL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseVersion interface{}, mods queries.Applicator) error {
	var slice []*BaseVersion
	var object *BaseVersion

	if singular {
		object = maybeBaseVersion.(*BaseVersion)
	} else {
		slice = *maybeBaseVersion.(*[]*BaseVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseVersionR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseVersionR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByBaseVersions = append(foreign.R.UpdatedByBaseVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByBaseVersions = append(foreign.R.UpdatedByBaseVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadActionVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (baseVersionL) LoadActionVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseVersion interface{}, mods queries.Applicator) error {
	var slice []*BaseVersion
	var object *BaseVersion

	if singular {
		object = maybeBaseVersion.(*BaseVersion)
	} else {
		slice = *maybeBaseVersion.(*[]*BaseVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseVersionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"action_version\".*, \"a\".\"supported_id\""),
		qm.From("\"action_version\""),
		qm.InnerJoin("\"action_version_supported_bases\" as \"a\" on \"action_version\".\"id\" = \"a\".\"action_version_id\""),
		qm.WhereIn("\"a\".\"supported_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action_version")
	}

	var resultSlice []*ActionVersion

	var localJoinCols []int64
	for results.Next() {
		one := new(ActionVersion)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.ActionID, &one.CreatedAt, &one.CreatedByID, &one.UpdatedAt, &one.UpdatedByID, &one.Version, &one.Public, &one.ExampleConfig, &one.Description, &one.Readme, &one.FileName, &one.FileID, &one.InputSchema, &one.OutputSchema, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for action_version")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice action_version")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_version")
	}

	if len(actionVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActionVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionVersionR{}
			}
			foreign.R.SupportedBaseVersions = append(foreign.R.SupportedBaseVersions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ActionVersions = append(local.R.ActionVersions, foreign)
				if foreign.R == nil {
					foreign.R = &actionVersionR{}
				}
				foreign.R.SupportedBaseVersions = append(foreign.R.SupportedBaseVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadVersionBaseConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (baseVersionL) LoadVersionBaseConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseVersion interface{}, mods queries.Applicator) error {
	var slice []*BaseVersion
	var object *BaseVersion

	if singular {
		object = maybeBaseVersion.(*BaseVersion)
	} else {
		slice = *maybeBaseVersion.(*[]*BaseVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseVersionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base_configuration`), qm.WhereIn(`base_configuration.version_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_configuration")
	}

	var resultSlice []*BaseConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_configuration")
	}

	if len(baseConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VersionBaseConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseConfigurationR{}
			}
			foreign.R.Version = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.VersionID) {
				local.R.VersionBaseConfigurations = append(local.R.VersionBaseConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &baseConfigurationR{}
				}
				foreign.R.Version = local
				break
			}
		}
	}

	return nil
}

// LoadVersionBaseDraftConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (baseVersionL) LoadVersionBaseDraftConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseVersion interface{}, mods queries.Applicator) error {
	var slice []*BaseVersion
	var object *BaseVersion

	if singular {
		object = maybeBaseVersion.(*BaseVersion)
	} else {
		slice = *maybeBaseVersion.(*[]*BaseVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseVersionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base_draft_configuration`), qm.WhereIn(`base_draft_configuration.version_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_draft_configuration")
	}

	var resultSlice []*BaseDraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base_draft_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_draft_configuration")
	}

	if len(baseDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VersionBaseDraftConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseDraftConfigurationR{}
			}
			foreign.R.Version = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.VersionID) {
				local.R.VersionBaseDraftConfigurations = append(local.R.VersionBaseDraftConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &baseDraftConfigurationR{}
				}
				foreign.R.Version = local
				break
			}
		}
	}

	return nil
}

// LoadTriggerVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (baseVersionL) LoadTriggerVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseVersion interface{}, mods queries.Applicator) error {
	var slice []*BaseVersion
	var object *BaseVersion

	if singular {
		object = maybeBaseVersion.(*BaseVersion)
	} else {
		slice = *maybeBaseVersion.(*[]*BaseVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseVersionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"trigger_version\".*, \"a\".\"supported_id\""),
		qm.From("\"trigger_version\""),
		qm.InnerJoin("\"trigger_version_supported_bases\" as \"a\" on \"trigger_version\".\"id\" = \"a\".\"trigger_version_id\""),
		qm.WhereIn("\"a\".\"supported_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trigger_version")
	}

	var resultSlice []*TriggerVersion

	var localJoinCols []int64
	for results.Next() {
		one := new(TriggerVersion)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.TriggerID, &one.CreatedAt, &one.CreatedByID, &one.UpdatedAt, &one.UpdatedByID, &one.Version, &one.Description, &one.Public, &one.ExampleConfig, &one.Readme, &one.FileName, &one.FileID, &one.InputSchema, &one.OutputSchema, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for trigger_version")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice trigger_version")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trigger_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_version")
	}

	if len(triggerVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TriggerVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &triggerVersionR{}
			}
			foreign.R.SupportedBaseVersions = append(foreign.R.SupportedBaseVersions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.TriggerVersions = append(local.R.TriggerVersions, foreign)
				if foreign.R == nil {
					foreign.R = &triggerVersionR{}
				}
				foreign.R.SupportedBaseVersions = append(foreign.R.SupportedBaseVersions, local)
				break
			}
		}
	}

	return nil
}

// SetBase of the baseVersion to the related item.
// Sets o.R.Base to related.
// Adds o to related.R.BaseVersions.
func (o *BaseVersion) SetBase(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Base) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"base_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"base_id"}),
		strmangle.WhereClause("\"", "\"", 2, baseVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BaseID = related.ID
	if o.R == nil {
		o.R = &baseVersionR{
			Base: related,
		}
	} else {
		o.R.Base = related
	}

	if related.R == nil {
		related.R = &baseR{
			BaseVersions: BaseVersionSlice{o},
		}
	} else {
		related.R.BaseVersions = append(related.R.BaseVersions, o)
	}

	return nil
}

// SetCreatedBy of the baseVersion to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByBaseVersions.
func (o *BaseVersion) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"base_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, baseVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &baseVersionR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByBaseVersions: BaseVersionSlice{o},
		}
	} else {
		related.R.CreatedByBaseVersions = append(related.R.CreatedByBaseVersions, o)
	}

	return nil
}

// SetUpdatedBy of the baseVersion to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByBaseVersions.
func (o *BaseVersion) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"base_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, baseVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &baseVersionR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByBaseVersions: BaseVersionSlice{o},
		}
	} else {
		related.R.UpdatedByBaseVersions = append(related.R.UpdatedByBaseVersions, o)
	}

	return nil
}

// AddActionVersions adds the given related objects to the existing relationships
// of the base_version, optionally inserting them as new records.
// Appends related to o.R.ActionVersions.
// Sets related.R.SupportedBaseVersions appropriately.
func (o *BaseVersion) AddActionVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"action_version_supported_bases\" (\"supported_id\", \"action_version_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &baseVersionR{
			ActionVersions: related,
		}
	} else {
		o.R.ActionVersions = append(o.R.ActionVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionVersionR{
				SupportedBaseVersions: BaseVersionSlice{o},
			}
		} else {
			rel.R.SupportedBaseVersions = append(rel.R.SupportedBaseVersions, o)
		}
	}
	return nil
}

// SetActionVersions removes all previously related items of the
// base_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SupportedBaseVersions's ActionVersions accordingly.
// Replaces o.R.ActionVersions with related.
// Sets related.R.SupportedBaseVersions's ActionVersions accordingly.
func (o *BaseVersion) SetActionVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionVersion) error {
	query := "delete from \"action_version_supported_bases\" where \"supported_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeActionVersionsFromSupportedBaseVersionsSlice(o, related)
	if o.R != nil {
		o.R.ActionVersions = nil
	}
	return o.AddActionVersions(ctx, exec, insert, related...)
}

// RemoveActionVersions relationships from objects passed in.
// Removes related items from R.ActionVersions (uses pointer comparison, removal does not keep order)
// Sets related.R.SupportedBaseVersions.
func (o *BaseVersion) RemoveActionVersions(ctx context.Context, exec boil.ContextExecutor, related ...*ActionVersion) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"action_version_supported_bases\" where \"supported_id\" = $1 and \"action_version_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeActionVersionsFromSupportedBaseVersionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ActionVersions {
			if rel != ri {
				continue
			}

			ln := len(o.R.ActionVersions)
			if ln > 1 && i < ln-1 {
				o.R.ActionVersions[i] = o.R.ActionVersions[ln-1]
			}
			o.R.ActionVersions = o.R.ActionVersions[:ln-1]
			break
		}
	}

	return nil
}

func removeActionVersionsFromSupportedBaseVersionsSlice(o *BaseVersion, related []*ActionVersion) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.SupportedBaseVersions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.SupportedBaseVersions)
			if ln > 1 && i < ln-1 {
				rel.R.SupportedBaseVersions[i] = rel.R.SupportedBaseVersions[ln-1]
			}
			rel.R.SupportedBaseVersions = rel.R.SupportedBaseVersions[:ln-1]
			break
		}
	}
}

// AddVersionBaseConfigurations adds the given related objects to the existing relationships
// of the base_version, optionally inserting them as new records.
// Appends related to o.R.VersionBaseConfigurations.
// Sets related.R.Version appropriately.
func (o *BaseVersion) AddVersionBaseConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VersionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
				strmangle.WhereClause("\"", "\"", 2, baseConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VersionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &baseVersionR{
			VersionBaseConfigurations: related,
		}
	} else {
		o.R.VersionBaseConfigurations = append(o.R.VersionBaseConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseConfigurationR{
				Version: o,
			}
		} else {
			rel.R.Version = o
		}
	}
	return nil
}

// SetVersionBaseConfigurations removes all previously related items of the
// base_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Version's VersionBaseConfigurations accordingly.
// Replaces o.R.VersionBaseConfigurations with related.
// Sets related.R.Version's VersionBaseConfigurations accordingly.
func (o *BaseVersion) SetVersionBaseConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseConfiguration) error {
	query := "update \"base_configuration\" set \"version_id\" = null where \"version_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VersionBaseConfigurations {
			queries.SetScanner(&rel.VersionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Version = nil
		}

		o.R.VersionBaseConfigurations = nil
	}
	return o.AddVersionBaseConfigurations(ctx, exec, insert, related...)
}

// RemoveVersionBaseConfigurations relationships from objects passed in.
// Removes related items from R.VersionBaseConfigurations (uses pointer comparison, removal does not keep order)
// Sets related.R.Version.
func (o *BaseVersion) RemoveVersionBaseConfigurations(ctx context.Context, exec boil.ContextExecutor, related ...*BaseConfiguration) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VersionID, nil)
		if rel.R != nil {
			rel.R.Version = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("version_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VersionBaseConfigurations {
			if rel != ri {
				continue
			}

			ln := len(o.R.VersionBaseConfigurations)
			if ln > 1 && i < ln-1 {
				o.R.VersionBaseConfigurations[i] = o.R.VersionBaseConfigurations[ln-1]
			}
			o.R.VersionBaseConfigurations = o.R.VersionBaseConfigurations[:ln-1]
			break
		}
	}

	return nil
}

// AddVersionBaseDraftConfigurations adds the given related objects to the existing relationships
// of the base_version, optionally inserting them as new records.
// Appends related to o.R.VersionBaseDraftConfigurations.
// Sets related.R.Version appropriately.
func (o *BaseVersion) AddVersionBaseDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseDraftConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.VersionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base_draft_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
				strmangle.WhereClause("\"", "\"", 2, baseDraftConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.VersionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &baseVersionR{
			VersionBaseDraftConfigurations: related,
		}
	} else {
		o.R.VersionBaseDraftConfigurations = append(o.R.VersionBaseDraftConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseDraftConfigurationR{
				Version: o,
			}
		} else {
			rel.R.Version = o
		}
	}
	return nil
}

// SetVersionBaseDraftConfigurations removes all previously related items of the
// base_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Version's VersionBaseDraftConfigurations accordingly.
// Replaces o.R.VersionBaseDraftConfigurations with related.
// Sets related.R.Version's VersionBaseDraftConfigurations accordingly.
func (o *BaseVersion) SetVersionBaseDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseDraftConfiguration) error {
	query := "update \"base_draft_configuration\" set \"version_id\" = null where \"version_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VersionBaseDraftConfigurations {
			queries.SetScanner(&rel.VersionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Version = nil
		}

		o.R.VersionBaseDraftConfigurations = nil
	}
	return o.AddVersionBaseDraftConfigurations(ctx, exec, insert, related...)
}

// RemoveVersionBaseDraftConfigurations relationships from objects passed in.
// Removes related items from R.VersionBaseDraftConfigurations (uses pointer comparison, removal does not keep order)
// Sets related.R.Version.
func (o *BaseVersion) RemoveVersionBaseDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, related ...*BaseDraftConfiguration) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.VersionID, nil)
		if rel.R != nil {
			rel.R.Version = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("version_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VersionBaseDraftConfigurations {
			if rel != ri {
				continue
			}

			ln := len(o.R.VersionBaseDraftConfigurations)
			if ln > 1 && i < ln-1 {
				o.R.VersionBaseDraftConfigurations[i] = o.R.VersionBaseDraftConfigurations[ln-1]
			}
			o.R.VersionBaseDraftConfigurations = o.R.VersionBaseDraftConfigurations[:ln-1]
			break
		}
	}

	return nil
}

// AddTriggerVersions adds the given related objects to the existing relationships
// of the base_version, optionally inserting them as new records.
// Appends related to o.R.TriggerVersions.
// Sets related.R.SupportedBaseVersions appropriately.
func (o *BaseVersion) AddTriggerVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"trigger_version_supported_bases\" (\"supported_id\", \"trigger_version_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &baseVersionR{
			TriggerVersions: related,
		}
	} else {
		o.R.TriggerVersions = append(o.R.TriggerVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &triggerVersionR{
				SupportedBaseVersions: BaseVersionSlice{o},
			}
		} else {
			rel.R.SupportedBaseVersions = append(rel.R.SupportedBaseVersions, o)
		}
	}
	return nil
}

// SetTriggerVersions removes all previously related items of the
// base_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SupportedBaseVersions's TriggerVersions accordingly.
// Replaces o.R.TriggerVersions with related.
// Sets related.R.SupportedBaseVersions's TriggerVersions accordingly.
func (o *BaseVersion) SetTriggerVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TriggerVersion) error {
	query := "delete from \"trigger_version_supported_bases\" where \"supported_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTriggerVersionsFromSupportedBaseVersionsSlice(o, related)
	if o.R != nil {
		o.R.TriggerVersions = nil
	}
	return o.AddTriggerVersions(ctx, exec, insert, related...)
}

// RemoveTriggerVersions relationships from objects passed in.
// Removes related items from R.TriggerVersions (uses pointer comparison, removal does not keep order)
// Sets related.R.SupportedBaseVersions.
func (o *BaseVersion) RemoveTriggerVersions(ctx context.Context, exec boil.ContextExecutor, related ...*TriggerVersion) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"trigger_version_supported_bases\" where \"supported_id\" = $1 and \"trigger_version_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTriggerVersionsFromSupportedBaseVersionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TriggerVersions {
			if rel != ri {
				continue
			}

			ln := len(o.R.TriggerVersions)
			if ln > 1 && i < ln-1 {
				o.R.TriggerVersions[i] = o.R.TriggerVersions[ln-1]
			}
			o.R.TriggerVersions = o.R.TriggerVersions[:ln-1]
			break
		}
	}

	return nil
}

func removeTriggerVersionsFromSupportedBaseVersionsSlice(o *BaseVersion, related []*TriggerVersion) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.SupportedBaseVersions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.SupportedBaseVersions)
			if ln > 1 && i < ln-1 {
				rel.R.SupportedBaseVersions[i] = rel.R.SupportedBaseVersions[ln-1]
			}
			rel.R.SupportedBaseVersions = rel.R.SupportedBaseVersions[:ln-1]
			break
		}
	}
}

// BaseVersions retrieves all the records using an executor.
func BaseVersions(mods ...qm.QueryMod) baseVersionQuery {
	mods = append(mods, qm.From("\"base_version\""))
	return baseVersionQuery{NewQuery(mods...)}
}

// FindBaseVersion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBaseVersion(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*BaseVersion, error) {
	baseVersionObj := &BaseVersion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"base_version\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, baseVersionObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from base_version")
	}

	return baseVersionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BaseVersion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no base_version provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseVersionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	baseVersionInsertCacheMut.RLock()
	cache, cached := baseVersionInsertCache[key]
	baseVersionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			baseVersionAllColumns,
			baseVersionColumnsWithDefault,
			baseVersionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(baseVersionType, baseVersionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(baseVersionType, baseVersionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"base_version\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"base_version\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into base_version")
	}

	if !cached {
		baseVersionInsertCacheMut.Lock()
		baseVersionInsertCache[key] = cache
		baseVersionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BaseVersion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BaseVersion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	baseVersionUpdateCacheMut.RLock()
	cache, cached := baseVersionUpdateCache[key]
	baseVersionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			baseVersionAllColumns,
			baseVersionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update base_version, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"base_version\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, baseVersionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(baseVersionType, baseVersionMapping, append(wl, baseVersionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update base_version row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for base_version")
	}

	if !cached {
		baseVersionUpdateCacheMut.Lock()
		baseVersionUpdateCache[key] = cache
		baseVersionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q baseVersionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for base_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for base_version")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BaseVersionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"base_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, baseVersionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in baseVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all baseVersion")
	}
	return rowsAff, nil
}

// Delete deletes a single BaseVersion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BaseVersion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no BaseVersion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), baseVersionPrimaryKeyMapping)
	sql := "DELETE FROM \"base_version\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from base_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for base_version")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q baseVersionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no baseVersionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from base_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for base_version")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BaseVersionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(baseVersionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"base_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, baseVersionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from baseVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for base_version")
	}

	if len(baseVersionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BaseVersion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBaseVersion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BaseVersionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BaseVersionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"base_version\".* FROM \"base_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, baseVersionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in BaseVersionSlice")
	}

	*o = slice

	return nil
}

// BaseVersionExists checks if the BaseVersion row exists.
func BaseVersionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"base_version\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if base_version exists")
	}

	return exists, nil
}

// BaseVersion is an object representing the database table.
type BaseVersionDTO struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	BaseID         int64     `boil:"base_id" json:"baseID" toml:"baseID" yaml:"baseID"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Version        string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	Description    string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Readme         string    `boil:"readme" json:"readme" toml:"readme" yaml:"readme"`
	DockerImageRef string    `boil:"docker_image_ref" json:"dockerImageRef" toml:"dockerImageRef" yaml:"dockerImageRef"`
	Entrypoint     string    `boil:"entrypoint" json:"entrypoint" toml:"entrypoint" yaml:"entrypoint"`
	Public         bool      `boil:"public" json:"public" toml:"public" yaml:"public"`
}

// DTO converts the BaseVersion to a BaseVersionDTO struct.
func (o BaseVersion) DTO() *BaseVersionDTO {
	return &BaseVersionDTO{
		ID:             o.ID,
		BaseID:         o.BaseID,
		CreatedAt:      o.CreatedAt,
		CreatedByID:    o.CreatedByID,
		UpdatedAt:      o.UpdatedAt,
		UpdatedByID:    o.UpdatedByID,
		Version:        o.Version,
		Description:    o.Description,
		Readme:         o.Readme,
		DockerImageRef: o.DockerImageRef,
		Entrypoint:     o.Entrypoint,
		Public:         o.Public,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BaseVersion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no base_version provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseVersionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	baseVersionUpsertCacheMut.RLock()
	cache, cached := baseVersionUpsertCache[key]
	baseVersionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			baseVersionAllColumns,
			baseVersionColumnsWithDefault,
			baseVersionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			baseVersionAllColumns,
			baseVersionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert base_version, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(baseVersionPrimaryKeyColumns))
			copy(conflict, baseVersionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"base_version\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(baseVersionType, baseVersionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(baseVersionType, baseVersionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert base_version")
	}

	if !cached {
		baseVersionUpsertCacheMut.Lock()
		baseVersionUpsertCache[key] = cache
		baseVersionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
