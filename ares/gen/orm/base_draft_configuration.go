// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BaseDraftConfiguration is an object representing the database table.
type BaseDraftConfiguration struct {
	ID                   int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DraftConfigurationID int64      `boil:"draft_configuration_id" json:"draftConfigurationID" toml:"draftConfigurationID" yaml:"draftConfigurationID"`
	VersionID            null.Int64 `boil:"version_id" json:"versionID,omitempty" toml:"versionID" yaml:"versionID,omitempty"`
	Config               string     `boil:"config" json:"config" toml:"config" yaml:"config"`

	R *baseDraftConfigurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L baseDraftConfigurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BaseDraftConfigurationColumns = struct {
	ID                   string
	DraftConfigurationID string
	VersionID            string
	Config               string
}{
	ID:                   "id",
	DraftConfigurationID: "draft_configuration_id",
	VersionID:            "version_id",
	Config:               "config",
}

// Generated where

var BaseDraftConfigurationWhere = struct {
	ID                   whereHelperint64
	DraftConfigurationID whereHelperint64
	VersionID            whereHelpernull_Int64
	Config               whereHelperstring
}{
	ID:                   whereHelperint64{field: "\"base_draft_configuration\".\"id\""},
	DraftConfigurationID: whereHelperint64{field: "\"base_draft_configuration\".\"draft_configuration_id\""},
	VersionID:            whereHelpernull_Int64{field: "\"base_draft_configuration\".\"version_id\""},
	Config:               whereHelperstring{field: "\"base_draft_configuration\".\"config\""},
}

// BaseDraftConfigurationRels is where relationship names are stored.
var BaseDraftConfigurationRels = struct {
	DraftConfiguration string
	Version            string
}{
	DraftConfiguration: "DraftConfiguration",
	Version:            "Version",
}

// baseDraftConfigurationR is where relationships are stored.
type baseDraftConfigurationR struct {
	DraftConfiguration *DraftConfiguration
	Version            *BaseVersion
}

// NewStruct creates a new relationship struct
func (*baseDraftConfigurationR) NewStruct() *baseDraftConfigurationR {
	return &baseDraftConfigurationR{}
}

// baseDraftConfigurationL is where Load methods for each relationship are stored.
type baseDraftConfigurationL struct{}

var (
	baseDraftConfigurationAllColumns            = []string{"id", "draft_configuration_id", "version_id", "config"}
	baseDraftConfigurationColumnsWithoutDefault = []string{"draft_configuration_id", "version_id", "config"}
	baseDraftConfigurationColumnsWithDefault    = []string{"id"}
	baseDraftConfigurationPrimaryKeyColumns     = []string{"id"}
)

type (
	// BaseDraftConfigurationSlice is an alias for a slice of pointers to BaseDraftConfiguration.
	// This should generally be used opposed to []BaseDraftConfiguration.
	BaseDraftConfigurationSlice []*BaseDraftConfiguration
	// BaseDraftConfigurationHook is the signature for custom BaseDraftConfiguration hook methods
	BaseDraftConfigurationHook func(context.Context, boil.ContextExecutor, *BaseDraftConfiguration) error

	baseDraftConfigurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	baseDraftConfigurationType                 = reflect.TypeOf(&BaseDraftConfiguration{})
	baseDraftConfigurationMapping              = queries.MakeStructMapping(baseDraftConfigurationType)
	baseDraftConfigurationPrimaryKeyMapping, _ = queries.BindMapping(baseDraftConfigurationType, baseDraftConfigurationMapping, baseDraftConfigurationPrimaryKeyColumns)
	baseDraftConfigurationInsertCacheMut       sync.RWMutex
	baseDraftConfigurationInsertCache          = make(map[string]insertCache)
	baseDraftConfigurationUpdateCacheMut       sync.RWMutex
	baseDraftConfigurationUpdateCache          = make(map[string]updateCache)
	baseDraftConfigurationUpsertCacheMut       sync.RWMutex
	baseDraftConfigurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var baseDraftConfigurationBeforeInsertHooks []BaseDraftConfigurationHook
var baseDraftConfigurationBeforeUpdateHooks []BaseDraftConfigurationHook
var baseDraftConfigurationBeforeDeleteHooks []BaseDraftConfigurationHook
var baseDraftConfigurationBeforeUpsertHooks []BaseDraftConfigurationHook

var baseDraftConfigurationAfterInsertHooks []BaseDraftConfigurationHook
var baseDraftConfigurationAfterSelectHooks []BaseDraftConfigurationHook
var baseDraftConfigurationAfterUpdateHooks []BaseDraftConfigurationHook
var baseDraftConfigurationAfterDeleteHooks []BaseDraftConfigurationHook
var baseDraftConfigurationAfterUpsertHooks []BaseDraftConfigurationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BaseDraftConfiguration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BaseDraftConfiguration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BaseDraftConfiguration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BaseDraftConfiguration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BaseDraftConfiguration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BaseDraftConfiguration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BaseDraftConfiguration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BaseDraftConfiguration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BaseDraftConfiguration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseDraftConfigurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBaseDraftConfigurationHook registers your hook function for all future operations.
func AddBaseDraftConfigurationHook(hookPoint boil.HookPoint, baseDraftConfigurationHook BaseDraftConfigurationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		baseDraftConfigurationBeforeInsertHooks = append(baseDraftConfigurationBeforeInsertHooks, baseDraftConfigurationHook)
	case boil.BeforeUpdateHook:
		baseDraftConfigurationBeforeUpdateHooks = append(baseDraftConfigurationBeforeUpdateHooks, baseDraftConfigurationHook)
	case boil.BeforeDeleteHook:
		baseDraftConfigurationBeforeDeleteHooks = append(baseDraftConfigurationBeforeDeleteHooks, baseDraftConfigurationHook)
	case boil.BeforeUpsertHook:
		baseDraftConfigurationBeforeUpsertHooks = append(baseDraftConfigurationBeforeUpsertHooks, baseDraftConfigurationHook)
	case boil.AfterInsertHook:
		baseDraftConfigurationAfterInsertHooks = append(baseDraftConfigurationAfterInsertHooks, baseDraftConfigurationHook)
	case boil.AfterSelectHook:
		baseDraftConfigurationAfterSelectHooks = append(baseDraftConfigurationAfterSelectHooks, baseDraftConfigurationHook)
	case boil.AfterUpdateHook:
		baseDraftConfigurationAfterUpdateHooks = append(baseDraftConfigurationAfterUpdateHooks, baseDraftConfigurationHook)
	case boil.AfterDeleteHook:
		baseDraftConfigurationAfterDeleteHooks = append(baseDraftConfigurationAfterDeleteHooks, baseDraftConfigurationHook)
	case boil.AfterUpsertHook:
		baseDraftConfigurationAfterUpsertHooks = append(baseDraftConfigurationAfterUpsertHooks, baseDraftConfigurationHook)
	}
}

// One returns a single baseDraftConfiguration record from the query.
func (q baseDraftConfigurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BaseDraftConfiguration, error) {
	o := &BaseDraftConfiguration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for base_draft_configuration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BaseDraftConfiguration records from the query.
func (q baseDraftConfigurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (BaseDraftConfigurationSlice, error) {
	var o []*BaseDraftConfiguration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to BaseDraftConfiguration slice")
	}

	if len(baseDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BaseDraftConfiguration records in the query.
func (q baseDraftConfigurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count base_draft_configuration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q baseDraftConfigurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if base_draft_configuration exists")
	}

	return count > 0, nil
}

// DraftConfiguration pointed to by the foreign key.
func (o *BaseDraftConfiguration) DraftConfiguration(mods ...qm.QueryMod) draftConfigurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DraftConfigurationID),
	}

	queryMods = append(queryMods, mods...)

	query := DraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"draft_configuration\"")

	return query
}

// Version pointed to by the foreign key.
func (o *BaseDraftConfiguration) Version(mods ...qm.QueryMod) baseVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VersionID),
	}

	queryMods = append(queryMods, mods...)

	query := BaseVersions(queryMods...)
	queries.SetFrom(query.Query, "\"base_version\"")

	return query
}

// LoadDraftConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseDraftConfigurationL) LoadDraftConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*BaseDraftConfiguration
	var object *BaseDraftConfiguration

	if singular {
		object = maybeBaseDraftConfiguration.(*BaseDraftConfiguration)
	} else {
		slice = *maybeBaseDraftConfiguration.(*[]*BaseDraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseDraftConfigurationR{}
		}
		args = append(args, object.DraftConfigurationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseDraftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.DraftConfigurationID {
					continue Outer
				}
			}

			args = append(args, obj.DraftConfigurationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`draft_configuration`), qm.WhereIn(`draft_configuration.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DraftConfiguration")
	}

	var resultSlice []*DraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DraftConfiguration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for draft_configuration")
	}

	if len(baseDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DraftConfiguration = foreign
		if foreign.R == nil {
			foreign.R = &draftConfigurationR{}
		}
		foreign.R.BaseDraftConfiguration = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DraftConfigurationID == foreign.ID {
				local.R.DraftConfiguration = foreign
				if foreign.R == nil {
					foreign.R = &draftConfigurationR{}
				}
				foreign.R.BaseDraftConfiguration = local
				break
			}
		}
	}

	return nil
}

// LoadVersion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseDraftConfigurationL) LoadVersion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBaseDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*BaseDraftConfiguration
	var object *BaseDraftConfiguration

	if singular {
		object = maybeBaseDraftConfiguration.(*BaseDraftConfiguration)
	} else {
		slice = *maybeBaseDraftConfiguration.(*[]*BaseDraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseDraftConfigurationR{}
		}
		if !queries.IsNil(object.VersionID) {
			args = append(args, object.VersionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseDraftConfigurationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VersionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VersionID) {
				args = append(args, obj.VersionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base_version`), qm.WhereIn(`base_version.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BaseVersion")
	}

	var resultSlice []*BaseVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BaseVersion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for base_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_version")
	}

	if len(baseDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Version = foreign
		if foreign.R == nil {
			foreign.R = &baseVersionR{}
		}
		foreign.R.VersionBaseDraftConfigurations = append(foreign.R.VersionBaseDraftConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VersionID, foreign.ID) {
				local.R.Version = foreign
				if foreign.R == nil {
					foreign.R = &baseVersionR{}
				}
				foreign.R.VersionBaseDraftConfigurations = append(foreign.R.VersionBaseDraftConfigurations, local)
				break
			}
		}
	}

	return nil
}

// SetDraftConfiguration of the baseDraftConfiguration to the related item.
// Sets o.R.DraftConfiguration to related.
// Adds o to related.R.BaseDraftConfiguration.
func (o *BaseDraftConfiguration) SetDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DraftConfiguration) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"base_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"draft_configuration_id"}),
		strmangle.WhereClause("\"", "\"", 2, baseDraftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DraftConfigurationID = related.ID
	if o.R == nil {
		o.R = &baseDraftConfigurationR{
			DraftConfiguration: related,
		}
	} else {
		o.R.DraftConfiguration = related
	}

	if related.R == nil {
		related.R = &draftConfigurationR{
			BaseDraftConfiguration: o,
		}
	} else {
		related.R.BaseDraftConfiguration = o
	}

	return nil
}

// SetVersion of the baseDraftConfiguration to the related item.
// Sets o.R.Version to related.
// Adds o to related.R.VersionBaseDraftConfigurations.
func (o *BaseDraftConfiguration) SetVersion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BaseVersion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"base_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
		strmangle.WhereClause("\"", "\"", 2, baseDraftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VersionID, related.ID)
	if o.R == nil {
		o.R = &baseDraftConfigurationR{
			Version: related,
		}
	} else {
		o.R.Version = related
	}

	if related.R == nil {
		related.R = &baseVersionR{
			VersionBaseDraftConfigurations: BaseDraftConfigurationSlice{o},
		}
	} else {
		related.R.VersionBaseDraftConfigurations = append(related.R.VersionBaseDraftConfigurations, o)
	}

	return nil
}

// RemoveVersion relationship.
// Sets o.R.Version to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BaseDraftConfiguration) RemoveVersion(ctx context.Context, exec boil.ContextExecutor, related *BaseVersion) error {
	var err error

	queries.SetScanner(&o.VersionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("version_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Version = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VersionBaseDraftConfigurations {
		if queries.Equal(o.VersionID, ri.VersionID) {
			continue
		}

		ln := len(related.R.VersionBaseDraftConfigurations)
		if ln > 1 && i < ln-1 {
			related.R.VersionBaseDraftConfigurations[i] = related.R.VersionBaseDraftConfigurations[ln-1]
		}
		related.R.VersionBaseDraftConfigurations = related.R.VersionBaseDraftConfigurations[:ln-1]
		break
	}
	return nil
}

// BaseDraftConfigurations retrieves all the records using an executor.
func BaseDraftConfigurations(mods ...qm.QueryMod) baseDraftConfigurationQuery {
	mods = append(mods, qm.From("\"base_draft_configuration\""))
	return baseDraftConfigurationQuery{NewQuery(mods...)}
}

// FindBaseDraftConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBaseDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*BaseDraftConfiguration, error) {
	baseDraftConfigurationObj := &BaseDraftConfiguration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"base_draft_configuration\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, baseDraftConfigurationObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from base_draft_configuration")
	}

	return baseDraftConfigurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BaseDraftConfiguration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no base_draft_configuration provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseDraftConfigurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	baseDraftConfigurationInsertCacheMut.RLock()
	cache, cached := baseDraftConfigurationInsertCache[key]
	baseDraftConfigurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			baseDraftConfigurationAllColumns,
			baseDraftConfigurationColumnsWithDefault,
			baseDraftConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(baseDraftConfigurationType, baseDraftConfigurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(baseDraftConfigurationType, baseDraftConfigurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"base_draft_configuration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"base_draft_configuration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into base_draft_configuration")
	}

	if !cached {
		baseDraftConfigurationInsertCacheMut.Lock()
		baseDraftConfigurationInsertCache[key] = cache
		baseDraftConfigurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BaseDraftConfiguration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BaseDraftConfiguration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	baseDraftConfigurationUpdateCacheMut.RLock()
	cache, cached := baseDraftConfigurationUpdateCache[key]
	baseDraftConfigurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			baseDraftConfigurationAllColumns,
			baseDraftConfigurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update base_draft_configuration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"base_draft_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, baseDraftConfigurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(baseDraftConfigurationType, baseDraftConfigurationMapping, append(wl, baseDraftConfigurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update base_draft_configuration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for base_draft_configuration")
	}

	if !cached {
		baseDraftConfigurationUpdateCacheMut.Lock()
		baseDraftConfigurationUpdateCache[key] = cache
		baseDraftConfigurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q baseDraftConfigurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for base_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for base_draft_configuration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BaseDraftConfigurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"base_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, baseDraftConfigurationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in baseDraftConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all baseDraftConfiguration")
	}
	return rowsAff, nil
}

// Delete deletes a single BaseDraftConfiguration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BaseDraftConfiguration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no BaseDraftConfiguration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), baseDraftConfigurationPrimaryKeyMapping)
	sql := "DELETE FROM \"base_draft_configuration\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from base_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for base_draft_configuration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q baseDraftConfigurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no baseDraftConfigurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from base_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for base_draft_configuration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BaseDraftConfigurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(baseDraftConfigurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"base_draft_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, baseDraftConfigurationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from baseDraftConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for base_draft_configuration")
	}

	if len(baseDraftConfigurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BaseDraftConfiguration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBaseDraftConfiguration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BaseDraftConfigurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BaseDraftConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), baseDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"base_draft_configuration\".* FROM \"base_draft_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, baseDraftConfigurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in BaseDraftConfigurationSlice")
	}

	*o = slice

	return nil
}

// BaseDraftConfigurationExists checks if the BaseDraftConfiguration row exists.
func BaseDraftConfigurationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"base_draft_configuration\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if base_draft_configuration exists")
	}

	return exists, nil
}

// BaseDraftConfiguration is an object representing the database table.
type BaseDraftConfigurationDTO struct {
	ID                   int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DraftConfigurationID int64      `boil:"draft_configuration_id" json:"draftConfigurationID" toml:"draftConfigurationID" yaml:"draftConfigurationID"`
	VersionID            null.Int64 `boil:"version_id" json:"versionID,omitempty" toml:"versionID" yaml:"versionID,omitempty"`
	Config               string     `boil:"config" json:"config" toml:"config" yaml:"config"`
}

// DTO converts the BaseDraftConfiguration to a BaseDraftConfigurationDTO struct.
func (o BaseDraftConfiguration) DTO() *BaseDraftConfigurationDTO {
	return &BaseDraftConfigurationDTO{
		ID:                   o.ID,
		DraftConfigurationID: o.DraftConfigurationID,
		VersionID:            o.VersionID,
		Config:               o.Config,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BaseDraftConfiguration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no base_draft_configuration provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseDraftConfigurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	baseDraftConfigurationUpsertCacheMut.RLock()
	cache, cached := baseDraftConfigurationUpsertCache[key]
	baseDraftConfigurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			baseDraftConfigurationAllColumns,
			baseDraftConfigurationColumnsWithDefault,
			baseDraftConfigurationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			baseDraftConfigurationAllColumns,
			baseDraftConfigurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert base_draft_configuration, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(baseDraftConfigurationPrimaryKeyColumns))
			copy(conflict, baseDraftConfigurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"base_draft_configuration\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(baseDraftConfigurationType, baseDraftConfigurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(baseDraftConfigurationType, baseDraftConfigurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert base_draft_configuration")
	}

	if !cached {
		baseDraftConfigurationUpsertCacheMut.Lock()
		baseDraftConfigurationUpsertCache[key] = cache
		baseDraftConfigurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
