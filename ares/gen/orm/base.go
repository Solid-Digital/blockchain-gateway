// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Base is an object representing the database table.
type Base struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeveloperID int64     `boil:"developer_id" json:"developerID" toml:"developerID" yaml:"developerID"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	DisplayName string    `boil:"display_name" json:"displayName" toml:"displayName" yaml:"displayName"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Public      bool      `boil:"public" json:"public" toml:"public" yaml:"public"`

	R *baseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L baseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BaseColumns = struct {
	ID          string
	DeveloperID string
	CreatedAt   string
	CreatedByID string
	UpdatedAt   string
	UpdatedByID string
	Name        string
	DisplayName string
	Description string
	Public      string
}{
	ID:          "id",
	DeveloperID: "developer_id",
	CreatedAt:   "created_at",
	CreatedByID: "created_by_id",
	UpdatedAt:   "updated_at",
	UpdatedByID: "updated_by_id",
	Name:        "name",
	DisplayName: "display_name",
	Description: "description",
	Public:      "public",
}

// Generated where

var BaseWhere = struct {
	ID          whereHelperint64
	DeveloperID whereHelperint64
	CreatedAt   whereHelpertime_Time
	CreatedByID whereHelperint64
	UpdatedAt   whereHelpertime_Time
	UpdatedByID whereHelperint64
	Name        whereHelperstring
	DisplayName whereHelperstring
	Description whereHelperstring
	Public      whereHelperbool
}{
	ID:          whereHelperint64{field: "\"base\".\"id\""},
	DeveloperID: whereHelperint64{field: "\"base\".\"developer_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"base\".\"created_at\""},
	CreatedByID: whereHelperint64{field: "\"base\".\"created_by_id\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"base\".\"updated_at\""},
	UpdatedByID: whereHelperint64{field: "\"base\".\"updated_by_id\""},
	Name:        whereHelperstring{field: "\"base\".\"name\""},
	DisplayName: whereHelperstring{field: "\"base\".\"display_name\""},
	Description: whereHelperstring{field: "\"base\".\"description\""},
	Public:      whereHelperbool{field: "\"base\".\"public\""},
}

// BaseRels is where relationship names are stored.
var BaseRels = struct {
	CreatedBy    string
	Developer    string
	UpdatedBy    string
	BaseVersions string
}{
	CreatedBy:    "CreatedBy",
	Developer:    "Developer",
	UpdatedBy:    "UpdatedBy",
	BaseVersions: "BaseVersions",
}

// baseR is where relationships are stored.
type baseR struct {
	CreatedBy    *User
	Developer    *Organization
	UpdatedBy    *User
	BaseVersions BaseVersionSlice
}

// NewStruct creates a new relationship struct
func (*baseR) NewStruct() *baseR {
	return &baseR{}
}

// baseL is where Load methods for each relationship are stored.
type baseL struct{}

var (
	baseAllColumns            = []string{"id", "developer_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "name", "display_name", "description", "public"}
	baseColumnsWithoutDefault = []string{"developer_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "name", "display_name", "description"}
	baseColumnsWithDefault    = []string{"id", "public"}
	basePrimaryKeyColumns     = []string{"id"}
)

type (
	// BaseSlice is an alias for a slice of pointers to Base.
	// This should generally be used opposed to []Base.
	BaseSlice []*Base
	// BaseHook is the signature for custom Base hook methods
	BaseHook func(context.Context, boil.ContextExecutor, *Base) error

	baseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	baseType                 = reflect.TypeOf(&Base{})
	baseMapping              = queries.MakeStructMapping(baseType)
	basePrimaryKeyMapping, _ = queries.BindMapping(baseType, baseMapping, basePrimaryKeyColumns)
	baseInsertCacheMut       sync.RWMutex
	baseInsertCache          = make(map[string]insertCache)
	baseUpdateCacheMut       sync.RWMutex
	baseUpdateCache          = make(map[string]updateCache)
	baseUpsertCacheMut       sync.RWMutex
	baseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var baseBeforeInsertHooks []BaseHook
var baseBeforeUpdateHooks []BaseHook
var baseBeforeDeleteHooks []BaseHook
var baseBeforeUpsertHooks []BaseHook

var baseAfterInsertHooks []BaseHook
var baseAfterSelectHooks []BaseHook
var baseAfterUpdateHooks []BaseHook
var baseAfterDeleteHooks []BaseHook
var baseAfterUpsertHooks []BaseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Base) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Base) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Base) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Base) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Base) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Base) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Base) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Base) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Base) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range baseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBaseHook registers your hook function for all future operations.
func AddBaseHook(hookPoint boil.HookPoint, baseHook BaseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		baseBeforeInsertHooks = append(baseBeforeInsertHooks, baseHook)
	case boil.BeforeUpdateHook:
		baseBeforeUpdateHooks = append(baseBeforeUpdateHooks, baseHook)
	case boil.BeforeDeleteHook:
		baseBeforeDeleteHooks = append(baseBeforeDeleteHooks, baseHook)
	case boil.BeforeUpsertHook:
		baseBeforeUpsertHooks = append(baseBeforeUpsertHooks, baseHook)
	case boil.AfterInsertHook:
		baseAfterInsertHooks = append(baseAfterInsertHooks, baseHook)
	case boil.AfterSelectHook:
		baseAfterSelectHooks = append(baseAfterSelectHooks, baseHook)
	case boil.AfterUpdateHook:
		baseAfterUpdateHooks = append(baseAfterUpdateHooks, baseHook)
	case boil.AfterDeleteHook:
		baseAfterDeleteHooks = append(baseAfterDeleteHooks, baseHook)
	case boil.AfterUpsertHook:
		baseAfterUpsertHooks = append(baseAfterUpsertHooks, baseHook)
	}
}

// One returns a single base record from the query.
func (q baseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Base, error) {
	o := &Base{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for base")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Base records from the query.
func (q baseQuery) All(ctx context.Context, exec boil.ContextExecutor) (BaseSlice, error) {
	var o []*Base

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Base slice")
	}

	if len(baseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Base records in the query.
func (q baseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count base rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q baseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if base exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *Base) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Developer pointed to by the foreign key.
func (o *Base) Developer(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeveloperID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *Base) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// BaseVersions retrieves all the base_version's BaseVersions with an executor.
func (o *Base) BaseVersions(mods ...qm.QueryMod) baseVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"base_version\".\"base_id\"=?", o.ID),
	)

	query := BaseVersions(queryMods...)
	queries.SetFrom(query.Query, "\"base_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base_version\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBase interface{}, mods queries.Applicator) error {
	var slice []*Base
	var object *Base

	if singular {
		object = maybeBase.(*Base)
	} else {
		slice = *maybeBase.(*[]*Base)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(baseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByBases = append(foreign.R.CreatedByBases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByBases = append(foreign.R.CreatedByBases, local)
				break
			}
		}
	}

	return nil
}

// LoadDeveloper allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseL) LoadDeveloper(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBase interface{}, mods queries.Applicator) error {
	var slice []*Base
	var object *Base

	if singular {
		object = maybeBase.(*Base)
	} else {
		slice = *maybeBase.(*[]*Base)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseR{}
		}
		args = append(args, object.DeveloperID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseR{}
			}

			for _, a := range args {
				if a == obj.DeveloperID {
					continue Outer
				}
			}

			args = append(args, obj.DeveloperID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(baseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Developer = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.DeveloperBases = append(foreign.R.DeveloperBases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeveloperID == foreign.ID {
				local.R.Developer = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.DeveloperBases = append(foreign.R.DeveloperBases, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (baseL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBase interface{}, mods queries.Applicator) error {
	var slice []*Base
	var object *Base

	if singular {
		object = maybeBase.(*Base)
	} else {
		slice = *maybeBase.(*[]*Base)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(baseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByBases = append(foreign.R.UpdatedByBases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByBases = append(foreign.R.UpdatedByBases, local)
				break
			}
		}
	}

	return nil
}

// LoadBaseVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (baseL) LoadBaseVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBase interface{}, mods queries.Applicator) error {
	var slice []*Base
	var object *Base

	if singular {
		object = maybeBase.(*Base)
	} else {
		slice = *maybeBase.(*[]*Base)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &baseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &baseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base_version`), qm.WhereIn(`base_version.base_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_version")
	}

	var resultSlice []*BaseVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice base_version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_version")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BaseVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseVersionR{}
			}
			foreign.R.Base = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BaseID {
				local.R.BaseVersions = append(local.R.BaseVersions, foreign)
				if foreign.R == nil {
					foreign.R = &baseVersionR{}
				}
				foreign.R.Base = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the base to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByBases.
func (o *Base) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"base\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, basePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &baseR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByBases: BaseSlice{o},
		}
	} else {
		related.R.CreatedByBases = append(related.R.CreatedByBases, o)
	}

	return nil
}

// SetDeveloper of the base to the related item.
// Sets o.R.Developer to related.
// Adds o to related.R.DeveloperBases.
func (o *Base) SetDeveloper(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"base\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"developer_id"}),
		strmangle.WhereClause("\"", "\"", 2, basePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeveloperID = related.ID
	if o.R == nil {
		o.R = &baseR{
			Developer: related,
		}
	} else {
		o.R.Developer = related
	}

	if related.R == nil {
		related.R = &organizationR{
			DeveloperBases: BaseSlice{o},
		}
	} else {
		related.R.DeveloperBases = append(related.R.DeveloperBases, o)
	}

	return nil
}

// SetUpdatedBy of the base to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByBases.
func (o *Base) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"base\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, basePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &baseR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByBases: BaseSlice{o},
		}
	} else {
		related.R.UpdatedByBases = append(related.R.UpdatedByBases, o)
	}

	return nil
}

// AddBaseVersions adds the given related objects to the existing relationships
// of the base, optionally inserting them as new records.
// Appends related to o.R.BaseVersions.
// Sets related.R.Base appropriately.
func (o *Base) AddBaseVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"base_version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"base_id"}),
				strmangle.WhereClause("\"", "\"", 2, baseVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &baseR{
			BaseVersions: related,
		}
	} else {
		o.R.BaseVersions = append(o.R.BaseVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseVersionR{
				Base: o,
			}
		} else {
			rel.R.Base = o
		}
	}
	return nil
}

// Bases retrieves all the records using an executor.
func Bases(mods ...qm.QueryMod) baseQuery {
	mods = append(mods, qm.From("\"base\""))
	return baseQuery{NewQuery(mods...)}
}

// FindBase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBase(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Base, error) {
	baseObj := &Base{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"base\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, baseObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from base")
	}

	return baseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Base) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no base provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	baseInsertCacheMut.RLock()
	cache, cached := baseInsertCache[key]
	baseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			baseAllColumns,
			baseColumnsWithDefault,
			baseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(baseType, baseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(baseType, baseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"base\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"base\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into base")
	}

	if !cached {
		baseInsertCacheMut.Lock()
		baseInsertCache[key] = cache
		baseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Base.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Base) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	baseUpdateCacheMut.RLock()
	cache, cached := baseUpdateCache[key]
	baseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			baseAllColumns,
			basePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update base, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"base\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, basePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(baseType, baseMapping, append(wl, basePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update base row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for base")
	}

	if !cached {
		baseUpdateCacheMut.Lock()
		baseUpdateCache[key] = cache
		baseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q baseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for base")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for base")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), basePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"base\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, basePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in base slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all base")
	}
	return rowsAff, nil
}

// Delete deletes a single Base record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Base) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Base provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), basePrimaryKeyMapping)
	sql := "DELETE FROM \"base\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from base")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for base")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q baseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no baseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from base")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for base")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(baseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), basePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"base\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, basePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from base slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for base")
	}

	if len(baseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Base) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBase(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), basePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"base\".* FROM \"base\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, basePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in BaseSlice")
	}

	*o = slice

	return nil
}

// BaseExists checks if the Base row exists.
func BaseExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"base\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if base exists")
	}

	return exists, nil
}

// Base is an object representing the database table.
type BaseDTO struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeveloperID int64     `boil:"developer_id" json:"developerID" toml:"developerID" yaml:"developerID"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	DisplayName string    `boil:"display_name" json:"displayName" toml:"displayName" yaml:"displayName"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Public      bool      `boil:"public" json:"public" toml:"public" yaml:"public"`
}

// DTO converts the Base to a BaseDTO struct.
func (o Base) DTO() *BaseDTO {
	return &BaseDTO{
		ID:          o.ID,
		DeveloperID: o.DeveloperID,
		CreatedAt:   o.CreatedAt,
		CreatedByID: o.CreatedByID,
		UpdatedAt:   o.UpdatedAt,
		UpdatedByID: o.UpdatedByID,
		Name:        o.Name,
		DisplayName: o.DisplayName,
		Description: o.Description,
		Public:      o.Public,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Base) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no base provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(baseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	baseUpsertCacheMut.RLock()
	cache, cached := baseUpsertCache[key]
	baseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			baseAllColumns,
			baseColumnsWithDefault,
			baseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			baseAllColumns,
			basePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert base, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(basePrimaryKeyColumns))
			copy(conflict, basePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"base\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(baseType, baseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(baseType, baseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert base")
	}

	if !cached {
		baseUpsertCacheMut.Lock()
		baseUpsertCache[key] = cache
		baseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
