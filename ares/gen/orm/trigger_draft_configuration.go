// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TriggerDraftConfiguration is an object representing the database table.
type TriggerDraftConfiguration struct {
	ID                   int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DraftConfigurationID int64      `boil:"draft_configuration_id" json:"draftConfigurationID" toml:"draftConfigurationID" yaml:"draftConfigurationID"`
	VersionID            null.Int64 `boil:"version_id" json:"versionID,omitempty" toml:"versionID" yaml:"versionID,omitempty"`
	Name                 string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Config               string     `boil:"config" json:"config" toml:"config" yaml:"config"`
	MessageConfig        null.JSON  `boil:"message_config" json:"messageConfig,omitempty" toml:"messageConfig" yaml:"messageConfig,omitempty"`

	R *triggerDraftConfigurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L triggerDraftConfigurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TriggerDraftConfigurationColumns = struct {
	ID                   string
	DraftConfigurationID string
	VersionID            string
	Name                 string
	Config               string
	MessageConfig        string
}{
	ID:                   "id",
	DraftConfigurationID: "draft_configuration_id",
	VersionID:            "version_id",
	Name:                 "name",
	Config:               "config",
	MessageConfig:        "message_config",
}

// Generated where

var TriggerDraftConfigurationWhere = struct {
	ID                   whereHelperint64
	DraftConfigurationID whereHelperint64
	VersionID            whereHelpernull_Int64
	Name                 whereHelperstring
	Config               whereHelperstring
	MessageConfig        whereHelpernull_JSON
}{
	ID:                   whereHelperint64{field: "\"trigger_draft_configuration\".\"id\""},
	DraftConfigurationID: whereHelperint64{field: "\"trigger_draft_configuration\".\"draft_configuration_id\""},
	VersionID:            whereHelpernull_Int64{field: "\"trigger_draft_configuration\".\"version_id\""},
	Name:                 whereHelperstring{field: "\"trigger_draft_configuration\".\"name\""},
	Config:               whereHelperstring{field: "\"trigger_draft_configuration\".\"config\""},
	MessageConfig:        whereHelpernull_JSON{field: "\"trigger_draft_configuration\".\"message_config\""},
}

// TriggerDraftConfigurationRels is where relationship names are stored.
var TriggerDraftConfigurationRels = struct {
	DraftConfiguration string
	Version            string
}{
	DraftConfiguration: "DraftConfiguration",
	Version:            "Version",
}

// triggerDraftConfigurationR is where relationships are stored.
type triggerDraftConfigurationR struct {
	DraftConfiguration *DraftConfiguration
	Version            *TriggerVersion
}

// NewStruct creates a new relationship struct
func (*triggerDraftConfigurationR) NewStruct() *triggerDraftConfigurationR {
	return &triggerDraftConfigurationR{}
}

// triggerDraftConfigurationL is where Load methods for each relationship are stored.
type triggerDraftConfigurationL struct{}

var (
	triggerDraftConfigurationAllColumns            = []string{"id", "draft_configuration_id", "version_id", "name", "config", "message_config"}
	triggerDraftConfigurationColumnsWithoutDefault = []string{"draft_configuration_id", "version_id", "name", "config", "message_config"}
	triggerDraftConfigurationColumnsWithDefault    = []string{"id"}
	triggerDraftConfigurationPrimaryKeyColumns     = []string{"id"}
)

type (
	// TriggerDraftConfigurationSlice is an alias for a slice of pointers to TriggerDraftConfiguration.
	// This should generally be used opposed to []TriggerDraftConfiguration.
	TriggerDraftConfigurationSlice []*TriggerDraftConfiguration
	// TriggerDraftConfigurationHook is the signature for custom TriggerDraftConfiguration hook methods
	TriggerDraftConfigurationHook func(context.Context, boil.ContextExecutor, *TriggerDraftConfiguration) error

	triggerDraftConfigurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	triggerDraftConfigurationType                 = reflect.TypeOf(&TriggerDraftConfiguration{})
	triggerDraftConfigurationMapping              = queries.MakeStructMapping(triggerDraftConfigurationType)
	triggerDraftConfigurationPrimaryKeyMapping, _ = queries.BindMapping(triggerDraftConfigurationType, triggerDraftConfigurationMapping, triggerDraftConfigurationPrimaryKeyColumns)
	triggerDraftConfigurationInsertCacheMut       sync.RWMutex
	triggerDraftConfigurationInsertCache          = make(map[string]insertCache)
	triggerDraftConfigurationUpdateCacheMut       sync.RWMutex
	triggerDraftConfigurationUpdateCache          = make(map[string]updateCache)
	triggerDraftConfigurationUpsertCacheMut       sync.RWMutex
	triggerDraftConfigurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var triggerDraftConfigurationBeforeInsertHooks []TriggerDraftConfigurationHook
var triggerDraftConfigurationBeforeUpdateHooks []TriggerDraftConfigurationHook
var triggerDraftConfigurationBeforeDeleteHooks []TriggerDraftConfigurationHook
var triggerDraftConfigurationBeforeUpsertHooks []TriggerDraftConfigurationHook

var triggerDraftConfigurationAfterInsertHooks []TriggerDraftConfigurationHook
var triggerDraftConfigurationAfterSelectHooks []TriggerDraftConfigurationHook
var triggerDraftConfigurationAfterUpdateHooks []TriggerDraftConfigurationHook
var triggerDraftConfigurationAfterDeleteHooks []TriggerDraftConfigurationHook
var triggerDraftConfigurationAfterUpsertHooks []TriggerDraftConfigurationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TriggerDraftConfiguration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TriggerDraftConfiguration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TriggerDraftConfiguration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TriggerDraftConfiguration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TriggerDraftConfiguration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TriggerDraftConfiguration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TriggerDraftConfiguration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TriggerDraftConfiguration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TriggerDraftConfiguration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range triggerDraftConfigurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTriggerDraftConfigurationHook registers your hook function for all future operations.
func AddTriggerDraftConfigurationHook(hookPoint boil.HookPoint, triggerDraftConfigurationHook TriggerDraftConfigurationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		triggerDraftConfigurationBeforeInsertHooks = append(triggerDraftConfigurationBeforeInsertHooks, triggerDraftConfigurationHook)
	case boil.BeforeUpdateHook:
		triggerDraftConfigurationBeforeUpdateHooks = append(triggerDraftConfigurationBeforeUpdateHooks, triggerDraftConfigurationHook)
	case boil.BeforeDeleteHook:
		triggerDraftConfigurationBeforeDeleteHooks = append(triggerDraftConfigurationBeforeDeleteHooks, triggerDraftConfigurationHook)
	case boil.BeforeUpsertHook:
		triggerDraftConfigurationBeforeUpsertHooks = append(triggerDraftConfigurationBeforeUpsertHooks, triggerDraftConfigurationHook)
	case boil.AfterInsertHook:
		triggerDraftConfigurationAfterInsertHooks = append(triggerDraftConfigurationAfterInsertHooks, triggerDraftConfigurationHook)
	case boil.AfterSelectHook:
		triggerDraftConfigurationAfterSelectHooks = append(triggerDraftConfigurationAfterSelectHooks, triggerDraftConfigurationHook)
	case boil.AfterUpdateHook:
		triggerDraftConfigurationAfterUpdateHooks = append(triggerDraftConfigurationAfterUpdateHooks, triggerDraftConfigurationHook)
	case boil.AfterDeleteHook:
		triggerDraftConfigurationAfterDeleteHooks = append(triggerDraftConfigurationAfterDeleteHooks, triggerDraftConfigurationHook)
	case boil.AfterUpsertHook:
		triggerDraftConfigurationAfterUpsertHooks = append(triggerDraftConfigurationAfterUpsertHooks, triggerDraftConfigurationHook)
	}
}

// One returns a single triggerDraftConfiguration record from the query.
func (q triggerDraftConfigurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TriggerDraftConfiguration, error) {
	o := &TriggerDraftConfiguration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for trigger_draft_configuration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TriggerDraftConfiguration records from the query.
func (q triggerDraftConfigurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (TriggerDraftConfigurationSlice, error) {
	var o []*TriggerDraftConfiguration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to TriggerDraftConfiguration slice")
	}

	if len(triggerDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TriggerDraftConfiguration records in the query.
func (q triggerDraftConfigurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count trigger_draft_configuration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q triggerDraftConfigurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if trigger_draft_configuration exists")
	}

	return count > 0, nil
}

// DraftConfiguration pointed to by the foreign key.
func (o *TriggerDraftConfiguration) DraftConfiguration(mods ...qm.QueryMod) draftConfigurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DraftConfigurationID),
	}

	queryMods = append(queryMods, mods...)

	query := DraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"draft_configuration\"")

	return query
}

// Version pointed to by the foreign key.
func (o *TriggerDraftConfiguration) Version(mods ...qm.QueryMod) triggerVersionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VersionID),
	}

	queryMods = append(queryMods, mods...)

	query := TriggerVersions(queryMods...)
	queries.SetFrom(query.Query, "\"trigger_version\"")

	return query
}

// LoadDraftConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (triggerDraftConfigurationL) LoadDraftConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*TriggerDraftConfiguration
	var object *TriggerDraftConfiguration

	if singular {
		object = maybeTriggerDraftConfiguration.(*TriggerDraftConfiguration)
	} else {
		slice = *maybeTriggerDraftConfiguration.(*[]*TriggerDraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &triggerDraftConfigurationR{}
		}
		args = append(args, object.DraftConfigurationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerDraftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.DraftConfigurationID {
					continue Outer
				}
			}

			args = append(args, obj.DraftConfigurationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`draft_configuration`), qm.WhereIn(`draft_configuration.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DraftConfiguration")
	}

	var resultSlice []*DraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DraftConfiguration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for draft_configuration")
	}

	if len(triggerDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DraftConfiguration = foreign
		if foreign.R == nil {
			foreign.R = &draftConfigurationR{}
		}
		foreign.R.TriggerDraftConfiguration = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DraftConfigurationID == foreign.ID {
				local.R.DraftConfiguration = foreign
				if foreign.R == nil {
					foreign.R = &draftConfigurationR{}
				}
				foreign.R.TriggerDraftConfiguration = local
				break
			}
		}
	}

	return nil
}

// LoadVersion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (triggerDraftConfigurationL) LoadVersion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTriggerDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*TriggerDraftConfiguration
	var object *TriggerDraftConfiguration

	if singular {
		object = maybeTriggerDraftConfiguration.(*TriggerDraftConfiguration)
	} else {
		slice = *maybeTriggerDraftConfiguration.(*[]*TriggerDraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &triggerDraftConfigurationR{}
		}
		if !queries.IsNil(object.VersionID) {
			args = append(args, object.VersionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &triggerDraftConfigurationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VersionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VersionID) {
				args = append(args, obj.VersionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger_version`), qm.WhereIn(`trigger_version.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TriggerVersion")
	}

	var resultSlice []*TriggerVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TriggerVersion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trigger_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_version")
	}

	if len(triggerDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Version = foreign
		if foreign.R == nil {
			foreign.R = &triggerVersionR{}
		}
		foreign.R.VersionTriggerDraftConfigurations = append(foreign.R.VersionTriggerDraftConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VersionID, foreign.ID) {
				local.R.Version = foreign
				if foreign.R == nil {
					foreign.R = &triggerVersionR{}
				}
				foreign.R.VersionTriggerDraftConfigurations = append(foreign.R.VersionTriggerDraftConfigurations, local)
				break
			}
		}
	}

	return nil
}

// SetDraftConfiguration of the triggerDraftConfiguration to the related item.
// Sets o.R.DraftConfiguration to related.
// Adds o to related.R.TriggerDraftConfiguration.
func (o *TriggerDraftConfiguration) SetDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DraftConfiguration) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trigger_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"draft_configuration_id"}),
		strmangle.WhereClause("\"", "\"", 2, triggerDraftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DraftConfigurationID = related.ID
	if o.R == nil {
		o.R = &triggerDraftConfigurationR{
			DraftConfiguration: related,
		}
	} else {
		o.R.DraftConfiguration = related
	}

	if related.R == nil {
		related.R = &draftConfigurationR{
			TriggerDraftConfiguration: o,
		}
	} else {
		related.R.TriggerDraftConfiguration = o
	}

	return nil
}

// SetVersion of the triggerDraftConfiguration to the related item.
// Sets o.R.Version to related.
// Adds o to related.R.VersionTriggerDraftConfigurations.
func (o *TriggerDraftConfiguration) SetVersion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TriggerVersion) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trigger_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
		strmangle.WhereClause("\"", "\"", 2, triggerDraftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VersionID, related.ID)
	if o.R == nil {
		o.R = &triggerDraftConfigurationR{
			Version: related,
		}
	} else {
		o.R.Version = related
	}

	if related.R == nil {
		related.R = &triggerVersionR{
			VersionTriggerDraftConfigurations: TriggerDraftConfigurationSlice{o},
		}
	} else {
		related.R.VersionTriggerDraftConfigurations = append(related.R.VersionTriggerDraftConfigurations, o)
	}

	return nil
}

// RemoveVersion relationship.
// Sets o.R.Version to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TriggerDraftConfiguration) RemoveVersion(ctx context.Context, exec boil.ContextExecutor, related *TriggerVersion) error {
	var err error

	queries.SetScanner(&o.VersionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("version_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Version = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VersionTriggerDraftConfigurations {
		if queries.Equal(o.VersionID, ri.VersionID) {
			continue
		}

		ln := len(related.R.VersionTriggerDraftConfigurations)
		if ln > 1 && i < ln-1 {
			related.R.VersionTriggerDraftConfigurations[i] = related.R.VersionTriggerDraftConfigurations[ln-1]
		}
		related.R.VersionTriggerDraftConfigurations = related.R.VersionTriggerDraftConfigurations[:ln-1]
		break
	}
	return nil
}

// TriggerDraftConfigurations retrieves all the records using an executor.
func TriggerDraftConfigurations(mods ...qm.QueryMod) triggerDraftConfigurationQuery {
	mods = append(mods, qm.From("\"trigger_draft_configuration\""))
	return triggerDraftConfigurationQuery{NewQuery(mods...)}
}

// FindTriggerDraftConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTriggerDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TriggerDraftConfiguration, error) {
	triggerDraftConfigurationObj := &TriggerDraftConfiguration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trigger_draft_configuration\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, triggerDraftConfigurationObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from trigger_draft_configuration")
	}

	return triggerDraftConfigurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TriggerDraftConfiguration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no trigger_draft_configuration provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(triggerDraftConfigurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	triggerDraftConfigurationInsertCacheMut.RLock()
	cache, cached := triggerDraftConfigurationInsertCache[key]
	triggerDraftConfigurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			triggerDraftConfigurationAllColumns,
			triggerDraftConfigurationColumnsWithDefault,
			triggerDraftConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(triggerDraftConfigurationType, triggerDraftConfigurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(triggerDraftConfigurationType, triggerDraftConfigurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trigger_draft_configuration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trigger_draft_configuration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into trigger_draft_configuration")
	}

	if !cached {
		triggerDraftConfigurationInsertCacheMut.Lock()
		triggerDraftConfigurationInsertCache[key] = cache
		triggerDraftConfigurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TriggerDraftConfiguration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TriggerDraftConfiguration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	triggerDraftConfigurationUpdateCacheMut.RLock()
	cache, cached := triggerDraftConfigurationUpdateCache[key]
	triggerDraftConfigurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			triggerDraftConfigurationAllColumns,
			triggerDraftConfigurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update trigger_draft_configuration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trigger_draft_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, triggerDraftConfigurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(triggerDraftConfigurationType, triggerDraftConfigurationMapping, append(wl, triggerDraftConfigurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update trigger_draft_configuration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for trigger_draft_configuration")
	}

	if !cached {
		triggerDraftConfigurationUpdateCacheMut.Lock()
		triggerDraftConfigurationUpdateCache[key] = cache
		triggerDraftConfigurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q triggerDraftConfigurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for trigger_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for trigger_draft_configuration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TriggerDraftConfigurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trigger_draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, triggerDraftConfigurationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in triggerDraftConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all triggerDraftConfiguration")
	}
	return rowsAff, nil
}

// Delete deletes a single TriggerDraftConfiguration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TriggerDraftConfiguration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no TriggerDraftConfiguration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), triggerDraftConfigurationPrimaryKeyMapping)
	sql := "DELETE FROM \"trigger_draft_configuration\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from trigger_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for trigger_draft_configuration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q triggerDraftConfigurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no triggerDraftConfigurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from trigger_draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for trigger_draft_configuration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TriggerDraftConfigurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(triggerDraftConfigurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trigger_draft_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, triggerDraftConfigurationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from triggerDraftConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for trigger_draft_configuration")
	}

	if len(triggerDraftConfigurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TriggerDraftConfiguration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTriggerDraftConfiguration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TriggerDraftConfigurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TriggerDraftConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), triggerDraftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trigger_draft_configuration\".* FROM \"trigger_draft_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, triggerDraftConfigurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in TriggerDraftConfigurationSlice")
	}

	*o = slice

	return nil
}

// TriggerDraftConfigurationExists checks if the TriggerDraftConfiguration row exists.
func TriggerDraftConfigurationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trigger_draft_configuration\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if trigger_draft_configuration exists")
	}

	return exists, nil
}

// TriggerDraftConfiguration is an object representing the database table.
type TriggerDraftConfigurationDTO struct {
	ID                   int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DraftConfigurationID int64      `boil:"draft_configuration_id" json:"draftConfigurationID" toml:"draftConfigurationID" yaml:"draftConfigurationID"`
	VersionID            null.Int64 `boil:"version_id" json:"versionID,omitempty" toml:"versionID" yaml:"versionID,omitempty"`
	Name                 string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Config               string     `boil:"config" json:"config" toml:"config" yaml:"config"`
	MessageConfig        null.JSON  `boil:"message_config" json:"messageConfig,omitempty" toml:"messageConfig" yaml:"messageConfig,omitempty"`
}

// DTO converts the TriggerDraftConfiguration to a TriggerDraftConfigurationDTO struct.
func (o TriggerDraftConfiguration) DTO() *TriggerDraftConfigurationDTO {
	return &TriggerDraftConfigurationDTO{
		ID:                   o.ID,
		DraftConfigurationID: o.DraftConfigurationID,
		VersionID:            o.VersionID,
		Name:                 o.Name,
		Config:               o.Config,
		MessageConfig:        o.MessageConfig,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TriggerDraftConfiguration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no trigger_draft_configuration provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(triggerDraftConfigurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	triggerDraftConfigurationUpsertCacheMut.RLock()
	cache, cached := triggerDraftConfigurationUpsertCache[key]
	triggerDraftConfigurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			triggerDraftConfigurationAllColumns,
			triggerDraftConfigurationColumnsWithDefault,
			triggerDraftConfigurationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			triggerDraftConfigurationAllColumns,
			triggerDraftConfigurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert trigger_draft_configuration, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(triggerDraftConfigurationPrimaryKeyColumns))
			copy(conflict, triggerDraftConfigurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trigger_draft_configuration\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(triggerDraftConfigurationType, triggerDraftConfigurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(triggerDraftConfigurationType, triggerDraftConfigurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert trigger_draft_configuration")
	}

	if !cached {
		triggerDraftConfigurationUpsertCacheMut.Lock()
		triggerDraftConfigurationUpsertCache[key] = cache
		triggerDraftConfigurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
