// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Configuration is an object representing the database table.
type Configuration struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	PipelineID     int64     `boil:"pipeline_id" json:"pipelineID" toml:"pipelineID" yaml:"pipelineID"`
	OrganizationID int64     `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	Revision       int64     `boil:"revision" json:"revision" toml:"revision" yaml:"revision"`
	CommitMessage  string    `boil:"commit_message" json:"commitMessage" toml:"commitMessage" yaml:"commitMessage"`

	R *configurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigurationColumns = struct {
	ID             string
	CreatedAt      string
	CreatedByID    string
	UpdatedAt      string
	UpdatedByID    string
	PipelineID     string
	OrganizationID string
	Revision       string
	CommitMessage  string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	CreatedByID:    "created_by_id",
	UpdatedAt:      "updated_at",
	UpdatedByID:    "updated_by_id",
	PipelineID:     "pipeline_id",
	OrganizationID: "organization_id",
	Revision:       "revision",
	CommitMessage:  "commit_message",
}

// Generated where

var ConfigurationWhere = struct {
	ID             whereHelperint64
	CreatedAt      whereHelpertime_Time
	CreatedByID    whereHelperint64
	UpdatedAt      whereHelpertime_Time
	UpdatedByID    whereHelperint64
	PipelineID     whereHelperint64
	OrganizationID whereHelperint64
	Revision       whereHelperint64
	CommitMessage  whereHelperstring
}{
	ID:             whereHelperint64{field: "\"configuration\".\"id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"configuration\".\"created_at\""},
	CreatedByID:    whereHelperint64{field: "\"configuration\".\"created_by_id\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"configuration\".\"updated_at\""},
	UpdatedByID:    whereHelperint64{field: "\"configuration\".\"updated_by_id\""},
	PipelineID:     whereHelperint64{field: "\"configuration\".\"pipeline_id\""},
	OrganizationID: whereHelperint64{field: "\"configuration\".\"organization_id\""},
	Revision:       whereHelperint64{field: "\"configuration\".\"revision\""},
	CommitMessage:  whereHelperstring{field: "\"configuration\".\"commit_message\""},
}

// ConfigurationRels is where relationship names are stored.
var ConfigurationRels = struct {
	CreatedBy            string
	Organization         string
	Pipeline             string
	UpdatedBy            string
	BaseConfiguration    string
	TriggerConfiguration string
	ActionConfigurations string
	Deployments          string
}{
	CreatedBy:            "CreatedBy",
	Organization:         "Organization",
	Pipeline:             "Pipeline",
	UpdatedBy:            "UpdatedBy",
	BaseConfiguration:    "BaseConfiguration",
	TriggerConfiguration: "TriggerConfiguration",
	ActionConfigurations: "ActionConfigurations",
	Deployments:          "Deployments",
}

// configurationR is where relationships are stored.
type configurationR struct {
	CreatedBy            *User
	Organization         *Organization
	Pipeline             *Pipeline
	UpdatedBy            *User
	BaseConfiguration    *BaseConfiguration
	TriggerConfiguration *TriggerConfiguration
	ActionConfigurations ActionConfigurationSlice
	Deployments          DeploymentSlice
}

// NewStruct creates a new relationship struct
func (*configurationR) NewStruct() *configurationR {
	return &configurationR{}
}

// configurationL is where Load methods for each relationship are stored.
type configurationL struct{}

var (
	configurationAllColumns            = []string{"id", "created_at", "created_by_id", "updated_at", "updated_by_id", "pipeline_id", "organization_id", "revision", "commit_message"}
	configurationColumnsWithoutDefault = []string{"created_at", "created_by_id", "updated_at", "updated_by_id", "pipeline_id", "organization_id", "revision"}
	configurationColumnsWithDefault    = []string{"id", "commit_message"}
	configurationPrimaryKeyColumns     = []string{"id"}
)

type (
	// ConfigurationSlice is an alias for a slice of pointers to Configuration.
	// This should generally be used opposed to []Configuration.
	ConfigurationSlice []*Configuration
	// ConfigurationHook is the signature for custom Configuration hook methods
	ConfigurationHook func(context.Context, boil.ContextExecutor, *Configuration) error

	configurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configurationType                 = reflect.TypeOf(&Configuration{})
	configurationMapping              = queries.MakeStructMapping(configurationType)
	configurationPrimaryKeyMapping, _ = queries.BindMapping(configurationType, configurationMapping, configurationPrimaryKeyColumns)
	configurationInsertCacheMut       sync.RWMutex
	configurationInsertCache          = make(map[string]insertCache)
	configurationUpdateCacheMut       sync.RWMutex
	configurationUpdateCache          = make(map[string]updateCache)
	configurationUpsertCacheMut       sync.RWMutex
	configurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var configurationBeforeInsertHooks []ConfigurationHook
var configurationBeforeUpdateHooks []ConfigurationHook
var configurationBeforeDeleteHooks []ConfigurationHook
var configurationBeforeUpsertHooks []ConfigurationHook

var configurationAfterInsertHooks []ConfigurationHook
var configurationAfterSelectHooks []ConfigurationHook
var configurationAfterUpdateHooks []ConfigurationHook
var configurationAfterDeleteHooks []ConfigurationHook
var configurationAfterUpsertHooks []ConfigurationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Configuration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Configuration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Configuration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Configuration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Configuration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Configuration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Configuration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Configuration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Configuration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range configurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigurationHook registers your hook function for all future operations.
func AddConfigurationHook(hookPoint boil.HookPoint, configurationHook ConfigurationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		configurationBeforeInsertHooks = append(configurationBeforeInsertHooks, configurationHook)
	case boil.BeforeUpdateHook:
		configurationBeforeUpdateHooks = append(configurationBeforeUpdateHooks, configurationHook)
	case boil.BeforeDeleteHook:
		configurationBeforeDeleteHooks = append(configurationBeforeDeleteHooks, configurationHook)
	case boil.BeforeUpsertHook:
		configurationBeforeUpsertHooks = append(configurationBeforeUpsertHooks, configurationHook)
	case boil.AfterInsertHook:
		configurationAfterInsertHooks = append(configurationAfterInsertHooks, configurationHook)
	case boil.AfterSelectHook:
		configurationAfterSelectHooks = append(configurationAfterSelectHooks, configurationHook)
	case boil.AfterUpdateHook:
		configurationAfterUpdateHooks = append(configurationAfterUpdateHooks, configurationHook)
	case boil.AfterDeleteHook:
		configurationAfterDeleteHooks = append(configurationAfterDeleteHooks, configurationHook)
	case boil.AfterUpsertHook:
		configurationAfterUpsertHooks = append(configurationAfterUpsertHooks, configurationHook)
	}
}

// One returns a single configuration record from the query.
func (q configurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Configuration, error) {
	o := &Configuration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for configuration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Configuration records from the query.
func (q configurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConfigurationSlice, error) {
	var o []*Configuration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Configuration slice")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Configuration records in the query.
func (q configurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count configuration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q configurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if configuration exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *Configuration) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Organization pointed to by the foreign key.
func (o *Configuration) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// Pipeline pointed to by the foreign key.
func (o *Configuration) Pipeline(mods ...qm.QueryMod) pipelineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PipelineID),
	}

	queryMods = append(queryMods, mods...)

	query := Pipelines(queryMods...)
	queries.SetFrom(query.Query, "\"pipeline\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *Configuration) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// BaseConfiguration pointed to by the foreign key.
func (o *Configuration) BaseConfiguration(mods ...qm.QueryMod) baseConfigurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"configuration_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := BaseConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"base_configuration\"")

	return query
}

// TriggerConfiguration pointed to by the foreign key.
func (o *Configuration) TriggerConfiguration(mods ...qm.QueryMod) triggerConfigurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"configuration_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := TriggerConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"trigger_configuration\"")

	return query
}

// ActionConfigurations retrieves all the action_configuration's ActionConfigurations with an executor.
func (o *Configuration) ActionConfigurations(mods ...qm.QueryMod) actionConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action_configuration\".\"configuration_id\"=?", o.ID),
	)

	query := ActionConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"action_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action_configuration\".*"})
	}

	return query
}

// Deployments retrieves all the deployment's Deployments with an executor.
func (o *Configuration) Deployments(mods ...qm.QueryMod) deploymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deployment\".\"configuration_id\"=?", o.ID),
	)

	query := Deployments(queryMods...)
	queries.SetFrom(query.Query, "\"deployment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"deployment\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (configurationL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiguration interface{}, mods queries.Applicator) error {
	var slice []*Configuration
	var object *Configuration

	if singular {
		object = maybeConfiguration.(*Configuration)
	} else {
		slice = *maybeConfiguration.(*[]*Configuration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configurationR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configurationR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByConfigurations = append(foreign.R.CreatedByConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByConfigurations = append(foreign.R.CreatedByConfigurations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (configurationL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiguration interface{}, mods queries.Applicator) error {
	var slice []*Configuration
	var object *Configuration

	if singular {
		object = maybeConfiguration.(*Configuration)
	} else {
		slice = *maybeConfiguration.(*[]*Configuration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configurationR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configurationR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Configurations = append(foreign.R.Configurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Configurations = append(foreign.R.Configurations, local)
				break
			}
		}
	}

	return nil
}

// LoadPipeline allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (configurationL) LoadPipeline(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiguration interface{}, mods queries.Applicator) error {
	var slice []*Configuration
	var object *Configuration

	if singular {
		object = maybeConfiguration.(*Configuration)
	} else {
		slice = *maybeConfiguration.(*[]*Configuration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configurationR{}
		}
		args = append(args, object.PipelineID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configurationR{}
			}

			for _, a := range args {
				if a == obj.PipelineID {
					continue Outer
				}
			}

			args = append(args, obj.PipelineID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pipeline`), qm.WhereIn(`pipeline.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pipeline")
	}

	var resultSlice []*Pipeline
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pipeline")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pipeline")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pipeline")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pipeline = foreign
		if foreign.R == nil {
			foreign.R = &pipelineR{}
		}
		foreign.R.Configurations = append(foreign.R.Configurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PipelineID == foreign.ID {
				local.R.Pipeline = foreign
				if foreign.R == nil {
					foreign.R = &pipelineR{}
				}
				foreign.R.Configurations = append(foreign.R.Configurations, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (configurationL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiguration interface{}, mods queries.Applicator) error {
	var slice []*Configuration
	var object *Configuration

	if singular {
		object = maybeConfiguration.(*Configuration)
	} else {
		slice = *maybeConfiguration.(*[]*Configuration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configurationR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configurationR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByConfigurations = append(foreign.R.UpdatedByConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByConfigurations = append(foreign.R.UpdatedByConfigurations, local)
				break
			}
		}
	}

	return nil
}

// LoadBaseConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (configurationL) LoadBaseConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiguration interface{}, mods queries.Applicator) error {
	var slice []*Configuration
	var object *Configuration

	if singular {
		object = maybeConfiguration.(*Configuration)
	} else {
		slice = *maybeConfiguration.(*[]*Configuration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configurationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configurationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base_configuration`), qm.WhereIn(`base_configuration.configuration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BaseConfiguration")
	}

	var resultSlice []*BaseConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BaseConfiguration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for base_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_configuration")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseConfiguration = foreign
		if foreign.R == nil {
			foreign.R = &baseConfigurationR{}
		}
		foreign.R.Configuration = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ConfigurationID {
				local.R.BaseConfiguration = foreign
				if foreign.R == nil {
					foreign.R = &baseConfigurationR{}
				}
				foreign.R.Configuration = local
				break
			}
		}
	}

	return nil
}

// LoadTriggerConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (configurationL) LoadTriggerConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiguration interface{}, mods queries.Applicator) error {
	var slice []*Configuration
	var object *Configuration

	if singular {
		object = maybeConfiguration.(*Configuration)
	} else {
		slice = *maybeConfiguration.(*[]*Configuration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configurationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configurationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger_configuration`), qm.WhereIn(`trigger_configuration.configuration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TriggerConfiguration")
	}

	var resultSlice []*TriggerConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TriggerConfiguration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trigger_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_configuration")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TriggerConfiguration = foreign
		if foreign.R == nil {
			foreign.R = &triggerConfigurationR{}
		}
		foreign.R.Configuration = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ConfigurationID {
				local.R.TriggerConfiguration = foreign
				if foreign.R == nil {
					foreign.R = &triggerConfigurationR{}
				}
				foreign.R.Configuration = local
				break
			}
		}
	}

	return nil
}

// LoadActionConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configurationL) LoadActionConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiguration interface{}, mods queries.Applicator) error {
	var slice []*Configuration
	var object *Configuration

	if singular {
		object = maybeConfiguration.(*Configuration)
	} else {
		slice = *maybeConfiguration.(*[]*Configuration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configurationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configurationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_configuration`), qm.WhereIn(`action_configuration.configuration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action_configuration")
	}

	var resultSlice []*ActionConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_configuration")
	}

	if len(actionConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActionConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionConfigurationR{}
			}
			foreign.R.Configuration = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigurationID {
				local.R.ActionConfigurations = append(local.R.ActionConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &actionConfigurationR{}
				}
				foreign.R.Configuration = local
				break
			}
		}
	}

	return nil
}

// LoadDeployments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configurationL) LoadDeployments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfiguration interface{}, mods queries.Applicator) error {
	var slice []*Configuration
	var object *Configuration

	if singular {
		object = maybeConfiguration.(*Configuration)
	} else {
		slice = *maybeConfiguration.(*[]*Configuration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configurationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configurationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`deployment`), qm.WhereIn(`deployment.configuration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deployment")
	}

	var resultSlice []*Deployment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deployment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deployment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deployment")
	}

	if len(deploymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Deployments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deploymentR{}
			}
			foreign.R.Configuration = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigurationID {
				local.R.Deployments = append(local.R.Deployments, foreign)
				if foreign.R == nil {
					foreign.R = &deploymentR{}
				}
				foreign.R.Configuration = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the configuration to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByConfigurations.
func (o *Configuration) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, configurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &configurationR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByConfigurations: ConfigurationSlice{o},
		}
	} else {
		related.R.CreatedByConfigurations = append(related.R.CreatedByConfigurations, o)
	}

	return nil
}

// SetOrganization of the configuration to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Configurations.
func (o *Configuration) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, configurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &configurationR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Configurations: ConfigurationSlice{o},
		}
	} else {
		related.R.Configurations = append(related.R.Configurations, o)
	}

	return nil
}

// SetPipeline of the configuration to the related item.
// Sets o.R.Pipeline to related.
// Adds o to related.R.Configurations.
func (o *Configuration) SetPipeline(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pipeline) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pipeline_id"}),
		strmangle.WhereClause("\"", "\"", 2, configurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PipelineID = related.ID
	if o.R == nil {
		o.R = &configurationR{
			Pipeline: related,
		}
	} else {
		o.R.Pipeline = related
	}

	if related.R == nil {
		related.R = &pipelineR{
			Configurations: ConfigurationSlice{o},
		}
	} else {
		related.R.Configurations = append(related.R.Configurations, o)
	}

	return nil
}

// SetUpdatedBy of the configuration to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByConfigurations.
func (o *Configuration) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, configurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &configurationR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByConfigurations: ConfigurationSlice{o},
		}
	} else {
		related.R.UpdatedByConfigurations = append(related.R.UpdatedByConfigurations, o)
	}

	return nil
}

// SetBaseConfiguration of the configuration to the related item.
// Sets o.R.BaseConfiguration to related.
// Adds o to related.R.Configuration.
func (o *Configuration) SetBaseConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BaseConfiguration) error {
	var err error

	if insert {
		related.ConfigurationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"base_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"configuration_id"}),
			strmangle.WhereClause("\"", "\"", 2, baseConfigurationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ConfigurationID = o.ID

	}

	if o.R == nil {
		o.R = &configurationR{
			BaseConfiguration: related,
		}
	} else {
		o.R.BaseConfiguration = related
	}

	if related.R == nil {
		related.R = &baseConfigurationR{
			Configuration: o,
		}
	} else {
		related.R.Configuration = o
	}
	return nil
}

// SetTriggerConfiguration of the configuration to the related item.
// Sets o.R.TriggerConfiguration to related.
// Adds o to related.R.Configuration.
func (o *Configuration) SetTriggerConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TriggerConfiguration) error {
	var err error

	if insert {
		related.ConfigurationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"trigger_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"configuration_id"}),
			strmangle.WhereClause("\"", "\"", 2, triggerConfigurationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ConfigurationID = o.ID

	}

	if o.R == nil {
		o.R = &configurationR{
			TriggerConfiguration: related,
		}
	} else {
		o.R.TriggerConfiguration = related
	}

	if related.R == nil {
		related.R = &triggerConfigurationR{
			Configuration: o,
		}
	} else {
		related.R.Configuration = o
	}
	return nil
}

// AddActionConfigurations adds the given related objects to the existing relationships
// of the configuration, optionally inserting them as new records.
// Appends related to o.R.ActionConfigurations.
// Sets related.R.Configuration appropriately.
func (o *Configuration) AddActionConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigurationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"configuration_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigurationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configurationR{
			ActionConfigurations: related,
		}
	} else {
		o.R.ActionConfigurations = append(o.R.ActionConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionConfigurationR{
				Configuration: o,
			}
		} else {
			rel.R.Configuration = o
		}
	}
	return nil
}

// AddDeployments adds the given related objects to the existing relationships
// of the configuration, optionally inserting them as new records.
// Appends related to o.R.Deployments.
// Sets related.R.Configuration appropriately.
func (o *Configuration) AddDeployments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Deployment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigurationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deployment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"configuration_id"}),
				strmangle.WhereClause("\"", "\"", 2, deploymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigurationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configurationR{
			Deployments: related,
		}
	} else {
		o.R.Deployments = append(o.R.Deployments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deploymentR{
				Configuration: o,
			}
		} else {
			rel.R.Configuration = o
		}
	}
	return nil
}

// Configurations retrieves all the records using an executor.
func Configurations(mods ...qm.QueryMod) configurationQuery {
	mods = append(mods, qm.From("\"configuration\""))
	return configurationQuery{NewQuery(mods...)}
}

// FindConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfiguration(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Configuration, error) {
	configurationObj := &Configuration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"configuration\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, configurationObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from configuration")
	}

	return configurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Configuration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no configuration provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configurationInsertCacheMut.RLock()
	cache, cached := configurationInsertCache[key]
	configurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configurationAllColumns,
			configurationColumnsWithDefault,
			configurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configurationType, configurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configurationType, configurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"configuration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"configuration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into configuration")
	}

	if !cached {
		configurationInsertCacheMut.Lock()
		configurationInsertCache[key] = cache
		configurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Configuration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Configuration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configurationUpdateCacheMut.RLock()
	cache, cached := configurationUpdateCache[key]
	configurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configurationAllColumns,
			configurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update configuration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configurationType, configurationMapping, append(wl, configurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update configuration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for configuration")
	}

	if !cached {
		configurationUpdateCacheMut.Lock()
		configurationUpdateCache[key] = cache
		configurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q configurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for configuration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configurationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in configuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all configuration")
	}
	return rowsAff, nil
}

// Delete deletes a single Configuration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Configuration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Configuration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configurationPrimaryKeyMapping)
	sql := "DELETE FROM \"configuration\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for configuration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q configurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no configurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for configuration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(configurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configurationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from configuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for configuration")
	}

	if len(configurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Configuration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConfiguration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"configuration\".* FROM \"configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ConfigurationSlice")
	}

	*o = slice

	return nil
}

// ConfigurationExists checks if the Configuration row exists.
func ConfigurationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"configuration\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if configuration exists")
	}

	return exists, nil
}

// Configuration is an object representing the database table.
type ConfigurationDTO struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	PipelineID     int64     `boil:"pipeline_id" json:"pipelineID" toml:"pipelineID" yaml:"pipelineID"`
	OrganizationID int64     `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	Revision       int64     `boil:"revision" json:"revision" toml:"revision" yaml:"revision"`
	CommitMessage  string    `boil:"commit_message" json:"commitMessage" toml:"commitMessage" yaml:"commitMessage"`
}

// DTO converts the Configuration to a ConfigurationDTO struct.
func (o Configuration) DTO() *ConfigurationDTO {
	return &ConfigurationDTO{
		ID:             o.ID,
		CreatedAt:      o.CreatedAt,
		CreatedByID:    o.CreatedByID,
		UpdatedAt:      o.UpdatedAt,
		UpdatedByID:    o.UpdatedByID,
		PipelineID:     o.PipelineID,
		OrganizationID: o.OrganizationID,
		Revision:       o.Revision,
		CommitMessage:  o.CommitMessage,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Configuration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no configuration provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configurationUpsertCacheMut.RLock()
	cache, cached := configurationUpsertCache[key]
	configurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			configurationAllColumns,
			configurationColumnsWithDefault,
			configurationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			configurationAllColumns,
			configurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert configuration, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(configurationPrimaryKeyColumns))
			copy(conflict, configurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"configuration\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(configurationType, configurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configurationType, configurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert configuration")
	}

	if !cached {
		configurationUpsertCacheMut.Lock()
		configurationUpsertCache[key] = cache
		configurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
