// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DefaultEnvironment is an object representing the database table.
type DefaultEnvironment struct {
	ID          int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Index       int64  `boil:"index" json:"index" toml:"index" yaml:"index"`
	Name        string `boil:"name" json:"name" toml:"name" yaml:"name"`
	MaxReplicas int64  `boil:"max_replicas" json:"maxReplicas" toml:"maxReplicas" yaml:"maxReplicas"`

	R *defaultEnvironmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L defaultEnvironmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DefaultEnvironmentColumns = struct {
	ID          string
	Index       string
	Name        string
	MaxReplicas string
}{
	ID:          "id",
	Index:       "index",
	Name:        "name",
	MaxReplicas: "max_replicas",
}

// Generated where

var DefaultEnvironmentWhere = struct {
	ID          whereHelperint64
	Index       whereHelperint64
	Name        whereHelperstring
	MaxReplicas whereHelperint64
}{
	ID:          whereHelperint64{field: "\"default_environment\".\"id\""},
	Index:       whereHelperint64{field: "\"default_environment\".\"index\""},
	Name:        whereHelperstring{field: "\"default_environment\".\"name\""},
	MaxReplicas: whereHelperint64{field: "\"default_environment\".\"max_replicas\""},
}

// DefaultEnvironmentRels is where relationship names are stored.
var DefaultEnvironmentRels = struct {
}{}

// defaultEnvironmentR is where relationships are stored.
type defaultEnvironmentR struct {
}

// NewStruct creates a new relationship struct
func (*defaultEnvironmentR) NewStruct() *defaultEnvironmentR {
	return &defaultEnvironmentR{}
}

// defaultEnvironmentL is where Load methods for each relationship are stored.
type defaultEnvironmentL struct{}

var (
	defaultEnvironmentAllColumns            = []string{"id", "index", "name", "max_replicas"}
	defaultEnvironmentColumnsWithoutDefault = []string{"index", "name"}
	defaultEnvironmentColumnsWithDefault    = []string{"id", "max_replicas"}
	defaultEnvironmentPrimaryKeyColumns     = []string{"id"}
)

type (
	// DefaultEnvironmentSlice is an alias for a slice of pointers to DefaultEnvironment.
	// This should generally be used opposed to []DefaultEnvironment.
	DefaultEnvironmentSlice []*DefaultEnvironment
	// DefaultEnvironmentHook is the signature for custom DefaultEnvironment hook methods
	DefaultEnvironmentHook func(context.Context, boil.ContextExecutor, *DefaultEnvironment) error

	defaultEnvironmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	defaultEnvironmentType                 = reflect.TypeOf(&DefaultEnvironment{})
	defaultEnvironmentMapping              = queries.MakeStructMapping(defaultEnvironmentType)
	defaultEnvironmentPrimaryKeyMapping, _ = queries.BindMapping(defaultEnvironmentType, defaultEnvironmentMapping, defaultEnvironmentPrimaryKeyColumns)
	defaultEnvironmentInsertCacheMut       sync.RWMutex
	defaultEnvironmentInsertCache          = make(map[string]insertCache)
	defaultEnvironmentUpdateCacheMut       sync.RWMutex
	defaultEnvironmentUpdateCache          = make(map[string]updateCache)
	defaultEnvironmentUpsertCacheMut       sync.RWMutex
	defaultEnvironmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var defaultEnvironmentBeforeInsertHooks []DefaultEnvironmentHook
var defaultEnvironmentBeforeUpdateHooks []DefaultEnvironmentHook
var defaultEnvironmentBeforeDeleteHooks []DefaultEnvironmentHook
var defaultEnvironmentBeforeUpsertHooks []DefaultEnvironmentHook

var defaultEnvironmentAfterInsertHooks []DefaultEnvironmentHook
var defaultEnvironmentAfterSelectHooks []DefaultEnvironmentHook
var defaultEnvironmentAfterUpdateHooks []DefaultEnvironmentHook
var defaultEnvironmentAfterDeleteHooks []DefaultEnvironmentHook
var defaultEnvironmentAfterUpsertHooks []DefaultEnvironmentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DefaultEnvironment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DefaultEnvironment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DefaultEnvironment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DefaultEnvironment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DefaultEnvironment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DefaultEnvironment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DefaultEnvironment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DefaultEnvironment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DefaultEnvironment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultEnvironmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDefaultEnvironmentHook registers your hook function for all future operations.
func AddDefaultEnvironmentHook(hookPoint boil.HookPoint, defaultEnvironmentHook DefaultEnvironmentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		defaultEnvironmentBeforeInsertHooks = append(defaultEnvironmentBeforeInsertHooks, defaultEnvironmentHook)
	case boil.BeforeUpdateHook:
		defaultEnvironmentBeforeUpdateHooks = append(defaultEnvironmentBeforeUpdateHooks, defaultEnvironmentHook)
	case boil.BeforeDeleteHook:
		defaultEnvironmentBeforeDeleteHooks = append(defaultEnvironmentBeforeDeleteHooks, defaultEnvironmentHook)
	case boil.BeforeUpsertHook:
		defaultEnvironmentBeforeUpsertHooks = append(defaultEnvironmentBeforeUpsertHooks, defaultEnvironmentHook)
	case boil.AfterInsertHook:
		defaultEnvironmentAfterInsertHooks = append(defaultEnvironmentAfterInsertHooks, defaultEnvironmentHook)
	case boil.AfterSelectHook:
		defaultEnvironmentAfterSelectHooks = append(defaultEnvironmentAfterSelectHooks, defaultEnvironmentHook)
	case boil.AfterUpdateHook:
		defaultEnvironmentAfterUpdateHooks = append(defaultEnvironmentAfterUpdateHooks, defaultEnvironmentHook)
	case boil.AfterDeleteHook:
		defaultEnvironmentAfterDeleteHooks = append(defaultEnvironmentAfterDeleteHooks, defaultEnvironmentHook)
	case boil.AfterUpsertHook:
		defaultEnvironmentAfterUpsertHooks = append(defaultEnvironmentAfterUpsertHooks, defaultEnvironmentHook)
	}
}

// One returns a single defaultEnvironment record from the query.
func (q defaultEnvironmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DefaultEnvironment, error) {
	o := &DefaultEnvironment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for default_environment")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DefaultEnvironment records from the query.
func (q defaultEnvironmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DefaultEnvironmentSlice, error) {
	var o []*DefaultEnvironment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to DefaultEnvironment slice")
	}

	if len(defaultEnvironmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DefaultEnvironment records in the query.
func (q defaultEnvironmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count default_environment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q defaultEnvironmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if default_environment exists")
	}

	return count > 0, nil
}

// DefaultEnvironments retrieves all the records using an executor.
func DefaultEnvironments(mods ...qm.QueryMod) defaultEnvironmentQuery {
	mods = append(mods, qm.From("\"default_environment\""))
	return defaultEnvironmentQuery{NewQuery(mods...)}
}

// FindDefaultEnvironment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDefaultEnvironment(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DefaultEnvironment, error) {
	defaultEnvironmentObj := &DefaultEnvironment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"default_environment\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, defaultEnvironmentObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from default_environment")
	}

	return defaultEnvironmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DefaultEnvironment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no default_environment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(defaultEnvironmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	defaultEnvironmentInsertCacheMut.RLock()
	cache, cached := defaultEnvironmentInsertCache[key]
	defaultEnvironmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			defaultEnvironmentAllColumns,
			defaultEnvironmentColumnsWithDefault,
			defaultEnvironmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(defaultEnvironmentType, defaultEnvironmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(defaultEnvironmentType, defaultEnvironmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"default_environment\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"default_environment\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into default_environment")
	}

	if !cached {
		defaultEnvironmentInsertCacheMut.Lock()
		defaultEnvironmentInsertCache[key] = cache
		defaultEnvironmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DefaultEnvironment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DefaultEnvironment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	defaultEnvironmentUpdateCacheMut.RLock()
	cache, cached := defaultEnvironmentUpdateCache[key]
	defaultEnvironmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			defaultEnvironmentAllColumns,
			defaultEnvironmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update default_environment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"default_environment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, defaultEnvironmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(defaultEnvironmentType, defaultEnvironmentMapping, append(wl, defaultEnvironmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update default_environment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for default_environment")
	}

	if !cached {
		defaultEnvironmentUpdateCacheMut.Lock()
		defaultEnvironmentUpdateCache[key] = cache
		defaultEnvironmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q defaultEnvironmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for default_environment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for default_environment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DefaultEnvironmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defaultEnvironmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"default_environment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, defaultEnvironmentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in defaultEnvironment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all defaultEnvironment")
	}
	return rowsAff, nil
}

// Delete deletes a single DefaultEnvironment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DefaultEnvironment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no DefaultEnvironment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), defaultEnvironmentPrimaryKeyMapping)
	sql := "DELETE FROM \"default_environment\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from default_environment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for default_environment")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q defaultEnvironmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no defaultEnvironmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from default_environment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for default_environment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DefaultEnvironmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(defaultEnvironmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defaultEnvironmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"default_environment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, defaultEnvironmentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from defaultEnvironment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for default_environment")
	}

	if len(defaultEnvironmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DefaultEnvironment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDefaultEnvironment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DefaultEnvironmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DefaultEnvironmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defaultEnvironmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"default_environment\".* FROM \"default_environment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, defaultEnvironmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in DefaultEnvironmentSlice")
	}

	*o = slice

	return nil
}

// DefaultEnvironmentExists checks if the DefaultEnvironment row exists.
func DefaultEnvironmentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"default_environment\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if default_environment exists")
	}

	return exists, nil
}

// DefaultEnvironment is an object representing the database table.
type DefaultEnvironmentDTO struct {
	ID          int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Index       int64  `boil:"index" json:"index" toml:"index" yaml:"index"`
	Name        string `boil:"name" json:"name" toml:"name" yaml:"name"`
	MaxReplicas int64  `boil:"max_replicas" json:"maxReplicas" toml:"maxReplicas" yaml:"maxReplicas"`
}

// DTO converts the DefaultEnvironment to a DefaultEnvironmentDTO struct.
func (o DefaultEnvironment) DTO() *DefaultEnvironmentDTO {
	return &DefaultEnvironmentDTO{
		ID:          o.ID,
		Index:       o.Index,
		Name:        o.Name,
		MaxReplicas: o.MaxReplicas,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DefaultEnvironment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no default_environment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(defaultEnvironmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	defaultEnvironmentUpsertCacheMut.RLock()
	cache, cached := defaultEnvironmentUpsertCache[key]
	defaultEnvironmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			defaultEnvironmentAllColumns,
			defaultEnvironmentColumnsWithDefault,
			defaultEnvironmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			defaultEnvironmentAllColumns,
			defaultEnvironmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert default_environment, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(defaultEnvironmentPrimaryKeyColumns))
			copy(conflict, defaultEnvironmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"default_environment\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(defaultEnvironmentType, defaultEnvironmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(defaultEnvironmentType, defaultEnvironmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert default_environment")
	}

	if !cached {
		defaultEnvironmentUpsertCacheMut.Lock()
		defaultEnvironmentUpsertCache[key] = cache
		defaultEnvironmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
