// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Action is an object representing the database table.
type Action struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeveloperID int64     `boil:"developer_id" json:"developerID" toml:"developerID" yaml:"developerID"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	DisplayName string    `boil:"display_name" json:"displayName" toml:"displayName" yaml:"displayName"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Public      bool      `boil:"public" json:"public" toml:"public" yaml:"public"`

	R *actionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L actionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActionColumns = struct {
	ID          string
	DeveloperID string
	CreatedAt   string
	CreatedByID string
	UpdatedAt   string
	UpdatedByID string
	Name        string
	DisplayName string
	Description string
	Public      string
}{
	ID:          "id",
	DeveloperID: "developer_id",
	CreatedAt:   "created_at",
	CreatedByID: "created_by_id",
	UpdatedAt:   "updated_at",
	UpdatedByID: "updated_by_id",
	Name:        "name",
	DisplayName: "display_name",
	Description: "description",
	Public:      "public",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ActionWhere = struct {
	ID          whereHelperint64
	DeveloperID whereHelperint64
	CreatedAt   whereHelpertime_Time
	CreatedByID whereHelperint64
	UpdatedAt   whereHelpertime_Time
	UpdatedByID whereHelperint64
	Name        whereHelperstring
	DisplayName whereHelperstring
	Description whereHelperstring
	Public      whereHelperbool
}{
	ID:          whereHelperint64{field: "\"action\".\"id\""},
	DeveloperID: whereHelperint64{field: "\"action\".\"developer_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"action\".\"created_at\""},
	CreatedByID: whereHelperint64{field: "\"action\".\"created_by_id\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"action\".\"updated_at\""},
	UpdatedByID: whereHelperint64{field: "\"action\".\"updated_by_id\""},
	Name:        whereHelperstring{field: "\"action\".\"name\""},
	DisplayName: whereHelperstring{field: "\"action\".\"display_name\""},
	Description: whereHelperstring{field: "\"action\".\"description\""},
	Public:      whereHelperbool{field: "\"action\".\"public\""},
}

// ActionRels is where relationship names are stored.
var ActionRels = struct {
	CreatedBy      string
	Developer      string
	UpdatedBy      string
	ActionVersions string
}{
	CreatedBy:      "CreatedBy",
	Developer:      "Developer",
	UpdatedBy:      "UpdatedBy",
	ActionVersions: "ActionVersions",
}

// actionR is where relationships are stored.
type actionR struct {
	CreatedBy      *User
	Developer      *Organization
	UpdatedBy      *User
	ActionVersions ActionVersionSlice
}

// NewStruct creates a new relationship struct
func (*actionR) NewStruct() *actionR {
	return &actionR{}
}

// actionL is where Load methods for each relationship are stored.
type actionL struct{}

var (
	actionAllColumns            = []string{"id", "developer_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "name", "display_name", "description", "public"}
	actionColumnsWithoutDefault = []string{"developer_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "name", "display_name", "description"}
	actionColumnsWithDefault    = []string{"id", "public"}
	actionPrimaryKeyColumns     = []string{"id"}
)

type (
	// ActionSlice is an alias for a slice of pointers to Action.
	// This should generally be used opposed to []Action.
	ActionSlice []*Action
	// ActionHook is the signature for custom Action hook methods
	ActionHook func(context.Context, boil.ContextExecutor, *Action) error

	actionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	actionType                 = reflect.TypeOf(&Action{})
	actionMapping              = queries.MakeStructMapping(actionType)
	actionPrimaryKeyMapping, _ = queries.BindMapping(actionType, actionMapping, actionPrimaryKeyColumns)
	actionInsertCacheMut       sync.RWMutex
	actionInsertCache          = make(map[string]insertCache)
	actionUpdateCacheMut       sync.RWMutex
	actionUpdateCache          = make(map[string]updateCache)
	actionUpsertCacheMut       sync.RWMutex
	actionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var actionBeforeInsertHooks []ActionHook
var actionBeforeUpdateHooks []ActionHook
var actionBeforeDeleteHooks []ActionHook
var actionBeforeUpsertHooks []ActionHook

var actionAfterInsertHooks []ActionHook
var actionAfterSelectHooks []ActionHook
var actionAfterUpdateHooks []ActionHook
var actionAfterDeleteHooks []ActionHook
var actionAfterUpsertHooks []ActionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Action) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Action) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Action) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Action) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Action) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Action) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Action) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Action) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Action) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActionHook registers your hook function for all future operations.
func AddActionHook(hookPoint boil.HookPoint, actionHook ActionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		actionBeforeInsertHooks = append(actionBeforeInsertHooks, actionHook)
	case boil.BeforeUpdateHook:
		actionBeforeUpdateHooks = append(actionBeforeUpdateHooks, actionHook)
	case boil.BeforeDeleteHook:
		actionBeforeDeleteHooks = append(actionBeforeDeleteHooks, actionHook)
	case boil.BeforeUpsertHook:
		actionBeforeUpsertHooks = append(actionBeforeUpsertHooks, actionHook)
	case boil.AfterInsertHook:
		actionAfterInsertHooks = append(actionAfterInsertHooks, actionHook)
	case boil.AfterSelectHook:
		actionAfterSelectHooks = append(actionAfterSelectHooks, actionHook)
	case boil.AfterUpdateHook:
		actionAfterUpdateHooks = append(actionAfterUpdateHooks, actionHook)
	case boil.AfterDeleteHook:
		actionAfterDeleteHooks = append(actionAfterDeleteHooks, actionHook)
	case boil.AfterUpsertHook:
		actionAfterUpsertHooks = append(actionAfterUpsertHooks, actionHook)
	}
}

// One returns a single action record from the query.
func (q actionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Action, error) {
	o := &Action{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for action")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Action records from the query.
func (q actionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActionSlice, error) {
	var o []*Action

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Action slice")
	}

	if len(actionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Action records in the query.
func (q actionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count action rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q actionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if action exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *Action) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Developer pointed to by the foreign key.
func (o *Action) Developer(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeveloperID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *Action) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ActionVersions retrieves all the action_version's ActionVersions with an executor.
func (o *Action) ActionVersions(mods ...qm.QueryMod) actionVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action_version\".\"action_id\"=?", o.ID),
	)

	query := ActionVersions(queryMods...)
	queries.SetFrom(query.Query, "\"action_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action_version\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAction interface{}, mods queries.Applicator) error {
	var slice []*Action
	var object *Action

	if singular {
		object = maybeAction.(*Action)
	} else {
		slice = *maybeAction.(*[]*Action)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(actionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByActions = append(foreign.R.CreatedByActions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByActions = append(foreign.R.CreatedByActions, local)
				break
			}
		}
	}

	return nil
}

// LoadDeveloper allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionL) LoadDeveloper(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAction interface{}, mods queries.Applicator) error {
	var slice []*Action
	var object *Action

	if singular {
		object = maybeAction.(*Action)
	} else {
		slice = *maybeAction.(*[]*Action)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionR{}
		}
		args = append(args, object.DeveloperID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionR{}
			}

			for _, a := range args {
				if a == obj.DeveloperID {
					continue Outer
				}
			}

			args = append(args, obj.DeveloperID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(actionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Developer = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.DeveloperActions = append(foreign.R.DeveloperActions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeveloperID == foreign.ID {
				local.R.Developer = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.DeveloperActions = append(foreign.R.DeveloperActions, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAction interface{}, mods queries.Applicator) error {
	var slice []*Action
	var object *Action

	if singular {
		object = maybeAction.(*Action)
	} else {
		slice = *maybeAction.(*[]*Action)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(actionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByActions = append(foreign.R.UpdatedByActions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByActions = append(foreign.R.UpdatedByActions, local)
				break
			}
		}
	}

	return nil
}

// LoadActionVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (actionL) LoadActionVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAction interface{}, mods queries.Applicator) error {
	var slice []*Action
	var object *Action

	if singular {
		object = maybeAction.(*Action)
	} else {
		slice = *maybeAction.(*[]*Action)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_version`), qm.WhereIn(`action_version.action_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action_version")
	}

	var resultSlice []*ActionVersion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action_version")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_version")
	}

	if len(actionVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActionVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionVersionR{}
			}
			foreign.R.Action = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ActionID {
				local.R.ActionVersions = append(local.R.ActionVersions, foreign)
				if foreign.R == nil {
					foreign.R = &actionVersionR{}
				}
				foreign.R.Action = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the action to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByActions.
func (o *Action) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &actionR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByActions: ActionSlice{o},
		}
	} else {
		related.R.CreatedByActions = append(related.R.CreatedByActions, o)
	}

	return nil
}

// SetDeveloper of the action to the related item.
// Sets o.R.Developer to related.
// Adds o to related.R.DeveloperActions.
func (o *Action) SetDeveloper(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"developer_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeveloperID = related.ID
	if o.R == nil {
		o.R = &actionR{
			Developer: related,
		}
	} else {
		o.R.Developer = related
	}

	if related.R == nil {
		related.R = &organizationR{
			DeveloperActions: ActionSlice{o},
		}
	} else {
		related.R.DeveloperActions = append(related.R.DeveloperActions, o)
	}

	return nil
}

// SetUpdatedBy of the action to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByActions.
func (o *Action) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &actionR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByActions: ActionSlice{o},
		}
	} else {
		related.R.UpdatedByActions = append(related.R.UpdatedByActions, o)
	}

	return nil
}

// AddActionVersions adds the given related objects to the existing relationships
// of the action, optionally inserting them as new records.
// Appends related to o.R.ActionVersions.
// Sets related.R.Action appropriately.
func (o *Action) AddActionVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ActionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action_version\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"action_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionVersionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ActionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &actionR{
			ActionVersions: related,
		}
	} else {
		o.R.ActionVersions = append(o.R.ActionVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionVersionR{
				Action: o,
			}
		} else {
			rel.R.Action = o
		}
	}
	return nil
}

// Actions retrieves all the records using an executor.
func Actions(mods ...qm.QueryMod) actionQuery {
	mods = append(mods, qm.From("\"action\""))
	return actionQuery{NewQuery(mods...)}
}

// FindAction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAction(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Action, error) {
	actionObj := &Action{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"action\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, actionObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from action")
	}

	return actionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Action) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no action provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	actionInsertCacheMut.RLock()
	cache, cached := actionInsertCache[key]
	actionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			actionAllColumns,
			actionColumnsWithDefault,
			actionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(actionType, actionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(actionType, actionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"action\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"action\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into action")
	}

	if !cached {
		actionInsertCacheMut.Lock()
		actionInsertCache[key] = cache
		actionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Action.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Action) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	actionUpdateCacheMut.RLock()
	cache, cached := actionUpdateCache[key]
	actionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			actionAllColumns,
			actionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update action, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"action\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, actionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(actionType, actionMapping, append(wl, actionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update action row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for action")
	}

	if !cached {
		actionUpdateCacheMut.Lock()
		actionUpdateCache[key] = cache
		actionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q actionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for action")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for action")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"action\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, actionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in action slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all action")
	}
	return rowsAff, nil
}

// Delete deletes a single Action record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Action) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Action provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), actionPrimaryKeyMapping)
	sql := "DELETE FROM \"action\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from action")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for action")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q actionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no actionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from action")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for action")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(actionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"action\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, actionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from action slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for action")
	}

	if len(actionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Action) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"action\".* FROM \"action\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, actionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ActionSlice")
	}

	*o = slice

	return nil
}

// ActionExists checks if the Action row exists.
func ActionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"action\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if action exists")
	}

	return exists, nil
}

// Action is an object representing the database table.
type ActionDTO struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeveloperID int64     `boil:"developer_id" json:"developerID" toml:"developerID" yaml:"developerID"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	DisplayName string    `boil:"display_name" json:"displayName" toml:"displayName" yaml:"displayName"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Public      bool      `boil:"public" json:"public" toml:"public" yaml:"public"`
}

// DTO converts the Action to a ActionDTO struct.
func (o Action) DTO() *ActionDTO {
	return &ActionDTO{
		ID:          o.ID,
		DeveloperID: o.DeveloperID,
		CreatedAt:   o.CreatedAt,
		CreatedByID: o.CreatedByID,
		UpdatedAt:   o.UpdatedAt,
		UpdatedByID: o.UpdatedByID,
		Name:        o.Name,
		DisplayName: o.DisplayName,
		Description: o.Description,
		Public:      o.Public,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Action) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no action provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	actionUpsertCacheMut.RLock()
	cache, cached := actionUpsertCache[key]
	actionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			actionAllColumns,
			actionColumnsWithDefault,
			actionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			actionAllColumns,
			actionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert action, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(actionPrimaryKeyColumns))
			copy(conflict, actionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"action\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(actionType, actionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(actionType, actionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert action")
	}

	if !cached {
		actionUpsertCacheMut.Lock()
		actionUpsertCache[key] = cache
		actionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
