// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DraftConfiguration is an object representing the database table.
type DraftConfiguration struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	OrganizationID int64     `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	Revision       int64     `boil:"revision" json:"revision" toml:"revision" yaml:"revision"`

	R *draftConfigurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L draftConfigurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DraftConfigurationColumns = struct {
	ID             string
	CreatedAt      string
	CreatedByID    string
	UpdatedAt      string
	UpdatedByID    string
	OrganizationID string
	Revision       string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	CreatedByID:    "created_by_id",
	UpdatedAt:      "updated_at",
	UpdatedByID:    "updated_by_id",
	OrganizationID: "organization_id",
	Revision:       "revision",
}

// Generated where

var DraftConfigurationWhere = struct {
	ID             whereHelperint64
	CreatedAt      whereHelpertime_Time
	CreatedByID    whereHelperint64
	UpdatedAt      whereHelpertime_Time
	UpdatedByID    whereHelperint64
	OrganizationID whereHelperint64
	Revision       whereHelperint64
}{
	ID:             whereHelperint64{field: "\"draft_configuration\".\"id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"draft_configuration\".\"created_at\""},
	CreatedByID:    whereHelperint64{field: "\"draft_configuration\".\"created_by_id\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"draft_configuration\".\"updated_at\""},
	UpdatedByID:    whereHelperint64{field: "\"draft_configuration\".\"updated_by_id\""},
	OrganizationID: whereHelperint64{field: "\"draft_configuration\".\"organization_id\""},
	Revision:       whereHelperint64{field: "\"draft_configuration\".\"revision\""},
}

// DraftConfigurationRels is where relationship names are stored.
var DraftConfigurationRels = struct {
	CreatedBy                 string
	Organization              string
	UpdatedBy                 string
	BaseDraftConfiguration    string
	TriggerDraftConfiguration string
	ActionDraftConfigurations string
	Pipelines                 string
}{
	CreatedBy:                 "CreatedBy",
	Organization:              "Organization",
	UpdatedBy:                 "UpdatedBy",
	BaseDraftConfiguration:    "BaseDraftConfiguration",
	TriggerDraftConfiguration: "TriggerDraftConfiguration",
	ActionDraftConfigurations: "ActionDraftConfigurations",
	Pipelines:                 "Pipelines",
}

// draftConfigurationR is where relationships are stored.
type draftConfigurationR struct {
	CreatedBy                 *User
	Organization              *Organization
	UpdatedBy                 *User
	BaseDraftConfiguration    *BaseDraftConfiguration
	TriggerDraftConfiguration *TriggerDraftConfiguration
	ActionDraftConfigurations ActionDraftConfigurationSlice
	Pipelines                 PipelineSlice
}

// NewStruct creates a new relationship struct
func (*draftConfigurationR) NewStruct() *draftConfigurationR {
	return &draftConfigurationR{}
}

// draftConfigurationL is where Load methods for each relationship are stored.
type draftConfigurationL struct{}

var (
	draftConfigurationAllColumns            = []string{"id", "created_at", "created_by_id", "updated_at", "updated_by_id", "organization_id", "revision"}
	draftConfigurationColumnsWithoutDefault = []string{"created_at", "created_by_id", "updated_at", "updated_by_id", "organization_id", "revision"}
	draftConfigurationColumnsWithDefault    = []string{"id"}
	draftConfigurationPrimaryKeyColumns     = []string{"id"}
)

type (
	// DraftConfigurationSlice is an alias for a slice of pointers to DraftConfiguration.
	// This should generally be used opposed to []DraftConfiguration.
	DraftConfigurationSlice []*DraftConfiguration
	// DraftConfigurationHook is the signature for custom DraftConfiguration hook methods
	DraftConfigurationHook func(context.Context, boil.ContextExecutor, *DraftConfiguration) error

	draftConfigurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	draftConfigurationType                 = reflect.TypeOf(&DraftConfiguration{})
	draftConfigurationMapping              = queries.MakeStructMapping(draftConfigurationType)
	draftConfigurationPrimaryKeyMapping, _ = queries.BindMapping(draftConfigurationType, draftConfigurationMapping, draftConfigurationPrimaryKeyColumns)
	draftConfigurationInsertCacheMut       sync.RWMutex
	draftConfigurationInsertCache          = make(map[string]insertCache)
	draftConfigurationUpdateCacheMut       sync.RWMutex
	draftConfigurationUpdateCache          = make(map[string]updateCache)
	draftConfigurationUpsertCacheMut       sync.RWMutex
	draftConfigurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var draftConfigurationBeforeInsertHooks []DraftConfigurationHook
var draftConfigurationBeforeUpdateHooks []DraftConfigurationHook
var draftConfigurationBeforeDeleteHooks []DraftConfigurationHook
var draftConfigurationBeforeUpsertHooks []DraftConfigurationHook

var draftConfigurationAfterInsertHooks []DraftConfigurationHook
var draftConfigurationAfterSelectHooks []DraftConfigurationHook
var draftConfigurationAfterUpdateHooks []DraftConfigurationHook
var draftConfigurationAfterDeleteHooks []DraftConfigurationHook
var draftConfigurationAfterUpsertHooks []DraftConfigurationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DraftConfiguration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DraftConfiguration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DraftConfiguration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DraftConfiguration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DraftConfiguration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DraftConfiguration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DraftConfiguration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DraftConfiguration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DraftConfiguration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range draftConfigurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDraftConfigurationHook registers your hook function for all future operations.
func AddDraftConfigurationHook(hookPoint boil.HookPoint, draftConfigurationHook DraftConfigurationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		draftConfigurationBeforeInsertHooks = append(draftConfigurationBeforeInsertHooks, draftConfigurationHook)
	case boil.BeforeUpdateHook:
		draftConfigurationBeforeUpdateHooks = append(draftConfigurationBeforeUpdateHooks, draftConfigurationHook)
	case boil.BeforeDeleteHook:
		draftConfigurationBeforeDeleteHooks = append(draftConfigurationBeforeDeleteHooks, draftConfigurationHook)
	case boil.BeforeUpsertHook:
		draftConfigurationBeforeUpsertHooks = append(draftConfigurationBeforeUpsertHooks, draftConfigurationHook)
	case boil.AfterInsertHook:
		draftConfigurationAfterInsertHooks = append(draftConfigurationAfterInsertHooks, draftConfigurationHook)
	case boil.AfterSelectHook:
		draftConfigurationAfterSelectHooks = append(draftConfigurationAfterSelectHooks, draftConfigurationHook)
	case boil.AfterUpdateHook:
		draftConfigurationAfterUpdateHooks = append(draftConfigurationAfterUpdateHooks, draftConfigurationHook)
	case boil.AfterDeleteHook:
		draftConfigurationAfterDeleteHooks = append(draftConfigurationAfterDeleteHooks, draftConfigurationHook)
	case boil.AfterUpsertHook:
		draftConfigurationAfterUpsertHooks = append(draftConfigurationAfterUpsertHooks, draftConfigurationHook)
	}
}

// One returns a single draftConfiguration record from the query.
func (q draftConfigurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DraftConfiguration, error) {
	o := &DraftConfiguration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for draft_configuration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DraftConfiguration records from the query.
func (q draftConfigurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DraftConfigurationSlice, error) {
	var o []*DraftConfiguration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to DraftConfiguration slice")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DraftConfiguration records in the query.
func (q draftConfigurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count draft_configuration rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q draftConfigurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if draft_configuration exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *DraftConfiguration) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Organization pointed to by the foreign key.
func (o *DraftConfiguration) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *DraftConfiguration) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// BaseDraftConfiguration pointed to by the foreign key.
func (o *DraftConfiguration) BaseDraftConfiguration(mods ...qm.QueryMod) baseDraftConfigurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"draft_configuration_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := BaseDraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"base_draft_configuration\"")

	return query
}

// TriggerDraftConfiguration pointed to by the foreign key.
func (o *DraftConfiguration) TriggerDraftConfiguration(mods ...qm.QueryMod) triggerDraftConfigurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"draft_configuration_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := TriggerDraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"trigger_draft_configuration\"")

	return query
}

// ActionDraftConfigurations retrieves all the action_draft_configuration's ActionDraftConfigurations with an executor.
func (o *DraftConfiguration) ActionDraftConfigurations(mods ...qm.QueryMod) actionDraftConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action_draft_configuration\".\"draft_configuration_id\"=?", o.ID),
	)

	query := ActionDraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"action_draft_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action_draft_configuration\".*"})
	}

	return query
}

// Pipelines retrieves all the pipeline's Pipelines with an executor.
func (o *DraftConfiguration) Pipelines(mods ...qm.QueryMod) pipelineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pipeline\".\"draft_configuration_id\"=?", o.ID),
	)

	query := Pipelines(queryMods...)
	queries.SetFrom(query.Query, "\"pipeline\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"pipeline\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (draftConfigurationL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*DraftConfiguration
	var object *DraftConfiguration

	if singular {
		object = maybeDraftConfiguration.(*DraftConfiguration)
	} else {
		slice = *maybeDraftConfiguration.(*[]*DraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &draftConfigurationR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &draftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByDraftConfigurations = append(foreign.R.CreatedByDraftConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByDraftConfigurations = append(foreign.R.CreatedByDraftConfigurations, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (draftConfigurationL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*DraftConfiguration
	var object *DraftConfiguration

	if singular {
		object = maybeDraftConfiguration.(*DraftConfiguration)
	} else {
		slice = *maybeDraftConfiguration.(*[]*DraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &draftConfigurationR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &draftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.DraftConfigurations = append(foreign.R.DraftConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.DraftConfigurations = append(foreign.R.DraftConfigurations, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (draftConfigurationL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*DraftConfiguration
	var object *DraftConfiguration

	if singular {
		object = maybeDraftConfiguration.(*DraftConfiguration)
	} else {
		slice = *maybeDraftConfiguration.(*[]*DraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &draftConfigurationR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &draftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByDraftConfigurations = append(foreign.R.UpdatedByDraftConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByDraftConfigurations = append(foreign.R.UpdatedByDraftConfigurations, local)
				break
			}
		}
	}

	return nil
}

// LoadBaseDraftConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (draftConfigurationL) LoadBaseDraftConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*DraftConfiguration
	var object *DraftConfiguration

	if singular {
		object = maybeDraftConfiguration.(*DraftConfiguration)
	} else {
		slice = *maybeDraftConfiguration.(*[]*DraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &draftConfigurationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &draftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`base_draft_configuration`), qm.WhereIn(`base_draft_configuration.draft_configuration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BaseDraftConfiguration")
	}

	var resultSlice []*BaseDraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BaseDraftConfiguration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for base_draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_draft_configuration")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseDraftConfiguration = foreign
		if foreign.R == nil {
			foreign.R = &baseDraftConfigurationR{}
		}
		foreign.R.DraftConfiguration = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.DraftConfigurationID {
				local.R.BaseDraftConfiguration = foreign
				if foreign.R == nil {
					foreign.R = &baseDraftConfigurationR{}
				}
				foreign.R.DraftConfiguration = local
				break
			}
		}
	}

	return nil
}

// LoadTriggerDraftConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (draftConfigurationL) LoadTriggerDraftConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*DraftConfiguration
	var object *DraftConfiguration

	if singular {
		object = maybeDraftConfiguration.(*DraftConfiguration)
	} else {
		slice = *maybeDraftConfiguration.(*[]*DraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &draftConfigurationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &draftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`trigger_draft_configuration`), qm.WhereIn(`trigger_draft_configuration.draft_configuration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TriggerDraftConfiguration")
	}

	var resultSlice []*TriggerDraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TriggerDraftConfiguration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for trigger_draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trigger_draft_configuration")
	}

	if len(draftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TriggerDraftConfiguration = foreign
		if foreign.R == nil {
			foreign.R = &triggerDraftConfigurationR{}
		}
		foreign.R.DraftConfiguration = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.DraftConfigurationID {
				local.R.TriggerDraftConfiguration = foreign
				if foreign.R == nil {
					foreign.R = &triggerDraftConfigurationR{}
				}
				foreign.R.DraftConfiguration = local
				break
			}
		}
	}

	return nil
}

// LoadActionDraftConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (draftConfigurationL) LoadActionDraftConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*DraftConfiguration
	var object *DraftConfiguration

	if singular {
		object = maybeDraftConfiguration.(*DraftConfiguration)
	} else {
		slice = *maybeDraftConfiguration.(*[]*DraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &draftConfigurationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &draftConfigurationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_draft_configuration`), qm.WhereIn(`action_draft_configuration.draft_configuration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action_draft_configuration")
	}

	var resultSlice []*ActionDraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action_draft_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action_draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_draft_configuration")
	}

	if len(actionDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActionDraftConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionDraftConfigurationR{}
			}
			foreign.R.DraftConfiguration = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DraftConfigurationID {
				local.R.ActionDraftConfigurations = append(local.R.ActionDraftConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &actionDraftConfigurationR{}
				}
				foreign.R.DraftConfiguration = local
				break
			}
		}
	}

	return nil
}

// LoadPipelines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (draftConfigurationL) LoadPipelines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDraftConfiguration interface{}, mods queries.Applicator) error {
	var slice []*DraftConfiguration
	var object *DraftConfiguration

	if singular {
		object = maybeDraftConfiguration.(*DraftConfiguration)
	} else {
		slice = *maybeDraftConfiguration.(*[]*DraftConfiguration)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &draftConfigurationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &draftConfigurationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pipeline`), qm.WhereIn(`pipeline.draft_configuration_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pipeline")
	}

	var resultSlice []*Pipeline
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pipeline")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pipeline")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pipeline")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Pipelines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pipelineR{}
			}
			foreign.R.DraftConfiguration = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DraftConfigurationID) {
				local.R.Pipelines = append(local.R.Pipelines, foreign)
				if foreign.R == nil {
					foreign.R = &pipelineR{}
				}
				foreign.R.DraftConfiguration = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the draftConfiguration to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByDraftConfigurations.
func (o *DraftConfiguration) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, draftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &draftConfigurationR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByDraftConfigurations: DraftConfigurationSlice{o},
		}
	} else {
		related.R.CreatedByDraftConfigurations = append(related.R.CreatedByDraftConfigurations, o)
	}

	return nil
}

// SetOrganization of the draftConfiguration to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.DraftConfigurations.
func (o *DraftConfiguration) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, draftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &draftConfigurationR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			DraftConfigurations: DraftConfigurationSlice{o},
		}
	} else {
		related.R.DraftConfigurations = append(related.R.DraftConfigurations, o)
	}

	return nil
}

// SetUpdatedBy of the draftConfiguration to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByDraftConfigurations.
func (o *DraftConfiguration) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, draftConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &draftConfigurationR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByDraftConfigurations: DraftConfigurationSlice{o},
		}
	} else {
		related.R.UpdatedByDraftConfigurations = append(related.R.UpdatedByDraftConfigurations, o)
	}

	return nil
}

// SetBaseDraftConfiguration of the draftConfiguration to the related item.
// Sets o.R.BaseDraftConfiguration to related.
// Adds o to related.R.DraftConfiguration.
func (o *DraftConfiguration) SetBaseDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BaseDraftConfiguration) error {
	var err error

	if insert {
		related.DraftConfigurationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"base_draft_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"draft_configuration_id"}),
			strmangle.WhereClause("\"", "\"", 2, baseDraftConfigurationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.DraftConfigurationID = o.ID

	}

	if o.R == nil {
		o.R = &draftConfigurationR{
			BaseDraftConfiguration: related,
		}
	} else {
		o.R.BaseDraftConfiguration = related
	}

	if related.R == nil {
		related.R = &baseDraftConfigurationR{
			DraftConfiguration: o,
		}
	} else {
		related.R.DraftConfiguration = o
	}
	return nil
}

// SetTriggerDraftConfiguration of the draftConfiguration to the related item.
// Sets o.R.TriggerDraftConfiguration to related.
// Adds o to related.R.DraftConfiguration.
func (o *DraftConfiguration) SetTriggerDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TriggerDraftConfiguration) error {
	var err error

	if insert {
		related.DraftConfigurationID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"trigger_draft_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"draft_configuration_id"}),
			strmangle.WhereClause("\"", "\"", 2, triggerDraftConfigurationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.DraftConfigurationID = o.ID

	}

	if o.R == nil {
		o.R = &draftConfigurationR{
			TriggerDraftConfiguration: related,
		}
	} else {
		o.R.TriggerDraftConfiguration = related
	}

	if related.R == nil {
		related.R = &triggerDraftConfigurationR{
			DraftConfiguration: o,
		}
	} else {
		related.R.DraftConfiguration = o
	}
	return nil
}

// AddActionDraftConfigurations adds the given related objects to the existing relationships
// of the draft_configuration, optionally inserting them as new records.
// Appends related to o.R.ActionDraftConfigurations.
// Sets related.R.DraftConfiguration appropriately.
func (o *DraftConfiguration) AddActionDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionDraftConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DraftConfigurationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action_draft_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"draft_configuration_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionDraftConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DraftConfigurationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &draftConfigurationR{
			ActionDraftConfigurations: related,
		}
	} else {
		o.R.ActionDraftConfigurations = append(o.R.ActionDraftConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionDraftConfigurationR{
				DraftConfiguration: o,
			}
		} else {
			rel.R.DraftConfiguration = o
		}
	}
	return nil
}

// AddPipelines adds the given related objects to the existing relationships
// of the draft_configuration, optionally inserting them as new records.
// Appends related to o.R.Pipelines.
// Sets related.R.DraftConfiguration appropriately.
func (o *DraftConfiguration) AddPipelines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pipeline) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DraftConfigurationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pipeline\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"draft_configuration_id"}),
				strmangle.WhereClause("\"", "\"", 2, pipelinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DraftConfigurationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &draftConfigurationR{
			Pipelines: related,
		}
	} else {
		o.R.Pipelines = append(o.R.Pipelines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pipelineR{
				DraftConfiguration: o,
			}
		} else {
			rel.R.DraftConfiguration = o
		}
	}
	return nil
}

// SetPipelines removes all previously related items of the
// draft_configuration replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DraftConfiguration's Pipelines accordingly.
// Replaces o.R.Pipelines with related.
// Sets related.R.DraftConfiguration's Pipelines accordingly.
func (o *DraftConfiguration) SetPipelines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pipeline) error {
	query := "update \"pipeline\" set \"draft_configuration_id\" = null where \"draft_configuration_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Pipelines {
			queries.SetScanner(&rel.DraftConfigurationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DraftConfiguration = nil
		}

		o.R.Pipelines = nil
	}
	return o.AddPipelines(ctx, exec, insert, related...)
}

// RemovePipelines relationships from objects passed in.
// Removes related items from R.Pipelines (uses pointer comparison, removal does not keep order)
// Sets related.R.DraftConfiguration.
func (o *DraftConfiguration) RemovePipelines(ctx context.Context, exec boil.ContextExecutor, related ...*Pipeline) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DraftConfigurationID, nil)
		if rel.R != nil {
			rel.R.DraftConfiguration = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("draft_configuration_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Pipelines {
			if rel != ri {
				continue
			}

			ln := len(o.R.Pipelines)
			if ln > 1 && i < ln-1 {
				o.R.Pipelines[i] = o.R.Pipelines[ln-1]
			}
			o.R.Pipelines = o.R.Pipelines[:ln-1]
			break
		}
	}

	return nil
}

// DraftConfigurations retrieves all the records using an executor.
func DraftConfigurations(mods ...qm.QueryMod) draftConfigurationQuery {
	mods = append(mods, qm.From("\"draft_configuration\""))
	return draftConfigurationQuery{NewQuery(mods...)}
}

// FindDraftConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DraftConfiguration, error) {
	draftConfigurationObj := &DraftConfiguration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"draft_configuration\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, draftConfigurationObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from draft_configuration")
	}

	return draftConfigurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DraftConfiguration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no draft_configuration provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(draftConfigurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	draftConfigurationInsertCacheMut.RLock()
	cache, cached := draftConfigurationInsertCache[key]
	draftConfigurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			draftConfigurationAllColumns,
			draftConfigurationColumnsWithDefault,
			draftConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(draftConfigurationType, draftConfigurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(draftConfigurationType, draftConfigurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"draft_configuration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"draft_configuration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into draft_configuration")
	}

	if !cached {
		draftConfigurationInsertCacheMut.Lock()
		draftConfigurationInsertCache[key] = cache
		draftConfigurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DraftConfiguration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DraftConfiguration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	draftConfigurationUpdateCacheMut.RLock()
	cache, cached := draftConfigurationUpdateCache[key]
	draftConfigurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			draftConfigurationAllColumns,
			draftConfigurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update draft_configuration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"draft_configuration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, draftConfigurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(draftConfigurationType, draftConfigurationMapping, append(wl, draftConfigurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update draft_configuration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for draft_configuration")
	}

	if !cached {
		draftConfigurationUpdateCacheMut.Lock()
		draftConfigurationUpdateCache[key] = cache
		draftConfigurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q draftConfigurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for draft_configuration")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DraftConfigurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), draftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"draft_configuration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, draftConfigurationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in draftConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all draftConfiguration")
	}
	return rowsAff, nil
}

// Delete deletes a single DraftConfiguration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DraftConfiguration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no DraftConfiguration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), draftConfigurationPrimaryKeyMapping)
	sql := "DELETE FROM \"draft_configuration\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for draft_configuration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q draftConfigurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no draftConfigurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from draft_configuration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for draft_configuration")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DraftConfigurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(draftConfigurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), draftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"draft_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, draftConfigurationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from draftConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for draft_configuration")
	}

	if len(draftConfigurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DraftConfiguration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDraftConfiguration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DraftConfigurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DraftConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), draftConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"draft_configuration\".* FROM \"draft_configuration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, draftConfigurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in DraftConfigurationSlice")
	}

	*o = slice

	return nil
}

// DraftConfigurationExists checks if the DraftConfiguration row exists.
func DraftConfigurationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"draft_configuration\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if draft_configuration exists")
	}

	return exists, nil
}

// DraftConfiguration is an object representing the database table.
type DraftConfigurationDTO struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	OrganizationID int64     `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	Revision       int64     `boil:"revision" json:"revision" toml:"revision" yaml:"revision"`
}

// DTO converts the DraftConfiguration to a DraftConfigurationDTO struct.
func (o DraftConfiguration) DTO() *DraftConfigurationDTO {
	return &DraftConfigurationDTO{
		ID:             o.ID,
		CreatedAt:      o.CreatedAt,
		CreatedByID:    o.CreatedByID,
		UpdatedAt:      o.UpdatedAt,
		UpdatedByID:    o.UpdatedByID,
		OrganizationID: o.OrganizationID,
		Revision:       o.Revision,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DraftConfiguration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no draft_configuration provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(draftConfigurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	draftConfigurationUpsertCacheMut.RLock()
	cache, cached := draftConfigurationUpsertCache[key]
	draftConfigurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			draftConfigurationAllColumns,
			draftConfigurationColumnsWithDefault,
			draftConfigurationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			draftConfigurationAllColumns,
			draftConfigurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert draft_configuration, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(draftConfigurationPrimaryKeyColumns))
			copy(conflict, draftConfigurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"draft_configuration\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(draftConfigurationType, draftConfigurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(draftConfigurationType, draftConfigurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert draft_configuration")
	}

	if !cached {
		draftConfigurationUpsertCacheMut.Lock()
		draftConfigurationUpsertCache[key] = cache
		draftConfigurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
