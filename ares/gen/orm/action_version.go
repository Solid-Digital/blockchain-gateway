// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ActionVersion is an object representing the database table.
type ActionVersion struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ActionID      int64     `boil:"action_id" json:"actionID" toml:"actionID" yaml:"actionID"`
	CreatedAt     time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID   int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID   int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Version       string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	Public        bool      `boil:"public" json:"public" toml:"public" yaml:"public"`
	ExampleConfig string    `boil:"example_config" json:"exampleConfig" toml:"exampleConfig" yaml:"exampleConfig"`
	Description   string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Readme        string    `boil:"readme" json:"readme" toml:"readme" yaml:"readme"`
	FileName      string    `boil:"file_name" json:"fileName" toml:"fileName" yaml:"fileName"`
	FileID        string    `boil:"file_id" json:"fileID" toml:"fileID" yaml:"fileID"`
	InputSchema   null.JSON `boil:"input_schema" json:"inputSchema,omitempty" toml:"inputSchema" yaml:"inputSchema,omitempty"`
	OutputSchema  null.JSON `boil:"output_schema" json:"outputSchema,omitempty" toml:"outputSchema" yaml:"outputSchema,omitempty"`

	R *actionVersionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L actionVersionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ActionVersionColumns = struct {
	ID            string
	ActionID      string
	CreatedAt     string
	CreatedByID   string
	UpdatedAt     string
	UpdatedByID   string
	Version       string
	Public        string
	ExampleConfig string
	Description   string
	Readme        string
	FileName      string
	FileID        string
	InputSchema   string
	OutputSchema  string
}{
	ID:            "id",
	ActionID:      "action_id",
	CreatedAt:     "created_at",
	CreatedByID:   "created_by_id",
	UpdatedAt:     "updated_at",
	UpdatedByID:   "updated_by_id",
	Version:       "version",
	Public:        "public",
	ExampleConfig: "example_config",
	Description:   "description",
	Readme:        "readme",
	FileName:      "file_name",
	FileID:        "file_id",
	InputSchema:   "input_schema",
	OutputSchema:  "output_schema",
}

// Generated where

var ActionVersionWhere = struct {
	ID            whereHelperint64
	ActionID      whereHelperint64
	CreatedAt     whereHelpertime_Time
	CreatedByID   whereHelperint64
	UpdatedAt     whereHelpertime_Time
	UpdatedByID   whereHelperint64
	Version       whereHelperstring
	Public        whereHelperbool
	ExampleConfig whereHelperstring
	Description   whereHelperstring
	Readme        whereHelperstring
	FileName      whereHelperstring
	FileID        whereHelperstring
	InputSchema   whereHelpernull_JSON
	OutputSchema  whereHelpernull_JSON
}{
	ID:            whereHelperint64{field: "\"action_version\".\"id\""},
	ActionID:      whereHelperint64{field: "\"action_version\".\"action_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"action_version\".\"created_at\""},
	CreatedByID:   whereHelperint64{field: "\"action_version\".\"created_by_id\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"action_version\".\"updated_at\""},
	UpdatedByID:   whereHelperint64{field: "\"action_version\".\"updated_by_id\""},
	Version:       whereHelperstring{field: "\"action_version\".\"version\""},
	Public:        whereHelperbool{field: "\"action_version\".\"public\""},
	ExampleConfig: whereHelperstring{field: "\"action_version\".\"example_config\""},
	Description:   whereHelperstring{field: "\"action_version\".\"description\""},
	Readme:        whereHelperstring{field: "\"action_version\".\"readme\""},
	FileName:      whereHelperstring{field: "\"action_version\".\"file_name\""},
	FileID:        whereHelperstring{field: "\"action_version\".\"file_id\""},
	InputSchema:   whereHelpernull_JSON{field: "\"action_version\".\"input_schema\""},
	OutputSchema:  whereHelpernull_JSON{field: "\"action_version\".\"output_schema\""},
}

// ActionVersionRels is where relationship names are stored.
var ActionVersionRels = struct {
	Action                           string
	CreatedBy                        string
	UpdatedBy                        string
	VersionActionConfigurations      string
	VersionActionDraftConfigurations string
	SupportedBaseVersions            string
}{
	Action:                           "Action",
	CreatedBy:                        "CreatedBy",
	UpdatedBy:                        "UpdatedBy",
	VersionActionConfigurations:      "VersionActionConfigurations",
	VersionActionDraftConfigurations: "VersionActionDraftConfigurations",
	SupportedBaseVersions:            "SupportedBaseVersions",
}

// actionVersionR is where relationships are stored.
type actionVersionR struct {
	Action                           *Action
	CreatedBy                        *User
	UpdatedBy                        *User
	VersionActionConfigurations      ActionConfigurationSlice
	VersionActionDraftConfigurations ActionDraftConfigurationSlice
	SupportedBaseVersions            BaseVersionSlice
}

// NewStruct creates a new relationship struct
func (*actionVersionR) NewStruct() *actionVersionR {
	return &actionVersionR{}
}

// actionVersionL is where Load methods for each relationship are stored.
type actionVersionL struct{}

var (
	actionVersionAllColumns            = []string{"id", "action_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "version", "public", "example_config", "description", "readme", "file_name", "file_id", "input_schema", "output_schema"}
	actionVersionColumnsWithoutDefault = []string{"action_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "version", "example_config", "description", "readme", "file_name", "file_id", "input_schema", "output_schema"}
	actionVersionColumnsWithDefault    = []string{"id", "public"}
	actionVersionPrimaryKeyColumns     = []string{"id"}
)

type (
	// ActionVersionSlice is an alias for a slice of pointers to ActionVersion.
	// This should generally be used opposed to []ActionVersion.
	ActionVersionSlice []*ActionVersion
	// ActionVersionHook is the signature for custom ActionVersion hook methods
	ActionVersionHook func(context.Context, boil.ContextExecutor, *ActionVersion) error

	actionVersionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	actionVersionType                 = reflect.TypeOf(&ActionVersion{})
	actionVersionMapping              = queries.MakeStructMapping(actionVersionType)
	actionVersionPrimaryKeyMapping, _ = queries.BindMapping(actionVersionType, actionVersionMapping, actionVersionPrimaryKeyColumns)
	actionVersionInsertCacheMut       sync.RWMutex
	actionVersionInsertCache          = make(map[string]insertCache)
	actionVersionUpdateCacheMut       sync.RWMutex
	actionVersionUpdateCache          = make(map[string]updateCache)
	actionVersionUpsertCacheMut       sync.RWMutex
	actionVersionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var actionVersionBeforeInsertHooks []ActionVersionHook
var actionVersionBeforeUpdateHooks []ActionVersionHook
var actionVersionBeforeDeleteHooks []ActionVersionHook
var actionVersionBeforeUpsertHooks []ActionVersionHook

var actionVersionAfterInsertHooks []ActionVersionHook
var actionVersionAfterSelectHooks []ActionVersionHook
var actionVersionAfterUpdateHooks []ActionVersionHook
var actionVersionAfterDeleteHooks []ActionVersionHook
var actionVersionAfterUpsertHooks []ActionVersionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ActionVersion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ActionVersion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ActionVersion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ActionVersion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ActionVersion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActionVersion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ActionVersion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ActionVersion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ActionVersion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actionVersionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActionVersionHook registers your hook function for all future operations.
func AddActionVersionHook(hookPoint boil.HookPoint, actionVersionHook ActionVersionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		actionVersionBeforeInsertHooks = append(actionVersionBeforeInsertHooks, actionVersionHook)
	case boil.BeforeUpdateHook:
		actionVersionBeforeUpdateHooks = append(actionVersionBeforeUpdateHooks, actionVersionHook)
	case boil.BeforeDeleteHook:
		actionVersionBeforeDeleteHooks = append(actionVersionBeforeDeleteHooks, actionVersionHook)
	case boil.BeforeUpsertHook:
		actionVersionBeforeUpsertHooks = append(actionVersionBeforeUpsertHooks, actionVersionHook)
	case boil.AfterInsertHook:
		actionVersionAfterInsertHooks = append(actionVersionAfterInsertHooks, actionVersionHook)
	case boil.AfterSelectHook:
		actionVersionAfterSelectHooks = append(actionVersionAfterSelectHooks, actionVersionHook)
	case boil.AfterUpdateHook:
		actionVersionAfterUpdateHooks = append(actionVersionAfterUpdateHooks, actionVersionHook)
	case boil.AfterDeleteHook:
		actionVersionAfterDeleteHooks = append(actionVersionAfterDeleteHooks, actionVersionHook)
	case boil.AfterUpsertHook:
		actionVersionAfterUpsertHooks = append(actionVersionAfterUpsertHooks, actionVersionHook)
	}
}

// One returns a single actionVersion record from the query.
func (q actionVersionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActionVersion, error) {
	o := &ActionVersion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for action_version")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActionVersion records from the query.
func (q actionVersionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActionVersionSlice, error) {
	var o []*ActionVersion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ActionVersion slice")
	}

	if len(actionVersionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActionVersion records in the query.
func (q actionVersionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count action_version rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q actionVersionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if action_version exists")
	}

	return count > 0, nil
}

// Action pointed to by the foreign key.
func (o *ActionVersion) Action(mods ...qm.QueryMod) actionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ActionID),
	}

	queryMods = append(queryMods, mods...)

	query := Actions(queryMods...)
	queries.SetFrom(query.Query, "\"action\"")

	return query
}

// CreatedBy pointed to by the foreign key.
func (o *ActionVersion) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *ActionVersion) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// VersionActionConfigurations retrieves all the action_configuration's ActionConfigurations with an executor via version_id column.
func (o *ActionVersion) VersionActionConfigurations(mods ...qm.QueryMod) actionConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action_configuration\".\"version_id\"=?", o.ID),
	)

	query := ActionConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"action_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action_configuration\".*"})
	}

	return query
}

// VersionActionDraftConfigurations retrieves all the action_draft_configuration's ActionDraftConfigurations with an executor via version_id column.
func (o *ActionVersion) VersionActionDraftConfigurations(mods ...qm.QueryMod) actionDraftConfigurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"action_draft_configuration\".\"version_id\"=?", o.ID),
	)

	query := ActionDraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"action_draft_configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"action_draft_configuration\".*"})
	}

	return query
}

// SupportedBaseVersions retrieves all the base_version's BaseVersions with an executor via id column.
func (o *ActionVersion) SupportedBaseVersions(mods ...qm.QueryMod) baseVersionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"action_version_supported_bases\" on \"base_version\".\"id\" = \"action_version_supported_bases\".\"supported_id\""),
		qm.Where("\"action_version_supported_bases\".\"action_version_id\"=?", o.ID),
	)

	query := BaseVersions(queryMods...)
	queries.SetFrom(query.Query, "\"base_version\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"base_version\".*"})
	}

	return query
}

// LoadAction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionVersionL) LoadAction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionVersion interface{}, mods queries.Applicator) error {
	var slice []*ActionVersion
	var object *ActionVersion

	if singular {
		object = maybeActionVersion.(*ActionVersion)
	} else {
		slice = *maybeActionVersion.(*[]*ActionVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionVersionR{}
		}
		args = append(args, object.ActionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionVersionR{}
			}

			for _, a := range args {
				if a == obj.ActionID {
					continue Outer
				}
			}

			args = append(args, obj.ActionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action`), qm.WhereIn(`action.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Action")
	}

	var resultSlice []*Action
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Action")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for action")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action")
	}

	if len(actionVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Action = foreign
		if foreign.R == nil {
			foreign.R = &actionR{}
		}
		foreign.R.ActionVersions = append(foreign.R.ActionVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ActionID == foreign.ID {
				local.R.Action = foreign
				if foreign.R == nil {
					foreign.R = &actionR{}
				}
				foreign.R.ActionVersions = append(foreign.R.ActionVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionVersionL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionVersion interface{}, mods queries.Applicator) error {
	var slice []*ActionVersion
	var object *ActionVersion

	if singular {
		object = maybeActionVersion.(*ActionVersion)
	} else {
		slice = *maybeActionVersion.(*[]*ActionVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionVersionR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionVersionR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(actionVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByActionVersions = append(foreign.R.CreatedByActionVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByActionVersions = append(foreign.R.CreatedByActionVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (actionVersionL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionVersion interface{}, mods queries.Applicator) error {
	var slice []*ActionVersion
	var object *ActionVersion

	if singular {
		object = maybeActionVersion.(*ActionVersion)
	} else {
		slice = *maybeActionVersion.(*[]*ActionVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionVersionR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionVersionR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(actionVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByActionVersions = append(foreign.R.UpdatedByActionVersions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByActionVersions = append(foreign.R.UpdatedByActionVersions, local)
				break
			}
		}
	}

	return nil
}

// LoadVersionActionConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (actionVersionL) LoadVersionActionConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionVersion interface{}, mods queries.Applicator) error {
	var slice []*ActionVersion
	var object *ActionVersion

	if singular {
		object = maybeActionVersion.(*ActionVersion)
	} else {
		slice = *maybeActionVersion.(*[]*ActionVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionVersionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_configuration`), qm.WhereIn(`action_configuration.version_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action_configuration")
	}

	var resultSlice []*ActionConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_configuration")
	}

	if len(actionConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VersionActionConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionConfigurationR{}
			}
			foreign.R.Version = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VersionID {
				local.R.VersionActionConfigurations = append(local.R.VersionActionConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &actionConfigurationR{}
				}
				foreign.R.Version = local
				break
			}
		}
	}

	return nil
}

// LoadVersionActionDraftConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (actionVersionL) LoadVersionActionDraftConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionVersion interface{}, mods queries.Applicator) error {
	var slice []*ActionVersion
	var object *ActionVersion

	if singular {
		object = maybeActionVersion.(*ActionVersion)
	} else {
		slice = *maybeActionVersion.(*[]*ActionVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionVersionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`action_draft_configuration`), qm.WhereIn(`action_draft_configuration.version_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load action_draft_configuration")
	}

	var resultSlice []*ActionDraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice action_draft_configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on action_draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for action_draft_configuration")
	}

	if len(actionDraftConfigurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VersionActionDraftConfigurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &actionDraftConfigurationR{}
			}
			foreign.R.Version = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VersionID {
				local.R.VersionActionDraftConfigurations = append(local.R.VersionActionDraftConfigurations, foreign)
				if foreign.R == nil {
					foreign.R = &actionDraftConfigurationR{}
				}
				foreign.R.Version = local
				break
			}
		}
	}

	return nil
}

// LoadSupportedBaseVersions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (actionVersionL) LoadSupportedBaseVersions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeActionVersion interface{}, mods queries.Applicator) error {
	var slice []*ActionVersion
	var object *ActionVersion

	if singular {
		object = maybeActionVersion.(*ActionVersion)
	} else {
		slice = *maybeActionVersion.(*[]*ActionVersion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &actionVersionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &actionVersionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"base_version\".*, \"a\".\"action_version_id\""),
		qm.From("\"base_version\""),
		qm.InnerJoin("\"action_version_supported_bases\" as \"a\" on \"base_version\".\"id\" = \"a\".\"supported_id\""),
		qm.WhereIn("\"a\".\"action_version_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load base_version")
	}

	var resultSlice []*BaseVersion

	var localJoinCols []int64
	for results.Next() {
		one := new(BaseVersion)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.BaseID, &one.CreatedAt, &one.CreatedByID, &one.UpdatedAt, &one.UpdatedByID, &one.Version, &one.Description, &one.Readme, &one.DockerImageRef, &one.Entrypoint, &one.Public, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for base_version")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice base_version")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on base_version")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for base_version")
	}

	if len(baseVersionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupportedBaseVersions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &baseVersionR{}
			}
			foreign.R.ActionVersions = append(foreign.R.ActionVersions, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.SupportedBaseVersions = append(local.R.SupportedBaseVersions, foreign)
				if foreign.R == nil {
					foreign.R = &baseVersionR{}
				}
				foreign.R.ActionVersions = append(foreign.R.ActionVersions, local)
				break
			}
		}
	}

	return nil
}

// SetAction of the actionVersion to the related item.
// Sets o.R.Action to related.
// Adds o to related.R.ActionVersions.
func (o *ActionVersion) SetAction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Action) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"action_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ActionID = related.ID
	if o.R == nil {
		o.R = &actionVersionR{
			Action: related,
		}
	} else {
		o.R.Action = related
	}

	if related.R == nil {
		related.R = &actionR{
			ActionVersions: ActionVersionSlice{o},
		}
	} else {
		related.R.ActionVersions = append(related.R.ActionVersions, o)
	}

	return nil
}

// SetCreatedBy of the actionVersion to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByActionVersions.
func (o *ActionVersion) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &actionVersionR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByActionVersions: ActionVersionSlice{o},
		}
	} else {
		related.R.CreatedByActionVersions = append(related.R.CreatedByActionVersions, o)
	}

	return nil
}

// SetUpdatedBy of the actionVersion to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByActionVersions.
func (o *ActionVersion) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"action_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, actionVersionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &actionVersionR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByActionVersions: ActionVersionSlice{o},
		}
	} else {
		related.R.UpdatedByActionVersions = append(related.R.UpdatedByActionVersions, o)
	}

	return nil
}

// AddVersionActionConfigurations adds the given related objects to the existing relationships
// of the action_version, optionally inserting them as new records.
// Appends related to o.R.VersionActionConfigurations.
// Sets related.R.Version appropriately.
func (o *ActionVersion) AddVersionActionConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VersionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &actionVersionR{
			VersionActionConfigurations: related,
		}
	} else {
		o.R.VersionActionConfigurations = append(o.R.VersionActionConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionConfigurationR{
				Version: o,
			}
		} else {
			rel.R.Version = o
		}
	}
	return nil
}

// AddVersionActionDraftConfigurations adds the given related objects to the existing relationships
// of the action_version, optionally inserting them as new records.
// Appends related to o.R.VersionActionDraftConfigurations.
// Sets related.R.Version appropriately.
func (o *ActionVersion) AddVersionActionDraftConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ActionDraftConfiguration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VersionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"action_draft_configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"version_id"}),
				strmangle.WhereClause("\"", "\"", 2, actionDraftConfigurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VersionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &actionVersionR{
			VersionActionDraftConfigurations: related,
		}
	} else {
		o.R.VersionActionDraftConfigurations = append(o.R.VersionActionDraftConfigurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &actionDraftConfigurationR{
				Version: o,
			}
		} else {
			rel.R.Version = o
		}
	}
	return nil
}

// AddSupportedBaseVersions adds the given related objects to the existing relationships
// of the action_version, optionally inserting them as new records.
// Appends related to o.R.SupportedBaseVersions.
// Sets related.R.ActionVersions appropriately.
func (o *ActionVersion) AddSupportedBaseVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseVersion) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"action_version_supported_bases\" (\"action_version_id\", \"supported_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &actionVersionR{
			SupportedBaseVersions: related,
		}
	} else {
		o.R.SupportedBaseVersions = append(o.R.SupportedBaseVersions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &baseVersionR{
				ActionVersions: ActionVersionSlice{o},
			}
		} else {
			rel.R.ActionVersions = append(rel.R.ActionVersions, o)
		}
	}
	return nil
}

// SetSupportedBaseVersions removes all previously related items of the
// action_version replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ActionVersions's SupportedBaseVersions accordingly.
// Replaces o.R.SupportedBaseVersions with related.
// Sets related.R.ActionVersions's SupportedBaseVersions accordingly.
func (o *ActionVersion) SetSupportedBaseVersions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BaseVersion) error {
	query := "delete from \"action_version_supported_bases\" where \"action_version_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSupportedBaseVersionsFromActionVersionsSlice(o, related)
	if o.R != nil {
		o.R.SupportedBaseVersions = nil
	}
	return o.AddSupportedBaseVersions(ctx, exec, insert, related...)
}

// RemoveSupportedBaseVersions relationships from objects passed in.
// Removes related items from R.SupportedBaseVersions (uses pointer comparison, removal does not keep order)
// Sets related.R.ActionVersions.
func (o *ActionVersion) RemoveSupportedBaseVersions(ctx context.Context, exec boil.ContextExecutor, related ...*BaseVersion) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"action_version_supported_bases\" where \"action_version_id\" = $1 and \"supported_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSupportedBaseVersionsFromActionVersionsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SupportedBaseVersions {
			if rel != ri {
				continue
			}

			ln := len(o.R.SupportedBaseVersions)
			if ln > 1 && i < ln-1 {
				o.R.SupportedBaseVersions[i] = o.R.SupportedBaseVersions[ln-1]
			}
			o.R.SupportedBaseVersions = o.R.SupportedBaseVersions[:ln-1]
			break
		}
	}

	return nil
}

func removeSupportedBaseVersionsFromActionVersionsSlice(o *ActionVersion, related []*BaseVersion) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ActionVersions {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ActionVersions)
			if ln > 1 && i < ln-1 {
				rel.R.ActionVersions[i] = rel.R.ActionVersions[ln-1]
			}
			rel.R.ActionVersions = rel.R.ActionVersions[:ln-1]
			break
		}
	}
}

// ActionVersions retrieves all the records using an executor.
func ActionVersions(mods ...qm.QueryMod) actionVersionQuery {
	mods = append(mods, qm.From("\"action_version\""))
	return actionVersionQuery{NewQuery(mods...)}
}

// FindActionVersion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindActionVersion(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ActionVersion, error) {
	actionVersionObj := &ActionVersion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"action_version\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, actionVersionObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from action_version")
	}

	return actionVersionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ActionVersion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no action_version provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionVersionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	actionVersionInsertCacheMut.RLock()
	cache, cached := actionVersionInsertCache[key]
	actionVersionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			actionVersionAllColumns,
			actionVersionColumnsWithDefault,
			actionVersionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(actionVersionType, actionVersionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(actionVersionType, actionVersionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"action_version\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"action_version\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into action_version")
	}

	if !cached {
		actionVersionInsertCacheMut.Lock()
		actionVersionInsertCache[key] = cache
		actionVersionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ActionVersion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ActionVersion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	actionVersionUpdateCacheMut.RLock()
	cache, cached := actionVersionUpdateCache[key]
	actionVersionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			actionVersionAllColumns,
			actionVersionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update action_version, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"action_version\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, actionVersionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(actionVersionType, actionVersionMapping, append(wl, actionVersionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update action_version row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for action_version")
	}

	if !cached {
		actionVersionUpdateCacheMut.Lock()
		actionVersionUpdateCache[key] = cache
		actionVersionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q actionVersionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for action_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for action_version")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ActionVersionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"action_version\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, actionVersionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in actionVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all actionVersion")
	}
	return rowsAff, nil
}

// Delete deletes a single ActionVersion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ActionVersion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ActionVersion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), actionVersionPrimaryKeyMapping)
	sql := "DELETE FROM \"action_version\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from action_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for action_version")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q actionVersionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no actionVersionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from action_version")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for action_version")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ActionVersionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(actionVersionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"action_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, actionVersionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from actionVersion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for action_version")
	}

	if len(actionVersionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ActionVersion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindActionVersion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ActionVersionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ActionVersionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), actionVersionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"action_version\".* FROM \"action_version\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, actionVersionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ActionVersionSlice")
	}

	*o = slice

	return nil
}

// ActionVersionExists checks if the ActionVersion row exists.
func ActionVersionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"action_version\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if action_version exists")
	}

	return exists, nil
}

// ActionVersion is an object representing the database table.
type ActionVersionDTO struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ActionID      int64     `boil:"action_id" json:"actionID" toml:"actionID" yaml:"actionID"`
	CreatedAt     time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID   int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID   int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	Version       string    `boil:"version" json:"version" toml:"version" yaml:"version"`
	Public        bool      `boil:"public" json:"public" toml:"public" yaml:"public"`
	ExampleConfig string    `boil:"example_config" json:"exampleConfig" toml:"exampleConfig" yaml:"exampleConfig"`
	Description   string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Readme        string    `boil:"readme" json:"readme" toml:"readme" yaml:"readme"`
	FileName      string    `boil:"file_name" json:"fileName" toml:"fileName" yaml:"fileName"`
	FileID        string    `boil:"file_id" json:"fileID" toml:"fileID" yaml:"fileID"`
	InputSchema   null.JSON `boil:"input_schema" json:"inputSchema,omitempty" toml:"inputSchema" yaml:"inputSchema,omitempty"`
	OutputSchema  null.JSON `boil:"output_schema" json:"outputSchema,omitempty" toml:"outputSchema" yaml:"outputSchema,omitempty"`
}

// DTO converts the ActionVersion to a ActionVersionDTO struct.
func (o ActionVersion) DTO() *ActionVersionDTO {
	return &ActionVersionDTO{
		ID:            o.ID,
		ActionID:      o.ActionID,
		CreatedAt:     o.CreatedAt,
		CreatedByID:   o.CreatedByID,
		UpdatedAt:     o.UpdatedAt,
		UpdatedByID:   o.UpdatedByID,
		Version:       o.Version,
		Public:        o.Public,
		ExampleConfig: o.ExampleConfig,
		Description:   o.Description,
		Readme:        o.Readme,
		FileName:      o.FileName,
		FileID:        o.FileID,
		InputSchema:   o.InputSchema,
		OutputSchema:  o.OutputSchema,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ActionVersion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no action_version provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(actionVersionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	actionVersionUpsertCacheMut.RLock()
	cache, cached := actionVersionUpsertCache[key]
	actionVersionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			actionVersionAllColumns,
			actionVersionColumnsWithDefault,
			actionVersionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			actionVersionAllColumns,
			actionVersionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert action_version, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(actionVersionPrimaryKeyColumns))
			copy(conflict, actionVersionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"action_version\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(actionVersionType, actionVersionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(actionVersionType, actionVersionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert action_version")
	}

	if !cached {
		actionVersionUpsertCacheMut.Lock()
		actionVersionUpsertCache[key] = cache
		actionVersionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
