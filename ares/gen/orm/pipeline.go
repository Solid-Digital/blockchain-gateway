// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Pipeline is an object representing the database table.
type Pipeline struct {
	ID                   int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID       int64      `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	CreatedAt            time.Time  `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID          int64      `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt            time.Time  `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID          int64      `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	DisplayName          string     `boil:"display_name" json:"displayName" toml:"displayName" yaml:"displayName"`
	Name                 string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Status               string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	Description          string     `boil:"description" json:"description" toml:"description" yaml:"description"`
	DraftConfigurationID null.Int64 `boil:"draft_configuration_id" json:"draftConfigurationID,omitempty" toml:"draftConfigurationID" yaml:"draftConfigurationID,omitempty"`

	R *pipelineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pipelineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PipelineColumns = struct {
	ID                   string
	OrganizationID       string
	CreatedAt            string
	CreatedByID          string
	UpdatedAt            string
	UpdatedByID          string
	DisplayName          string
	Name                 string
	Status               string
	Description          string
	DraftConfigurationID string
}{
	ID:                   "id",
	OrganizationID:       "organization_id",
	CreatedAt:            "created_at",
	CreatedByID:          "created_by_id",
	UpdatedAt:            "updated_at",
	UpdatedByID:          "updated_by_id",
	DisplayName:          "display_name",
	Name:                 "name",
	Status:               "status",
	Description:          "description",
	DraftConfigurationID: "draft_configuration_id",
}

// Generated where

var PipelineWhere = struct {
	ID                   whereHelperint64
	OrganizationID       whereHelperint64
	CreatedAt            whereHelpertime_Time
	CreatedByID          whereHelperint64
	UpdatedAt            whereHelpertime_Time
	UpdatedByID          whereHelperint64
	DisplayName          whereHelperstring
	Name                 whereHelperstring
	Status               whereHelperstring
	Description          whereHelperstring
	DraftConfigurationID whereHelpernull_Int64
}{
	ID:                   whereHelperint64{field: "\"pipeline\".\"id\""},
	OrganizationID:       whereHelperint64{field: "\"pipeline\".\"organization_id\""},
	CreatedAt:            whereHelpertime_Time{field: "\"pipeline\".\"created_at\""},
	CreatedByID:          whereHelperint64{field: "\"pipeline\".\"created_by_id\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"pipeline\".\"updated_at\""},
	UpdatedByID:          whereHelperint64{field: "\"pipeline\".\"updated_by_id\""},
	DisplayName:          whereHelperstring{field: "\"pipeline\".\"display_name\""},
	Name:                 whereHelperstring{field: "\"pipeline\".\"name\""},
	Status:               whereHelperstring{field: "\"pipeline\".\"status\""},
	Description:          whereHelperstring{field: "\"pipeline\".\"description\""},
	DraftConfigurationID: whereHelpernull_Int64{field: "\"pipeline\".\"draft_configuration_id\""},
}

// PipelineRels is where relationship names are stored.
var PipelineRels = struct {
	CreatedBy            string
	DraftConfiguration   string
	Organization         string
	UpdatedBy            string
	Configurations       string
	Deployments          string
	EnvironmentVariables string
}{
	CreatedBy:            "CreatedBy",
	DraftConfiguration:   "DraftConfiguration",
	Organization:         "Organization",
	UpdatedBy:            "UpdatedBy",
	Configurations:       "Configurations",
	Deployments:          "Deployments",
	EnvironmentVariables: "EnvironmentVariables",
}

// pipelineR is where relationships are stored.
type pipelineR struct {
	CreatedBy            *User
	DraftConfiguration   *DraftConfiguration
	Organization         *Organization
	UpdatedBy            *User
	Configurations       ConfigurationSlice
	Deployments          DeploymentSlice
	EnvironmentVariables EnvironmentVariableSlice
}

// NewStruct creates a new relationship struct
func (*pipelineR) NewStruct() *pipelineR {
	return &pipelineR{}
}

// pipelineL is where Load methods for each relationship are stored.
type pipelineL struct{}

var (
	pipelineAllColumns            = []string{"id", "organization_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "display_name", "name", "status", "description", "draft_configuration_id"}
	pipelineColumnsWithoutDefault = []string{"organization_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "display_name", "name", "status", "description", "draft_configuration_id"}
	pipelineColumnsWithDefault    = []string{"id"}
	pipelinePrimaryKeyColumns     = []string{"id"}
)

type (
	// PipelineSlice is an alias for a slice of pointers to Pipeline.
	// This should generally be used opposed to []Pipeline.
	PipelineSlice []*Pipeline
	// PipelineHook is the signature for custom Pipeline hook methods
	PipelineHook func(context.Context, boil.ContextExecutor, *Pipeline) error

	pipelineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pipelineType                 = reflect.TypeOf(&Pipeline{})
	pipelineMapping              = queries.MakeStructMapping(pipelineType)
	pipelinePrimaryKeyMapping, _ = queries.BindMapping(pipelineType, pipelineMapping, pipelinePrimaryKeyColumns)
	pipelineInsertCacheMut       sync.RWMutex
	pipelineInsertCache          = make(map[string]insertCache)
	pipelineUpdateCacheMut       sync.RWMutex
	pipelineUpdateCache          = make(map[string]updateCache)
	pipelineUpsertCacheMut       sync.RWMutex
	pipelineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pipelineBeforeInsertHooks []PipelineHook
var pipelineBeforeUpdateHooks []PipelineHook
var pipelineBeforeDeleteHooks []PipelineHook
var pipelineBeforeUpsertHooks []PipelineHook

var pipelineAfterInsertHooks []PipelineHook
var pipelineAfterSelectHooks []PipelineHook
var pipelineAfterUpdateHooks []PipelineHook
var pipelineAfterDeleteHooks []PipelineHook
var pipelineAfterUpsertHooks []PipelineHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pipeline) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pipeline) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pipeline) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pipeline) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pipeline) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pipeline) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pipeline) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pipeline) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pipeline) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pipelineAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPipelineHook registers your hook function for all future operations.
func AddPipelineHook(hookPoint boil.HookPoint, pipelineHook PipelineHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pipelineBeforeInsertHooks = append(pipelineBeforeInsertHooks, pipelineHook)
	case boil.BeforeUpdateHook:
		pipelineBeforeUpdateHooks = append(pipelineBeforeUpdateHooks, pipelineHook)
	case boil.BeforeDeleteHook:
		pipelineBeforeDeleteHooks = append(pipelineBeforeDeleteHooks, pipelineHook)
	case boil.BeforeUpsertHook:
		pipelineBeforeUpsertHooks = append(pipelineBeforeUpsertHooks, pipelineHook)
	case boil.AfterInsertHook:
		pipelineAfterInsertHooks = append(pipelineAfterInsertHooks, pipelineHook)
	case boil.AfterSelectHook:
		pipelineAfterSelectHooks = append(pipelineAfterSelectHooks, pipelineHook)
	case boil.AfterUpdateHook:
		pipelineAfterUpdateHooks = append(pipelineAfterUpdateHooks, pipelineHook)
	case boil.AfterDeleteHook:
		pipelineAfterDeleteHooks = append(pipelineAfterDeleteHooks, pipelineHook)
	case boil.AfterUpsertHook:
		pipelineAfterUpsertHooks = append(pipelineAfterUpsertHooks, pipelineHook)
	}
}

// One returns a single pipeline record from the query.
func (q pipelineQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pipeline, error) {
	o := &Pipeline{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for pipeline")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pipeline records from the query.
func (q pipelineQuery) All(ctx context.Context, exec boil.ContextExecutor) (PipelineSlice, error) {
	var o []*Pipeline

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Pipeline slice")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pipeline records in the query.
func (q pipelineQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count pipeline rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pipelineQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if pipeline exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *Pipeline) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// DraftConfiguration pointed to by the foreign key.
func (o *Pipeline) DraftConfiguration(mods ...qm.QueryMod) draftConfigurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DraftConfigurationID),
	}

	queryMods = append(queryMods, mods...)

	query := DraftConfigurations(queryMods...)
	queries.SetFrom(query.Query, "\"draft_configuration\"")

	return query
}

// Organization pointed to by the foreign key.
func (o *Pipeline) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *Pipeline) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Configurations retrieves all the configuration's Configurations with an executor.
func (o *Pipeline) Configurations(mods ...qm.QueryMod) configurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"configuration\".\"pipeline_id\"=?", o.ID),
	)

	query := Configurations(queryMods...)
	queries.SetFrom(query.Query, "\"configuration\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"configuration\".*"})
	}

	return query
}

// Deployments retrieves all the deployment's Deployments with an executor.
func (o *Pipeline) Deployments(mods ...qm.QueryMod) deploymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"deployment\".\"pipeline_id\"=?", o.ID),
	)

	query := Deployments(queryMods...)
	queries.SetFrom(query.Query, "\"deployment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"deployment\".*"})
	}

	return query
}

// EnvironmentVariables retrieves all the environment_variable's EnvironmentVariables with an executor.
func (o *Pipeline) EnvironmentVariables(mods ...qm.QueryMod) environmentVariableQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"environment_variable\".\"pipeline_id\"=?", o.ID),
	)

	query := EnvironmentVariables(queryMods...)
	queries.SetFrom(query.Query, "\"environment_variable\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"environment_variable\".*"})
	}

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pipelineL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybePipeline interface{}, mods queries.Applicator) error {
	var slice []*Pipeline
	var object *Pipeline

	if singular {
		object = maybePipeline.(*Pipeline)
	} else {
		slice = *maybePipeline.(*[]*Pipeline)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pipelineR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pipelineR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByPipelines = append(foreign.R.CreatedByPipelines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByPipelines = append(foreign.R.CreatedByPipelines, local)
				break
			}
		}
	}

	return nil
}

// LoadDraftConfiguration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pipelineL) LoadDraftConfiguration(ctx context.Context, e boil.ContextExecutor, singular bool, maybePipeline interface{}, mods queries.Applicator) error {
	var slice []*Pipeline
	var object *Pipeline

	if singular {
		object = maybePipeline.(*Pipeline)
	} else {
		slice = *maybePipeline.(*[]*Pipeline)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pipelineR{}
		}
		if !queries.IsNil(object.DraftConfigurationID) {
			args = append(args, object.DraftConfigurationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pipelineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DraftConfigurationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DraftConfigurationID) {
				args = append(args, obj.DraftConfigurationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`draft_configuration`), qm.WhereIn(`draft_configuration.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DraftConfiguration")
	}

	var resultSlice []*DraftConfiguration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DraftConfiguration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for draft_configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for draft_configuration")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DraftConfiguration = foreign
		if foreign.R == nil {
			foreign.R = &draftConfigurationR{}
		}
		foreign.R.Pipelines = append(foreign.R.Pipelines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DraftConfigurationID, foreign.ID) {
				local.R.DraftConfiguration = foreign
				if foreign.R == nil {
					foreign.R = &draftConfigurationR{}
				}
				foreign.R.Pipelines = append(foreign.R.Pipelines, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pipelineL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybePipeline interface{}, mods queries.Applicator) error {
	var slice []*Pipeline
	var object *Pipeline

	if singular {
		object = maybePipeline.(*Pipeline)
	} else {
		slice = *maybePipeline.(*[]*Pipeline)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pipelineR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pipelineR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Pipelines = append(foreign.R.Pipelines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Pipelines = append(foreign.R.Pipelines, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pipelineL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybePipeline interface{}, mods queries.Applicator) error {
	var slice []*Pipeline
	var object *Pipeline

	if singular {
		object = maybePipeline.(*Pipeline)
	} else {
		slice = *maybePipeline.(*[]*Pipeline)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pipelineR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pipelineR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(pipelineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByPipelines = append(foreign.R.UpdatedByPipelines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByPipelines = append(foreign.R.UpdatedByPipelines, local)
				break
			}
		}
	}

	return nil
}

// LoadConfigurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pipelineL) LoadConfigurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePipeline interface{}, mods queries.Applicator) error {
	var slice []*Pipeline
	var object *Pipeline

	if singular {
		object = maybePipeline.(*Pipeline)
	} else {
		slice = *maybePipeline.(*[]*Pipeline)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pipelineR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pipelineR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`configuration`), qm.WhereIn(`configuration.pipeline_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load configuration")
	}

	var resultSlice []*Configuration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice configuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on configuration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for configuration")
	}

	if len(configurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Configurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &configurationR{}
			}
			foreign.R.Pipeline = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PipelineID {
				local.R.Configurations = append(local.R.Configurations, foreign)
				if foreign.R == nil {
					foreign.R = &configurationR{}
				}
				foreign.R.Pipeline = local
				break
			}
		}
	}

	return nil
}

// LoadDeployments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pipelineL) LoadDeployments(ctx context.Context, e boil.ContextExecutor, singular bool, maybePipeline interface{}, mods queries.Applicator) error {
	var slice []*Pipeline
	var object *Pipeline

	if singular {
		object = maybePipeline.(*Pipeline)
	} else {
		slice = *maybePipeline.(*[]*Pipeline)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pipelineR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pipelineR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`deployment`), qm.WhereIn(`deployment.pipeline_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load deployment")
	}

	var resultSlice []*Deployment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice deployment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on deployment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deployment")
	}

	if len(deploymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Deployments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deploymentR{}
			}
			foreign.R.Pipeline = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PipelineID {
				local.R.Deployments = append(local.R.Deployments, foreign)
				if foreign.R == nil {
					foreign.R = &deploymentR{}
				}
				foreign.R.Pipeline = local
				break
			}
		}
	}

	return nil
}

// LoadEnvironmentVariables allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pipelineL) LoadEnvironmentVariables(ctx context.Context, e boil.ContextExecutor, singular bool, maybePipeline interface{}, mods queries.Applicator) error {
	var slice []*Pipeline
	var object *Pipeline

	if singular {
		object = maybePipeline.(*Pipeline)
	} else {
		slice = *maybePipeline.(*[]*Pipeline)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pipelineR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pipelineR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`environment_variable`), qm.WhereIn(`environment_variable.pipeline_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load environment_variable")
	}

	var resultSlice []*EnvironmentVariable
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice environment_variable")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on environment_variable")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environment_variable")
	}

	if len(environmentVariableAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EnvironmentVariables = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &environmentVariableR{}
			}
			foreign.R.Pipeline = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PipelineID {
				local.R.EnvironmentVariables = append(local.R.EnvironmentVariables, foreign)
				if foreign.R == nil {
					foreign.R = &environmentVariableR{}
				}
				foreign.R.Pipeline = local
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the pipeline to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByPipelines.
func (o *Pipeline) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pipeline\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, pipelinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &pipelineR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByPipelines: PipelineSlice{o},
		}
	} else {
		related.R.CreatedByPipelines = append(related.R.CreatedByPipelines, o)
	}

	return nil
}

// SetDraftConfiguration of the pipeline to the related item.
// Sets o.R.DraftConfiguration to related.
// Adds o to related.R.Pipelines.
func (o *Pipeline) SetDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DraftConfiguration) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pipeline\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"draft_configuration_id"}),
		strmangle.WhereClause("\"", "\"", 2, pipelinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DraftConfigurationID, related.ID)
	if o.R == nil {
		o.R = &pipelineR{
			DraftConfiguration: related,
		}
	} else {
		o.R.DraftConfiguration = related
	}

	if related.R == nil {
		related.R = &draftConfigurationR{
			Pipelines: PipelineSlice{o},
		}
	} else {
		related.R.Pipelines = append(related.R.Pipelines, o)
	}

	return nil
}

// RemoveDraftConfiguration relationship.
// Sets o.R.DraftConfiguration to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Pipeline) RemoveDraftConfiguration(ctx context.Context, exec boil.ContextExecutor, related *DraftConfiguration) error {
	var err error

	queries.SetScanner(&o.DraftConfigurationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("draft_configuration_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.DraftConfiguration = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Pipelines {
		if queries.Equal(o.DraftConfigurationID, ri.DraftConfigurationID) {
			continue
		}

		ln := len(related.R.Pipelines)
		if ln > 1 && i < ln-1 {
			related.R.Pipelines[i] = related.R.Pipelines[ln-1]
		}
		related.R.Pipelines = related.R.Pipelines[:ln-1]
		break
	}
	return nil
}

// SetOrganization of the pipeline to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Pipelines.
func (o *Pipeline) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pipeline\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, pipelinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &pipelineR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Pipelines: PipelineSlice{o},
		}
	} else {
		related.R.Pipelines = append(related.R.Pipelines, o)
	}

	return nil
}

// SetUpdatedBy of the pipeline to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByPipelines.
func (o *Pipeline) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pipeline\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, pipelinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &pipelineR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByPipelines: PipelineSlice{o},
		}
	} else {
		related.R.UpdatedByPipelines = append(related.R.UpdatedByPipelines, o)
	}

	return nil
}

// AddConfigurations adds the given related objects to the existing relationships
// of the pipeline, optionally inserting them as new records.
// Appends related to o.R.Configurations.
// Sets related.R.Pipeline appropriately.
func (o *Pipeline) AddConfigurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Configuration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PipelineID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"configuration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pipeline_id"}),
				strmangle.WhereClause("\"", "\"", 2, configurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PipelineID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pipelineR{
			Configurations: related,
		}
	} else {
		o.R.Configurations = append(o.R.Configurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &configurationR{
				Pipeline: o,
			}
		} else {
			rel.R.Pipeline = o
		}
	}
	return nil
}

// AddDeployments adds the given related objects to the existing relationships
// of the pipeline, optionally inserting them as new records.
// Appends related to o.R.Deployments.
// Sets related.R.Pipeline appropriately.
func (o *Pipeline) AddDeployments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Deployment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PipelineID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"deployment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pipeline_id"}),
				strmangle.WhereClause("\"", "\"", 2, deploymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PipelineID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pipelineR{
			Deployments: related,
		}
	} else {
		o.R.Deployments = append(o.R.Deployments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deploymentR{
				Pipeline: o,
			}
		} else {
			rel.R.Pipeline = o
		}
	}
	return nil
}

// AddEnvironmentVariables adds the given related objects to the existing relationships
// of the pipeline, optionally inserting them as new records.
// Appends related to o.R.EnvironmentVariables.
// Sets related.R.Pipeline appropriately.
func (o *Pipeline) AddEnvironmentVariables(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EnvironmentVariable) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PipelineID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"environment_variable\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pipeline_id"}),
				strmangle.WhereClause("\"", "\"", 2, environmentVariablePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PipelineID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pipelineR{
			EnvironmentVariables: related,
		}
	} else {
		o.R.EnvironmentVariables = append(o.R.EnvironmentVariables, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &environmentVariableR{
				Pipeline: o,
			}
		} else {
			rel.R.Pipeline = o
		}
	}
	return nil
}

// Pipelines retrieves all the records using an executor.
func Pipelines(mods ...qm.QueryMod) pipelineQuery {
	mods = append(mods, qm.From("\"pipeline\""))
	return pipelineQuery{NewQuery(mods...)}
}

// FindPipeline retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPipeline(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Pipeline, error) {
	pipelineObj := &Pipeline{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pipeline\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pipelineObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from pipeline")
	}

	return pipelineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pipeline) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no pipeline provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pipelineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pipelineInsertCacheMut.RLock()
	cache, cached := pipelineInsertCache[key]
	pipelineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pipelineAllColumns,
			pipelineColumnsWithDefault,
			pipelineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pipelineType, pipelineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pipelineType, pipelineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pipeline\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pipeline\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into pipeline")
	}

	if !cached {
		pipelineInsertCacheMut.Lock()
		pipelineInsertCache[key] = cache
		pipelineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Pipeline.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pipeline) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pipelineUpdateCacheMut.RLock()
	cache, cached := pipelineUpdateCache[key]
	pipelineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pipelineAllColumns,
			pipelinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update pipeline, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pipeline\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pipelinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pipelineType, pipelineMapping, append(wl, pipelinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update pipeline row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for pipeline")
	}

	if !cached {
		pipelineUpdateCacheMut.Lock()
		pipelineUpdateCache[key] = cache
		pipelineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pipelineQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for pipeline")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for pipeline")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PipelineSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pipelinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pipeline\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pipelinePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in pipeline slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all pipeline")
	}
	return rowsAff, nil
}

// Delete deletes a single Pipeline record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pipeline) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Pipeline provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pipelinePrimaryKeyMapping)
	sql := "DELETE FROM \"pipeline\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from pipeline")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for pipeline")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pipelineQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no pipelineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from pipeline")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for pipeline")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PipelineSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pipelineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pipelinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pipeline\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pipelinePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from pipeline slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for pipeline")
	}

	if len(pipelineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pipeline) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPipeline(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PipelineSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PipelineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pipelinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pipeline\".* FROM \"pipeline\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pipelinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PipelineSlice")
	}

	*o = slice

	return nil
}

// PipelineExists checks if the Pipeline row exists.
func PipelineExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pipeline\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if pipeline exists")
	}

	return exists, nil
}

// Pipeline is an object representing the database table.
type PipelineDTO struct {
	ID                   int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID       int64      `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	CreatedAt            time.Time  `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID          int64      `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt            time.Time  `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID          int64      `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	DisplayName          string     `boil:"display_name" json:"displayName" toml:"displayName" yaml:"displayName"`
	Name                 string     `boil:"name" json:"name" toml:"name" yaml:"name"`
	Status               string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	Description          string     `boil:"description" json:"description" toml:"description" yaml:"description"`
	DraftConfigurationID null.Int64 `boil:"draft_configuration_id" json:"draftConfigurationID,omitempty" toml:"draftConfigurationID" yaml:"draftConfigurationID,omitempty"`
}

// DTO converts the Pipeline to a PipelineDTO struct.
func (o Pipeline) DTO() *PipelineDTO {
	return &PipelineDTO{
		ID:                   o.ID,
		OrganizationID:       o.OrganizationID,
		CreatedAt:            o.CreatedAt,
		CreatedByID:          o.CreatedByID,
		UpdatedAt:            o.UpdatedAt,
		UpdatedByID:          o.UpdatedByID,
		DisplayName:          o.DisplayName,
		Name:                 o.Name,
		Status:               o.Status,
		Description:          o.Description,
		DraftConfigurationID: o.DraftConfigurationID,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pipeline) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no pipeline provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pipelineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pipelineUpsertCacheMut.RLock()
	cache, cached := pipelineUpsertCache[key]
	pipelineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pipelineAllColumns,
			pipelineColumnsWithDefault,
			pipelineColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pipelineAllColumns,
			pipelinePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert pipeline, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pipelinePrimaryKeyColumns))
			copy(conflict, pipelinePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pipeline\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pipelineType, pipelineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pipelineType, pipelineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert pipeline")
	}

	if !cached {
		pipelineUpsertCacheMut.Lock()
		pipelineUpsertCache[key] = cache
		pipelineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
