// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OrganizationBillingProvider is an object representing the database table.
type OrganizationBillingProvider struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID int64     `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	ProviderName   string    `boil:"provider_name" json:"providerName" toml:"providerName" yaml:"providerName"`
	BillingInfo    null.JSON `boil:"billing_info" json:"billingInfo,omitempty" toml:"billingInfo" yaml:"billingInfo,omitempty"`

	R *organizationBillingProviderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationBillingProviderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationBillingProviderColumns = struct {
	ID             string
	OrganizationID string
	CreatedAt      string
	CreatedByID    string
	UpdatedAt      string
	UpdatedByID    string
	ProviderName   string
	BillingInfo    string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	CreatedAt:      "created_at",
	CreatedByID:    "created_by_id",
	UpdatedAt:      "updated_at",
	UpdatedByID:    "updated_by_id",
	ProviderName:   "provider_name",
	BillingInfo:    "billing_info",
}

// Generated where

var OrganizationBillingProviderWhere = struct {
	ID             whereHelperint64
	OrganizationID whereHelperint64
	CreatedAt      whereHelpertime_Time
	CreatedByID    whereHelperint64
	UpdatedAt      whereHelpertime_Time
	UpdatedByID    whereHelperint64
	ProviderName   whereHelperstring
	BillingInfo    whereHelpernull_JSON
}{
	ID:             whereHelperint64{field: "\"organization_billing_provider\".\"id\""},
	OrganizationID: whereHelperint64{field: "\"organization_billing_provider\".\"organization_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"organization_billing_provider\".\"created_at\""},
	CreatedByID:    whereHelperint64{field: "\"organization_billing_provider\".\"created_by_id\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"organization_billing_provider\".\"updated_at\""},
	UpdatedByID:    whereHelperint64{field: "\"organization_billing_provider\".\"updated_by_id\""},
	ProviderName:   whereHelperstring{field: "\"organization_billing_provider\".\"provider_name\""},
	BillingInfo:    whereHelpernull_JSON{field: "\"organization_billing_provider\".\"billing_info\""},
}

// OrganizationBillingProviderRels is where relationship names are stored.
var OrganizationBillingProviderRels = struct {
	CreatedBy    string
	Organization string
	UpdatedBy    string
}{
	CreatedBy:    "CreatedBy",
	Organization: "Organization",
	UpdatedBy:    "UpdatedBy",
}

// organizationBillingProviderR is where relationships are stored.
type organizationBillingProviderR struct {
	CreatedBy    *User
	Organization *Organization
	UpdatedBy    *User
}

// NewStruct creates a new relationship struct
func (*organizationBillingProviderR) NewStruct() *organizationBillingProviderR {
	return &organizationBillingProviderR{}
}

// organizationBillingProviderL is where Load methods for each relationship are stored.
type organizationBillingProviderL struct{}

var (
	organizationBillingProviderAllColumns            = []string{"id", "organization_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "provider_name", "billing_info"}
	organizationBillingProviderColumnsWithoutDefault = []string{"organization_id", "created_at", "created_by_id", "updated_at", "updated_by_id", "provider_name", "billing_info"}
	organizationBillingProviderColumnsWithDefault    = []string{"id"}
	organizationBillingProviderPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrganizationBillingProviderSlice is an alias for a slice of pointers to OrganizationBillingProvider.
	// This should generally be used opposed to []OrganizationBillingProvider.
	OrganizationBillingProviderSlice []*OrganizationBillingProvider
	// OrganizationBillingProviderHook is the signature for custom OrganizationBillingProvider hook methods
	OrganizationBillingProviderHook func(context.Context, boil.ContextExecutor, *OrganizationBillingProvider) error

	organizationBillingProviderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationBillingProviderType                 = reflect.TypeOf(&OrganizationBillingProvider{})
	organizationBillingProviderMapping              = queries.MakeStructMapping(organizationBillingProviderType)
	organizationBillingProviderPrimaryKeyMapping, _ = queries.BindMapping(organizationBillingProviderType, organizationBillingProviderMapping, organizationBillingProviderPrimaryKeyColumns)
	organizationBillingProviderInsertCacheMut       sync.RWMutex
	organizationBillingProviderInsertCache          = make(map[string]insertCache)
	organizationBillingProviderUpdateCacheMut       sync.RWMutex
	organizationBillingProviderUpdateCache          = make(map[string]updateCache)
	organizationBillingProviderUpsertCacheMut       sync.RWMutex
	organizationBillingProviderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationBillingProviderBeforeInsertHooks []OrganizationBillingProviderHook
var organizationBillingProviderBeforeUpdateHooks []OrganizationBillingProviderHook
var organizationBillingProviderBeforeDeleteHooks []OrganizationBillingProviderHook
var organizationBillingProviderBeforeUpsertHooks []OrganizationBillingProviderHook

var organizationBillingProviderAfterInsertHooks []OrganizationBillingProviderHook
var organizationBillingProviderAfterSelectHooks []OrganizationBillingProviderHook
var organizationBillingProviderAfterUpdateHooks []OrganizationBillingProviderHook
var organizationBillingProviderAfterDeleteHooks []OrganizationBillingProviderHook
var organizationBillingProviderAfterUpsertHooks []OrganizationBillingProviderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationBillingProvider) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationBillingProvider) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationBillingProvider) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationBillingProvider) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationBillingProvider) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationBillingProvider) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationBillingProvider) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationBillingProvider) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationBillingProvider) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationBillingProviderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationBillingProviderHook registers your hook function for all future operations.
func AddOrganizationBillingProviderHook(hookPoint boil.HookPoint, organizationBillingProviderHook OrganizationBillingProviderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationBillingProviderBeforeInsertHooks = append(organizationBillingProviderBeforeInsertHooks, organizationBillingProviderHook)
	case boil.BeforeUpdateHook:
		organizationBillingProviderBeforeUpdateHooks = append(organizationBillingProviderBeforeUpdateHooks, organizationBillingProviderHook)
	case boil.BeforeDeleteHook:
		organizationBillingProviderBeforeDeleteHooks = append(organizationBillingProviderBeforeDeleteHooks, organizationBillingProviderHook)
	case boil.BeforeUpsertHook:
		organizationBillingProviderBeforeUpsertHooks = append(organizationBillingProviderBeforeUpsertHooks, organizationBillingProviderHook)
	case boil.AfterInsertHook:
		organizationBillingProviderAfterInsertHooks = append(organizationBillingProviderAfterInsertHooks, organizationBillingProviderHook)
	case boil.AfterSelectHook:
		organizationBillingProviderAfterSelectHooks = append(organizationBillingProviderAfterSelectHooks, organizationBillingProviderHook)
	case boil.AfterUpdateHook:
		organizationBillingProviderAfterUpdateHooks = append(organizationBillingProviderAfterUpdateHooks, organizationBillingProviderHook)
	case boil.AfterDeleteHook:
		organizationBillingProviderAfterDeleteHooks = append(organizationBillingProviderAfterDeleteHooks, organizationBillingProviderHook)
	case boil.AfterUpsertHook:
		organizationBillingProviderAfterUpsertHooks = append(organizationBillingProviderAfterUpsertHooks, organizationBillingProviderHook)
	}
}

// One returns a single organizationBillingProvider record from the query.
func (q organizationBillingProviderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationBillingProvider, error) {
	o := &OrganizationBillingProvider{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to execute a one query for organization_billing_provider")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationBillingProvider records from the query.
func (q organizationBillingProviderQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationBillingProviderSlice, error) {
	var o []*OrganizationBillingProvider

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to OrganizationBillingProvider slice")
	}

	if len(organizationBillingProviderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationBillingProvider records in the query.
func (q organizationBillingProviderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count organization_billing_provider rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationBillingProviderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if organization_billing_provider exists")
	}

	return count > 0, nil
}

// CreatedBy pointed to by the foreign key.
func (o *OrganizationBillingProvider) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Organization pointed to by the foreign key.
func (o *OrganizationBillingProvider) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organization\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *OrganizationBillingProvider) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationBillingProviderL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationBillingProvider interface{}, mods queries.Applicator) error {
	var slice []*OrganizationBillingProvider
	var object *OrganizationBillingProvider

	if singular {
		object = maybeOrganizationBillingProvider.(*OrganizationBillingProvider)
	} else {
		slice = *maybeOrganizationBillingProvider.(*[]*OrganizationBillingProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationBillingProviderR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationBillingProviderR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(organizationBillingProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByOrganizationBillingProviders = append(foreign.R.CreatedByOrganizationBillingProviders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByOrganizationBillingProviders = append(foreign.R.CreatedByOrganizationBillingProviders, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationBillingProviderL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationBillingProvider interface{}, mods queries.Applicator) error {
	var slice []*OrganizationBillingProvider
	var object *OrganizationBillingProvider

	if singular {
		object = maybeOrganizationBillingProvider.(*OrganizationBillingProvider)
	} else {
		slice = *maybeOrganizationBillingProvider.(*[]*OrganizationBillingProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationBillingProviderR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationBillingProviderR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organization`), qm.WhereIn(`organization.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(organizationBillingProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.OrganizationBillingProviders = append(foreign.R.OrganizationBillingProviders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.OrganizationBillingProviders = append(foreign.R.OrganizationBillingProviders, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationBillingProviderL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationBillingProvider interface{}, mods queries.Applicator) error {
	var slice []*OrganizationBillingProvider
	var object *OrganizationBillingProvider

	if singular {
		object = maybeOrganizationBillingProvider.(*OrganizationBillingProvider)
	} else {
		slice = *maybeOrganizationBillingProvider.(*[]*OrganizationBillingProvider)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationBillingProviderR{}
		}
		args = append(args, object.UpdatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationBillingProviderR{}
			}

			for _, a := range args {
				if a == obj.UpdatedByID {
					continue Outer
				}
			}

			args = append(args, obj.UpdatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(organizationBillingProviderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByOrganizationBillingProviders = append(foreign.R.UpdatedByOrganizationBillingProviders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UpdatedByID == foreign.ID {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByOrganizationBillingProviders = append(foreign.R.UpdatedByOrganizationBillingProviders, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedBy of the organizationBillingProvider to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByOrganizationBillingProviders.
func (o *OrganizationBillingProvider) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organization_billing_provider\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationBillingProviderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &organizationBillingProviderR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByOrganizationBillingProviders: OrganizationBillingProviderSlice{o},
		}
	} else {
		related.R.CreatedByOrganizationBillingProviders = append(related.R.CreatedByOrganizationBillingProviders, o)
	}

	return nil
}

// SetOrganization of the organizationBillingProvider to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.OrganizationBillingProviders.
func (o *OrganizationBillingProvider) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organization_billing_provider\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationBillingProviderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &organizationBillingProviderR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			OrganizationBillingProviders: OrganizationBillingProviderSlice{o},
		}
	} else {
		related.R.OrganizationBillingProviders = append(related.R.OrganizationBillingProviders, o)
	}

	return nil
}

// SetUpdatedBy of the organizationBillingProvider to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedByOrganizationBillingProviders.
func (o *OrganizationBillingProvider) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organization_billing_provider\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationBillingProviderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UpdatedByID = related.ID
	if o.R == nil {
		o.R = &organizationBillingProviderR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByOrganizationBillingProviders: OrganizationBillingProviderSlice{o},
		}
	} else {
		related.R.UpdatedByOrganizationBillingProviders = append(related.R.UpdatedByOrganizationBillingProviders, o)
	}

	return nil
}

// OrganizationBillingProviders retrieves all the records using an executor.
func OrganizationBillingProviders(mods ...qm.QueryMod) organizationBillingProviderQuery {
	mods = append(mods, qm.From("\"organization_billing_provider\""))
	return organizationBillingProviderQuery{NewQuery(mods...)}
}

// FindOrganizationBillingProvider retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationBillingProvider(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrganizationBillingProvider, error) {
	organizationBillingProviderObj := &OrganizationBillingProvider{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organization_billing_provider\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organizationBillingProviderObj)
	if err != nil {
		return nil, errors.Wrap(err, "orm: unable to select from organization_billing_provider")
	}

	return organizationBillingProviderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationBillingProvider) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no organization_billing_provider provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationBillingProviderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationBillingProviderInsertCacheMut.RLock()
	cache, cached := organizationBillingProviderInsertCache[key]
	organizationBillingProviderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationBillingProviderAllColumns,
			organizationBillingProviderColumnsWithDefault,
			organizationBillingProviderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationBillingProviderType, organizationBillingProviderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationBillingProviderType, organizationBillingProviderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organization_billing_provider\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organization_billing_provider\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into organization_billing_provider")
	}

	if !cached {
		organizationBillingProviderInsertCacheMut.Lock()
		organizationBillingProviderInsertCache[key] = cache
		organizationBillingProviderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationBillingProvider.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationBillingProvider) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationBillingProviderUpdateCacheMut.RLock()
	cache, cached := organizationBillingProviderUpdateCache[key]
	organizationBillingProviderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationBillingProviderAllColumns,
			organizationBillingProviderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update organization_billing_provider, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organization_billing_provider\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationBillingProviderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationBillingProviderType, organizationBillingProviderMapping, append(wl, organizationBillingProviderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update organization_billing_provider row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for organization_billing_provider")
	}

	if !cached {
		organizationBillingProviderUpdateCacheMut.Lock()
		organizationBillingProviderUpdateCache[key] = cache
		organizationBillingProviderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationBillingProviderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for organization_billing_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for organization_billing_provider")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationBillingProviderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationBillingProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organization_billing_provider\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationBillingProviderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in organizationBillingProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all organizationBillingProvider")
	}
	return rowsAff, nil
}

// Delete deletes a single OrganizationBillingProvider record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationBillingProvider) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no OrganizationBillingProvider provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationBillingProviderPrimaryKeyMapping)
	sql := "DELETE FROM \"organization_billing_provider\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from organization_billing_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for organization_billing_provider")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationBillingProviderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no organizationBillingProviderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from organization_billing_provider")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for organization_billing_provider")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationBillingProviderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationBillingProviderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationBillingProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organization_billing_provider\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationBillingProviderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from organizationBillingProvider slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for organization_billing_provider")
	}

	if len(organizationBillingProviderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationBillingProvider) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationBillingProvider(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationBillingProviderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationBillingProviderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationBillingProviderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organization_billing_provider\".* FROM \"organization_billing_provider\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationBillingProviderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in OrganizationBillingProviderSlice")
	}

	*o = slice

	return nil
}

// OrganizationBillingProviderExists checks if the OrganizationBillingProvider row exists.
func OrganizationBillingProviderExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organization_billing_provider\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if organization_billing_provider exists")
	}

	return exists, nil
}

// OrganizationBillingProvider is an object representing the database table.
type OrganizationBillingProviderDTO struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID int64     `boil:"organization_id" json:"organizationID" toml:"organizationID" yaml:"organizationID"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedByID    int64     `boil:"created_by_id" json:"createdByID" toml:"createdByID" yaml:"createdByID"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedByID    int64     `boil:"updated_by_id" json:"updatedByID" toml:"updatedByID" yaml:"updatedByID"`
	ProviderName   string    `boil:"provider_name" json:"providerName" toml:"providerName" yaml:"providerName"`
	BillingInfo    null.JSON `boil:"billing_info" json:"billingInfo,omitempty" toml:"billingInfo" yaml:"billingInfo,omitempty"`
}

// DTO converts the OrganizationBillingProvider to a OrganizationBillingProviderDTO struct.
func (o OrganizationBillingProvider) DTO() *OrganizationBillingProviderDTO {
	return &OrganizationBillingProviderDTO{
		ID:             o.ID,
		OrganizationID: o.OrganizationID,
		CreatedAt:      o.CreatedAt,
		CreatedByID:    o.CreatedByID,
		UpdatedAt:      o.UpdatedAt,
		UpdatedByID:    o.UpdatedByID,
		ProviderName:   o.ProviderName,
		BillingInfo:    o.BillingInfo,
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationBillingProvider) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no organization_billing_provider provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationBillingProviderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationBillingProviderUpsertCacheMut.RLock()
	cache, cached := organizationBillingProviderUpsertCache[key]
	organizationBillingProviderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationBillingProviderAllColumns,
			organizationBillingProviderColumnsWithDefault,
			organizationBillingProviderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationBillingProviderAllColumns,
			organizationBillingProviderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert organization_billing_provider, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organizationBillingProviderPrimaryKeyColumns))
			copy(conflict, organizationBillingProviderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organization_billing_provider\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organizationBillingProviderType, organizationBillingProviderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationBillingProviderType, organizationBillingProviderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert organization_billing_provider")
	}

	if !cached {
		organizationBillingProviderUpsertCacheMut.Lock()
		organizationBillingProviderUpsertCache[key] = cache
		organizationBillingProviderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
