// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateRegistrationHandlerFunc turns a function with the right signature into a create registration handler
type CreateRegistrationHandlerFunc func(CreateRegistrationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateRegistrationHandlerFunc) Handle(params CreateRegistrationParams) middleware.Responder {
	return fn(params)
}

// CreateRegistrationHandler interface for that can handle valid create registration params
type CreateRegistrationHandler interface {
	Handle(CreateRegistrationParams) middleware.Responder
}

// NewCreateRegistration creates a new http.Handler for the create registration operation
func NewCreateRegistration(ctx *middleware.Context, handler CreateRegistrationHandler) *CreateRegistration {
	return &CreateRegistration{Context: ctx, Handler: handler}
}

/*CreateRegistration swagger:route POST /auth/registration auth createRegistration

Register New User

*/
type CreateRegistration struct {
	Context *middleware.Context
	Handler CreateRegistrationHandler
}

func (o *CreateRegistration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateRegistrationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
