// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// UpdateCurrentUserOKCode is the HTTP code returned for type UpdateCurrentUserOK
const UpdateCurrentUserOKCode int = 200

/*UpdateCurrentUserOK Status 200

swagger:response updateCurrentUserOK
*/
type UpdateCurrentUserOK struct {

	/*
	  In: Body
	*/
	Payload *dto.GetCurrentUserResponse `json:"body,omitempty"`
}

// NewUpdateCurrentUserOK creates UpdateCurrentUserOK with default headers values
func NewUpdateCurrentUserOK() *UpdateCurrentUserOK {

	return &UpdateCurrentUserOK{}
}

// WithPayload adds the payload to the update current user o k response
func (o *UpdateCurrentUserOK) WithPayload(payload *dto.GetCurrentUserResponse) *UpdateCurrentUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update current user o k response
func (o *UpdateCurrentUserOK) SetPayload(payload *dto.GetCurrentUserResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCurrentUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateCurrentUserInternalServerErrorCode is the HTTP code returned for type UpdateCurrentUserInternalServerError
const UpdateCurrentUserInternalServerErrorCode int = 500

/*UpdateCurrentUserInternalServerError Internal server error

swagger:response updateCurrentUserInternalServerError
*/
type UpdateCurrentUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewUpdateCurrentUserInternalServerError creates UpdateCurrentUserInternalServerError with default headers values
func NewUpdateCurrentUserInternalServerError() *UpdateCurrentUserInternalServerError {

	return &UpdateCurrentUserInternalServerError{}
}

// WithPayload adds the payload to the update current user internal server error response
func (o *UpdateCurrentUserInternalServerError) WithPayload(payload interface{}) *UpdateCurrentUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update current user internal server error response
func (o *UpdateCurrentUserInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateCurrentUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
