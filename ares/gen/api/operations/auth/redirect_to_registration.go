// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RedirectToRegistrationHandlerFunc turns a function with the right signature into a redirect to registration handler
type RedirectToRegistrationHandlerFunc func(RedirectToRegistrationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RedirectToRegistrationHandlerFunc) Handle(params RedirectToRegistrationParams) middleware.Responder {
	return fn(params)
}

// RedirectToRegistrationHandler interface for that can handle valid redirect to registration params
type RedirectToRegistrationHandler interface {
	Handle(RedirectToRegistrationParams) middleware.Responder
}

// NewRedirectToRegistration creates a new http.Handler for the redirect to registration operation
func NewRedirectToRegistration(ctx *middleware.Context, handler RedirectToRegistrationHandler) *RedirectToRegistration {
	return &RedirectToRegistration{Context: ctx, Handler: handler}
}

/*RedirectToRegistration swagger:route POST /auth/registration-redirect auth redirectToRegistration

Redirect for registration

*/
type RedirectToRegistration struct {
	Context *middleware.Context
	Handler RedirectToRegistrationHandler
}

func (o *RedirectToRegistration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRedirectToRegistrationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
