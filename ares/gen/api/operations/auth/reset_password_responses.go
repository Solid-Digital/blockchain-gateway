// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// ResetPasswordOKCode is the HTTP code returned for type ResetPasswordOK
const ResetPasswordOKCode int = 200

/*ResetPasswordOK Status 200

swagger:response resetPasswordOK
*/
type ResetPasswordOK struct {

	/*
	  In: Body
	*/
	Payload *dto.ResetPasswordResponse `json:"body,omitempty"`
}

// NewResetPasswordOK creates ResetPasswordOK with default headers values
func NewResetPasswordOK() *ResetPasswordOK {

	return &ResetPasswordOK{}
}

// WithPayload adds the payload to the reset password o k response
func (o *ResetPasswordOK) WithPayload(payload *dto.ResetPasswordResponse) *ResetPasswordOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reset password o k response
func (o *ResetPasswordOK) SetPayload(payload *dto.ResetPasswordResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ResetPasswordOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ResetPasswordUnauthorizedCode is the HTTP code returned for type ResetPasswordUnauthorized
const ResetPasswordUnauthorizedCode int = 401

/*ResetPasswordUnauthorized Status 401

swagger:response resetPasswordUnauthorized
*/
type ResetPasswordUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewResetPasswordUnauthorized creates ResetPasswordUnauthorized with default headers values
func NewResetPasswordUnauthorized() *ResetPasswordUnauthorized {

	return &ResetPasswordUnauthorized{}
}

// WithPayload adds the payload to the reset password unauthorized response
func (o *ResetPasswordUnauthorized) WithPayload(payload interface{}) *ResetPasswordUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reset password unauthorized response
func (o *ResetPasswordUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ResetPasswordUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
