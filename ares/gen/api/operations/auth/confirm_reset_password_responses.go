// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ConfirmResetPasswordOKCode is the HTTP code returned for type ConfirmResetPasswordOK
const ConfirmResetPasswordOKCode int = 200

/*ConfirmResetPasswordOK Status 200

swagger:response confirmResetPasswordOK
*/
type ConfirmResetPasswordOK struct {
}

// NewConfirmResetPasswordOK creates ConfirmResetPasswordOK with default headers values
func NewConfirmResetPasswordOK() *ConfirmResetPasswordOK {

	return &ConfirmResetPasswordOK{}
}

// WriteResponse to the client
func (o *ConfirmResetPasswordOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// ConfirmResetPasswordUnauthorizedCode is the HTTP code returned for type ConfirmResetPasswordUnauthorized
const ConfirmResetPasswordUnauthorizedCode int = 401

/*ConfirmResetPasswordUnauthorized Status 401

swagger:response confirmResetPasswordUnauthorized
*/
type ConfirmResetPasswordUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewConfirmResetPasswordUnauthorized creates ConfirmResetPasswordUnauthorized with default headers values
func NewConfirmResetPasswordUnauthorized() *ConfirmResetPasswordUnauthorized {

	return &ConfirmResetPasswordUnauthorized{}
}

// WithPayload adds the payload to the confirm reset password unauthorized response
func (o *ConfirmResetPasswordUnauthorized) WithPayload(payload interface{}) *ConfirmResetPasswordUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the confirm reset password unauthorized response
func (o *ConfirmResetPasswordUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConfirmResetPasswordUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
