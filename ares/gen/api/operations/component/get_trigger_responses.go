// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// GetTriggerOKCode is the HTTP code returned for type GetTriggerOK
const GetTriggerOKCode int = 200

/*GetTriggerOK Status 200

swagger:response getTriggerOK
*/
type GetTriggerOK struct {

	/*
	  In: Body
	*/
	Payload *dto.GetComponentResponse `json:"body,omitempty"`
}

// NewGetTriggerOK creates GetTriggerOK with default headers values
func NewGetTriggerOK() *GetTriggerOK {

	return &GetTriggerOK{}
}

// WithPayload adds the payload to the get trigger o k response
func (o *GetTriggerOK) WithPayload(payload *dto.GetComponentResponse) *GetTriggerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get trigger o k response
func (o *GetTriggerOK) SetPayload(payload *dto.GetComponentResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTriggerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTriggerInternalServerErrorCode is the HTTP code returned for type GetTriggerInternalServerError
const GetTriggerInternalServerErrorCode int = 500

/*GetTriggerInternalServerError Internal server error

swagger:response getTriggerInternalServerError
*/
type GetTriggerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetTriggerInternalServerError creates GetTriggerInternalServerError with default headers values
func NewGetTriggerInternalServerError() *GetTriggerInternalServerError {

	return &GetTriggerInternalServerError{}
}

// WithPayload adds the payload to the get trigger internal server error response
func (o *GetTriggerInternalServerError) WithPayload(payload interface{}) *GetTriggerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get trigger internal server error response
func (o *GetTriggerInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTriggerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
