// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateActionVersionParams creates a new CreateActionVersionParams object
// no default values defined in spec.
func NewCreateActionVersionParams() CreateActionVersionParams {

	return CreateActionVersionParams{}
}

// CreateActionVersionParams contains all the bound params for the create action version operation
// typically these are obtained from a http.Request
//
// swagger:parameters CreateActionVersion
type CreateActionVersionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*the action version file
	  In: formData
	*/
	ActionFile io.ReadCloser
	/*short description of this action version
	  In: formData
	*/
	Description *string
	/*default config for this action version
	  In: formData
	*/
	ExampleConfig *string
	/*json encoded string containing the input specification of the action
	  In: formData
	*/
	InputSchema *string
	/*
	  Required: true
	  In: path
	*/
	Name string
	/*
	  Required: true
	  In: path
	*/
	OrgName string
	/*json encoded string containing the output specification of the action
	  In: formData
	*/
	OutputSchema *string
	/*describes whether or not this action version is public
	  In: formData
	*/
	Public *bool
	/*readme for this action version
	  In: formData
	*/
	Readme *string
	/*version string for this action version
	  In: formData
	*/
	Version *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateActionVersionParams() beforehand.
func (o *CreateActionVersionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	actionFile, actionFileHeader, err := r.FormFile("actionFile")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "actionFile", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else if err := o.bindActionFile(actionFile, actionFileHeader); err != nil {
		res = append(res, err)
	} else {
		o.ActionFile = &runtime.File{Data: actionFile, Header: actionFileHeader}
	}

	fdDescription, fdhkDescription, _ := fds.GetOK("description")
	if err := o.bindDescription(fdDescription, fdhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	fdExampleConfig, fdhkExampleConfig, _ := fds.GetOK("exampleConfig")
	if err := o.bindExampleConfig(fdExampleConfig, fdhkExampleConfig, route.Formats); err != nil {
		res = append(res, err)
	}

	fdInputSchema, fdhkInputSchema, _ := fds.GetOK("inputSchema")
	if err := o.bindInputSchema(fdInputSchema, fdhkInputSchema, route.Formats); err != nil {
		res = append(res, err)
	}

	rName, rhkName, _ := route.Params.GetOK("name")
	if err := o.bindName(rName, rhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	rOrgName, rhkOrgName, _ := route.Params.GetOK("orgName")
	if err := o.bindOrgName(rOrgName, rhkOrgName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdOutputSchema, fdhkOutputSchema, _ := fds.GetOK("outputSchema")
	if err := o.bindOutputSchema(fdOutputSchema, fdhkOutputSchema, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPublic, fdhkPublic, _ := fds.GetOK("public")
	if err := o.bindPublic(fdPublic, fdhkPublic, route.Formats); err != nil {
		res = append(res, err)
	}

	fdReadme, fdhkReadme, _ := fds.GetOK("readme")
	if err := o.bindReadme(fdReadme, fdhkReadme, route.Formats); err != nil {
		res = append(res, err)
	}

	fdVersion, fdhkVersion, _ := fds.GetOK("version")
	if err := o.bindVersion(fdVersion, fdhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindActionFile binds file parameter ActionFile.
//
// The only supported validations on files are MinLength and MaxLength
func (o *CreateActionVersionParams) bindActionFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindDescription binds and validates parameter Description from formData.
func (o *CreateActionVersionParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Description = &raw

	return nil
}

// bindExampleConfig binds and validates parameter ExampleConfig from formData.
func (o *CreateActionVersionParams) bindExampleConfig(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ExampleConfig = &raw

	return nil
}

// bindInputSchema binds and validates parameter InputSchema from formData.
func (o *CreateActionVersionParams) bindInputSchema(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.InputSchema = &raw

	return nil
}

// bindName binds and validates parameter Name from path.
func (o *CreateActionVersionParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Name = raw

	return nil
}

// bindOrgName binds and validates parameter OrgName from path.
func (o *CreateActionVersionParams) bindOrgName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.OrgName = raw

	return nil
}

// bindOutputSchema binds and validates parameter OutputSchema from formData.
func (o *CreateActionVersionParams) bindOutputSchema(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.OutputSchema = &raw

	return nil
}

// bindPublic binds and validates parameter Public from formData.
func (o *CreateActionVersionParams) bindPublic(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("public", "formData", "bool", raw)
	}
	o.Public = &value

	return nil
}

// bindReadme binds and validates parameter Readme from formData.
func (o *CreateActionVersionParams) bindReadme(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Readme = &raw

	return nil
}

// bindVersion binds and validates parameter Version from formData.
func (o *CreateActionVersionParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Version = &raw

	return nil
}
