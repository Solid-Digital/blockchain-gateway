// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// CreateBaseVersionHandlerFunc turns a function with the right signature into a create base version handler
type CreateBaseVersionHandlerFunc func(CreateBaseVersionParams, *dto.User) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateBaseVersionHandlerFunc) Handle(params CreateBaseVersionParams, principal *dto.User) middleware.Responder {
	return fn(params, principal)
}

// CreateBaseVersionHandler interface for that can handle valid create base version params
type CreateBaseVersionHandler interface {
	Handle(CreateBaseVersionParams, *dto.User) middleware.Responder
}

// NewCreateBaseVersion creates a new http.Handler for the create base version operation
func NewCreateBaseVersion(ctx *middleware.Context, handler CreateBaseVersionHandler) *CreateBaseVersion {
	return &CreateBaseVersion{Context: ctx, Handler: handler}
}

/*CreateBaseVersion swagger:route POST /orgs/{orgName}/bases/{name}/versions component createBaseVersion

Create base version

If the base that this version belongs to doesn't already exist, it will be created

*/
type CreateBaseVersion struct {
	Context *middleware.Context
	Handler CreateBaseVersionHandler
}

func (o *CreateBaseVersion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateBaseVersionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *dto.User
	if uprinc != nil {
		principal = uprinc.(*dto.User) // this is really a dto.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
