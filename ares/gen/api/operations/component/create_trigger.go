// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// CreateTriggerHandlerFunc turns a function with the right signature into a create trigger handler
type CreateTriggerHandlerFunc func(CreateTriggerParams, *dto.User) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateTriggerHandlerFunc) Handle(params CreateTriggerParams, principal *dto.User) middleware.Responder {
	return fn(params, principal)
}

// CreateTriggerHandler interface for that can handle valid create trigger params
type CreateTriggerHandler interface {
	Handle(CreateTriggerParams, *dto.User) middleware.Responder
}

// NewCreateTrigger creates a new http.Handler for the create trigger operation
func NewCreateTrigger(ctx *middleware.Context, handler CreateTriggerHandler) *CreateTrigger {
	return &CreateTrigger{Context: ctx, Handler: handler}
}

/*CreateTrigger swagger:route POST /orgs/{orgName}/triggers component createTrigger

Create new trigger

*/
type CreateTrigger struct {
	Context *middleware.Context
	Handler CreateTriggerHandler
}

func (o *CreateTrigger) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateTriggerParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *dto.User
	if uprinc != nil {
		principal = uprinc.(*dto.User) // this is really a dto.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
