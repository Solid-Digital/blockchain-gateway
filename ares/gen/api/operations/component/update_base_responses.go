// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// UpdateBaseOKCode is the HTTP code returned for type UpdateBaseOK
const UpdateBaseOKCode int = 200

/*UpdateBaseOK Status 200

swagger:response updateBaseOK
*/
type UpdateBaseOK struct {

	/*
	  In: Body
	*/
	Payload *dto.GetComponentResponse `json:"body,omitempty"`
}

// NewUpdateBaseOK creates UpdateBaseOK with default headers values
func NewUpdateBaseOK() *UpdateBaseOK {

	return &UpdateBaseOK{}
}

// WithPayload adds the payload to the update base o k response
func (o *UpdateBaseOK) WithPayload(payload *dto.GetComponentResponse) *UpdateBaseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update base o k response
func (o *UpdateBaseOK) SetPayload(payload *dto.GetComponentResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBaseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateBaseInternalServerErrorCode is the HTTP code returned for type UpdateBaseInternalServerError
const UpdateBaseInternalServerErrorCode int = 500

/*UpdateBaseInternalServerError Internal server error

swagger:response updateBaseInternalServerError
*/
type UpdateBaseInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewUpdateBaseInternalServerError creates UpdateBaseInternalServerError with default headers values
func NewUpdateBaseInternalServerError() *UpdateBaseInternalServerError {

	return &UpdateBaseInternalServerError{}
}

// WithPayload adds the payload to the update base internal server error response
func (o *UpdateBaseInternalServerError) WithPayload(payload interface{}) *UpdateBaseInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update base internal server error response
func (o *UpdateBaseInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateBaseInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
