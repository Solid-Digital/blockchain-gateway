// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"bitbucket.org/unchain/ares/gen/api/operations/auth"
	"bitbucket.org/unchain/ares/gen/api/operations/component"
	"bitbucket.org/unchain/ares/gen/api/operations/hello"
	"bitbucket.org/unchain/ares/gen/api/operations/organization"
	"bitbucket.org/unchain/ares/gen/api/operations/pipeline"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// NewAresAPI creates a new Ares instance
func NewAresAPI(spec *loads.Document) *AresAPI {
	return &AresAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		customConsumers:       make(map[string]runtime.Consumer),
		customProducers:       make(map[string]runtime.Producer),
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		UrlformConsumer:       runtime.DiscardConsumer,
		MultipartformConsumer: runtime.DiscardConsumer,
		TxtConsumer:           runtime.TextConsumer(),
		JSONProducer:          runtime.JSONProducer(),
		TxtProducer:           runtime.TextProducer(),
		AuthChangeCurrentPasswordHandler: auth.ChangeCurrentPasswordHandlerFunc(func(params auth.ChangeCurrentPasswordParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation AuthChangeCurrentPassword has not yet been implemented")
		}),
		AuthConfirmRegistrationHandler: auth.ConfirmRegistrationHandlerFunc(func(params auth.ConfirmRegistrationParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthConfirmRegistration has not yet been implemented")
		}),
		AuthConfirmResetPasswordHandler: auth.ConfirmResetPasswordHandlerFunc(func(params auth.ConfirmResetPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthConfirmResetPassword has not yet been implemented")
		}),
		ComponentCreateActionHandler: component.CreateActionHandlerFunc(func(params component.CreateActionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentCreateAction has not yet been implemented")
		}),
		ComponentCreateActionVersionHandler: component.CreateActionVersionHandlerFunc(func(params component.CreateActionVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentCreateActionVersion has not yet been implemented")
		}),
		ComponentCreateBaseHandler: component.CreateBaseHandlerFunc(func(params component.CreateBaseParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentCreateBase has not yet been implemented")
		}),
		ComponentCreateBaseVersionHandler: component.CreateBaseVersionHandlerFunc(func(params component.CreateBaseVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentCreateBaseVersion has not yet been implemented")
		}),
		PipelineCreateEnvironmentVariableHandler: pipeline.CreateEnvironmentVariableHandlerFunc(func(params pipeline.CreateEnvironmentVariableParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineCreateEnvironmentVariable has not yet been implemented")
		}),
		OrganizationCreateOrganizationHandler: organization.CreateOrganizationHandlerFunc(func(params organization.CreateOrganizationParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationCreateOrganization has not yet been implemented")
		}),
		PipelineCreatePipelineHandler: pipeline.CreatePipelineHandlerFunc(func(params pipeline.CreatePipelineParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineCreatePipeline has not yet been implemented")
		}),
		AuthCreateRegistrationHandler: auth.CreateRegistrationHandlerFunc(func(params auth.CreateRegistrationParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthCreateRegistration has not yet been implemented")
		}),
		ComponentCreateTriggerHandler: component.CreateTriggerHandlerFunc(func(params component.CreateTriggerParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentCreateTrigger has not yet been implemented")
		}),
		ComponentCreateTriggerVersionHandler: component.CreateTriggerVersionHandlerFunc(func(params component.CreateTriggerVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentCreateTriggerVersion has not yet been implemented")
		}),
		AuthDeleteCurrentUserHandler: auth.DeleteCurrentUserHandlerFunc(func(params auth.DeleteCurrentUserParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation AuthDeleteCurrentUser has not yet been implemented")
		}),
		PipelineDeleteEnvironmentVariableHandler: pipeline.DeleteEnvironmentVariableHandlerFunc(func(params pipeline.DeleteEnvironmentVariableParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineDeleteEnvironmentVariable has not yet been implemented")
		}),
		PipelineDeletePipelineHandler: pipeline.DeletePipelineHandlerFunc(func(params pipeline.DeletePipelineParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineDeletePipeline has not yet been implemented")
		}),
		PipelineDeployConfigurationHandler: pipeline.DeployConfigurationHandlerFunc(func(params pipeline.DeployConfigurationParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineDeployConfiguration has not yet been implemented")
		}),
		ComponentGetActionHandler: component.GetActionHandlerFunc(func(params component.GetActionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetAction has not yet been implemented")
		}),
		ComponentGetActionVersionHandler: component.GetActionVersionHandlerFunc(func(params component.GetActionVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetActionVersion has not yet been implemented")
		}),
		ComponentGetAllActionsHandler: component.GetAllActionsHandlerFunc(func(params component.GetAllActionsParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetAllActions has not yet been implemented")
		}),
		ComponentGetAllBasesHandler: component.GetAllBasesHandlerFunc(func(params component.GetAllBasesParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetAllBases has not yet been implemented")
		}),
		PipelineGetAllEnvironmentVariablesHandler: pipeline.GetAllEnvironmentVariablesHandlerFunc(func(params pipeline.GetAllEnvironmentVariablesParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetAllEnvironmentVariables has not yet been implemented")
		}),
		OrganizationGetAllMembersHandler: organization.GetAllMembersHandlerFunc(func(params organization.GetAllMembersParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationGetAllMembers has not yet been implemented")
		}),
		OrganizationGetAllOrganizationsHandler: organization.GetAllOrganizationsHandlerFunc(func(params organization.GetAllOrganizationsParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationGetAllOrganizations has not yet been implemented")
		}),
		PipelineGetAllPipelinesHandler: pipeline.GetAllPipelinesHandlerFunc(func(params pipeline.GetAllPipelinesParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetAllPipelines has not yet been implemented")
		}),
		ComponentGetAllPublicActionsHandler: component.GetAllPublicActionsHandlerFunc(func(params component.GetAllPublicActionsParams) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetAllPublicActions has not yet been implemented")
		}),
		ComponentGetAllPublicTriggersHandler: component.GetAllPublicTriggersHandlerFunc(func(params component.GetAllPublicTriggersParams) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetAllPublicTriggers has not yet been implemented")
		}),
		ComponentGetAllTriggersHandler: component.GetAllTriggersHandlerFunc(func(params component.GetAllTriggersParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetAllTriggers has not yet been implemented")
		}),
		ComponentGetBaseHandler: component.GetBaseHandlerFunc(func(params component.GetBaseParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetBase has not yet been implemented")
		}),
		ComponentGetBaseVersionHandler: component.GetBaseVersionHandlerFunc(func(params component.GetBaseVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetBaseVersion has not yet been implemented")
		}),
		PipelineGetConfigurationHandler: pipeline.GetConfigurationHandlerFunc(func(params pipeline.GetConfigurationParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetConfiguration has not yet been implemented")
		}),
		AuthGetCurrentUserHandler: auth.GetCurrentUserHandlerFunc(func(params auth.GetCurrentUserParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation AuthGetCurrentUser has not yet been implemented")
		}),
		PipelineGetDeploymentHandler: pipeline.GetDeploymentHandlerFunc(func(params pipeline.GetDeploymentParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetDeployment has not yet been implemented")
		}),
		PipelineGetDeploymentLogsHandler: pipeline.GetDeploymentLogsHandlerFunc(func(params pipeline.GetDeploymentLogsParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetDeploymentLogs has not yet been implemented")
		}),
		PipelineGetDraftConfigurationHandler: pipeline.GetDraftConfigurationHandlerFunc(func(params pipeline.GetDraftConfigurationParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetDraftConfiguration has not yet been implemented")
		}),
		OrganizationGetMemberHandler: organization.GetMemberHandlerFunc(func(params organization.GetMemberParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationGetMember has not yet been implemented")
		}),
		OrganizationGetOrganizationHandler: organization.GetOrganizationHandlerFunc(func(params organization.GetOrganizationParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationGetOrganization has not yet been implemented")
		}),
		PipelineGetPipelineHandler: pipeline.GetPipelineHandlerFunc(func(params pipeline.GetPipelineParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineGetPipeline has not yet been implemented")
		}),
		ComponentGetPublicActionHandler: component.GetPublicActionHandlerFunc(func(params component.GetPublicActionParams) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetPublicAction has not yet been implemented")
		}),
		ComponentGetPublicActionVersionHandler: component.GetPublicActionVersionHandlerFunc(func(params component.GetPublicActionVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetPublicActionVersion has not yet been implemented")
		}),
		ComponentGetPublicTriggerHandler: component.GetPublicTriggerHandlerFunc(func(params component.GetPublicTriggerParams) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetPublicTrigger has not yet been implemented")
		}),
		ComponentGetPublicTriggerVersionHandler: component.GetPublicTriggerVersionHandlerFunc(func(params component.GetPublicTriggerVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetPublicTriggerVersion has not yet been implemented")
		}),
		ComponentGetTriggerHandler: component.GetTriggerHandlerFunc(func(params component.GetTriggerParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetTrigger has not yet been implemented")
		}),
		ComponentGetTriggerVersionHandler: component.GetTriggerVersionHandlerFunc(func(params component.GetTriggerVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentGetTriggerVersion has not yet been implemented")
		}),
		HelloHelloHandler: hello.HelloHandlerFunc(func(params hello.HelloParams) middleware.Responder {
			return middleware.NotImplemented("operation HelloHello has not yet been implemented")
		}),
		OrganizationInviteMemberHandler: organization.InviteMemberHandlerFunc(func(params organization.InviteMemberParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationInviteMember has not yet been implemented")
		}),
		AuthLoginHandler: auth.LoginHandlerFunc(func(params auth.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthLogin has not yet been implemented")
		}),
		AuthLogoutHandler: auth.LogoutHandlerFunc(func(params auth.LogoutParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation AuthLogout has not yet been implemented")
		}),
		AuthRedirectToRegistrationHandler: auth.RedirectToRegistrationHandlerFunc(func(params auth.RedirectToRegistrationParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthRedirectToRegistration has not yet been implemented")
		}),
		PipelineRemoveDeploymentHandler: pipeline.RemoveDeploymentHandlerFunc(func(params pipeline.RemoveDeploymentParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineRemoveDeployment has not yet been implemented")
		}),
		OrganizationRemoveMemberHandler: organization.RemoveMemberHandlerFunc(func(params organization.RemoveMemberParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationRemoveMember has not yet been implemented")
		}),
		AuthResetPasswordHandler: auth.ResetPasswordHandlerFunc(func(params auth.ResetPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthResetPassword has not yet been implemented")
		}),
		PipelineSaveDraftConfigurationAsNewHandler: pipeline.SaveDraftConfigurationAsNewHandlerFunc(func(params pipeline.SaveDraftConfigurationAsNewParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineSaveDraftConfigurationAsNew has not yet been implemented")
		}),
		OrganizationSetMemberRolesHandler: organization.SetMemberRolesHandlerFunc(func(params organization.SetMemberRolesParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationSetMemberRoles has not yet been implemented")
		}),
		ComponentUpdateActionHandler: component.UpdateActionHandlerFunc(func(params component.UpdateActionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentUpdateAction has not yet been implemented")
		}),
		ComponentUpdateActionVersionHandler: component.UpdateActionVersionHandlerFunc(func(params component.UpdateActionVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentUpdateActionVersion has not yet been implemented")
		}),
		ComponentUpdateBaseHandler: component.UpdateBaseHandlerFunc(func(params component.UpdateBaseParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentUpdateBase has not yet been implemented")
		}),
		ComponentUpdateBaseVersionHandler: component.UpdateBaseVersionHandlerFunc(func(params component.UpdateBaseVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentUpdateBaseVersion has not yet been implemented")
		}),
		AuthUpdateCurrentUserHandler: auth.UpdateCurrentUserHandlerFunc(func(params auth.UpdateCurrentUserParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation AuthUpdateCurrentUser has not yet been implemented")
		}),
		PipelineUpdateDraftConfigurationHandler: pipeline.UpdateDraftConfigurationHandlerFunc(func(params pipeline.UpdateDraftConfigurationParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineUpdateDraftConfiguration has not yet been implemented")
		}),
		PipelineUpdateEnvironmentVariableHandler: pipeline.UpdateEnvironmentVariableHandlerFunc(func(params pipeline.UpdateEnvironmentVariableParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineUpdateEnvironmentVariable has not yet been implemented")
		}),
		OrganizationUpdateOrganizationHandler: organization.UpdateOrganizationHandlerFunc(func(params organization.UpdateOrganizationParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation OrganizationUpdateOrganization has not yet been implemented")
		}),
		PipelineUpdatePipelineHandler: pipeline.UpdatePipelineHandlerFunc(func(params pipeline.UpdatePipelineParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation PipelineUpdatePipeline has not yet been implemented")
		}),
		ComponentUpdateTriggerHandler: component.UpdateTriggerHandlerFunc(func(params component.UpdateTriggerParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentUpdateTrigger has not yet been implemented")
		}),
		ComponentUpdateTriggerVersionHandler: component.UpdateTriggerVersionHandlerFunc(func(params component.UpdateTriggerVersionParams, principal *dto.User) middleware.Responder {
			return middleware.NotImplemented("operation ComponentUpdateTriggerVersion has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		TokenAuthenticationAuth: func(token string) (*dto.User, error) {
			return nil, errors.NotImplemented("api key auth (Token authentication) Authorization from header param [Authorization] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*AresAPI No description */
type AresAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for a "application/x-www-form-urlencoded" mime type
	UrlformConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer
	// TxtConsumer registers a consumer for a "text/plain" mime type
	TxtConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// TokenAuthenticationAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	TokenAuthenticationAuth func(string) (*dto.User, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AuthChangeCurrentPasswordHandler sets the operation handler for the change current password operation
	AuthChangeCurrentPasswordHandler auth.ChangeCurrentPasswordHandler
	// AuthConfirmRegistrationHandler sets the operation handler for the confirm registration operation
	AuthConfirmRegistrationHandler auth.ConfirmRegistrationHandler
	// AuthConfirmResetPasswordHandler sets the operation handler for the confirm reset password operation
	AuthConfirmResetPasswordHandler auth.ConfirmResetPasswordHandler
	// ComponentCreateActionHandler sets the operation handler for the create action operation
	ComponentCreateActionHandler component.CreateActionHandler
	// ComponentCreateActionVersionHandler sets the operation handler for the create action version operation
	ComponentCreateActionVersionHandler component.CreateActionVersionHandler
	// ComponentCreateBaseHandler sets the operation handler for the create base operation
	ComponentCreateBaseHandler component.CreateBaseHandler
	// ComponentCreateBaseVersionHandler sets the operation handler for the create base version operation
	ComponentCreateBaseVersionHandler component.CreateBaseVersionHandler
	// PipelineCreateEnvironmentVariableHandler sets the operation handler for the create environment variable operation
	PipelineCreateEnvironmentVariableHandler pipeline.CreateEnvironmentVariableHandler
	// OrganizationCreateOrganizationHandler sets the operation handler for the create organization operation
	OrganizationCreateOrganizationHandler organization.CreateOrganizationHandler
	// PipelineCreatePipelineHandler sets the operation handler for the create pipeline operation
	PipelineCreatePipelineHandler pipeline.CreatePipelineHandler
	// AuthCreateRegistrationHandler sets the operation handler for the create registration operation
	AuthCreateRegistrationHandler auth.CreateRegistrationHandler
	// ComponentCreateTriggerHandler sets the operation handler for the create trigger operation
	ComponentCreateTriggerHandler component.CreateTriggerHandler
	// ComponentCreateTriggerVersionHandler sets the operation handler for the create trigger version operation
	ComponentCreateTriggerVersionHandler component.CreateTriggerVersionHandler
	// AuthDeleteCurrentUserHandler sets the operation handler for the delete current user operation
	AuthDeleteCurrentUserHandler auth.DeleteCurrentUserHandler
	// PipelineDeleteEnvironmentVariableHandler sets the operation handler for the delete environment variable operation
	PipelineDeleteEnvironmentVariableHandler pipeline.DeleteEnvironmentVariableHandler
	// PipelineDeletePipelineHandler sets the operation handler for the delete pipeline operation
	PipelineDeletePipelineHandler pipeline.DeletePipelineHandler
	// PipelineDeployConfigurationHandler sets the operation handler for the deploy configuration operation
	PipelineDeployConfigurationHandler pipeline.DeployConfigurationHandler
	// ComponentGetActionHandler sets the operation handler for the get action operation
	ComponentGetActionHandler component.GetActionHandler
	// ComponentGetActionVersionHandler sets the operation handler for the get action version operation
	ComponentGetActionVersionHandler component.GetActionVersionHandler
	// ComponentGetAllActionsHandler sets the operation handler for the get all actions operation
	ComponentGetAllActionsHandler component.GetAllActionsHandler
	// ComponentGetAllBasesHandler sets the operation handler for the get all bases operation
	ComponentGetAllBasesHandler component.GetAllBasesHandler
	// PipelineGetAllEnvironmentVariablesHandler sets the operation handler for the get all environment variables operation
	PipelineGetAllEnvironmentVariablesHandler pipeline.GetAllEnvironmentVariablesHandler
	// OrganizationGetAllMembersHandler sets the operation handler for the get all members operation
	OrganizationGetAllMembersHandler organization.GetAllMembersHandler
	// OrganizationGetAllOrganizationsHandler sets the operation handler for the get all organizations operation
	OrganizationGetAllOrganizationsHandler organization.GetAllOrganizationsHandler
	// PipelineGetAllPipelinesHandler sets the operation handler for the get all pipelines operation
	PipelineGetAllPipelinesHandler pipeline.GetAllPipelinesHandler
	// ComponentGetAllPublicActionsHandler sets the operation handler for the get all public actions operation
	ComponentGetAllPublicActionsHandler component.GetAllPublicActionsHandler
	// ComponentGetAllPublicTriggersHandler sets the operation handler for the get all public triggers operation
	ComponentGetAllPublicTriggersHandler component.GetAllPublicTriggersHandler
	// ComponentGetAllTriggersHandler sets the operation handler for the get all triggers operation
	ComponentGetAllTriggersHandler component.GetAllTriggersHandler
	// ComponentGetBaseHandler sets the operation handler for the get base operation
	ComponentGetBaseHandler component.GetBaseHandler
	// ComponentGetBaseVersionHandler sets the operation handler for the get base version operation
	ComponentGetBaseVersionHandler component.GetBaseVersionHandler
	// PipelineGetConfigurationHandler sets the operation handler for the get configuration operation
	PipelineGetConfigurationHandler pipeline.GetConfigurationHandler
	// AuthGetCurrentUserHandler sets the operation handler for the get current user operation
	AuthGetCurrentUserHandler auth.GetCurrentUserHandler
	// PipelineGetDeploymentHandler sets the operation handler for the get deployment operation
	PipelineGetDeploymentHandler pipeline.GetDeploymentHandler
	// PipelineGetDeploymentLogsHandler sets the operation handler for the get deployment logs operation
	PipelineGetDeploymentLogsHandler pipeline.GetDeploymentLogsHandler
	// PipelineGetDraftConfigurationHandler sets the operation handler for the get draft configuration operation
	PipelineGetDraftConfigurationHandler pipeline.GetDraftConfigurationHandler
	// OrganizationGetMemberHandler sets the operation handler for the get member operation
	OrganizationGetMemberHandler organization.GetMemberHandler
	// OrganizationGetOrganizationHandler sets the operation handler for the get organization operation
	OrganizationGetOrganizationHandler organization.GetOrganizationHandler
	// PipelineGetPipelineHandler sets the operation handler for the get pipeline operation
	PipelineGetPipelineHandler pipeline.GetPipelineHandler
	// ComponentGetPublicActionHandler sets the operation handler for the get public action operation
	ComponentGetPublicActionHandler component.GetPublicActionHandler
	// ComponentGetPublicActionVersionHandler sets the operation handler for the get public action version operation
	ComponentGetPublicActionVersionHandler component.GetPublicActionVersionHandler
	// ComponentGetPublicTriggerHandler sets the operation handler for the get public trigger operation
	ComponentGetPublicTriggerHandler component.GetPublicTriggerHandler
	// ComponentGetPublicTriggerVersionHandler sets the operation handler for the get public trigger version operation
	ComponentGetPublicTriggerVersionHandler component.GetPublicTriggerVersionHandler
	// ComponentGetTriggerHandler sets the operation handler for the get trigger operation
	ComponentGetTriggerHandler component.GetTriggerHandler
	// ComponentGetTriggerVersionHandler sets the operation handler for the get trigger version operation
	ComponentGetTriggerVersionHandler component.GetTriggerVersionHandler
	// HelloHelloHandler sets the operation handler for the hello operation
	HelloHelloHandler hello.HelloHandler
	// OrganizationInviteMemberHandler sets the operation handler for the invite member operation
	OrganizationInviteMemberHandler organization.InviteMemberHandler
	// AuthLoginHandler sets the operation handler for the login operation
	AuthLoginHandler auth.LoginHandler
	// AuthLogoutHandler sets the operation handler for the logout operation
	AuthLogoutHandler auth.LogoutHandler
	// AuthRedirectToRegistrationHandler sets the operation handler for the redirect to registration operation
	AuthRedirectToRegistrationHandler auth.RedirectToRegistrationHandler
	// PipelineRemoveDeploymentHandler sets the operation handler for the remove deployment operation
	PipelineRemoveDeploymentHandler pipeline.RemoveDeploymentHandler
	// OrganizationRemoveMemberHandler sets the operation handler for the remove member operation
	OrganizationRemoveMemberHandler organization.RemoveMemberHandler
	// AuthResetPasswordHandler sets the operation handler for the reset password operation
	AuthResetPasswordHandler auth.ResetPasswordHandler
	// PipelineSaveDraftConfigurationAsNewHandler sets the operation handler for the save draft configuration as new operation
	PipelineSaveDraftConfigurationAsNewHandler pipeline.SaveDraftConfigurationAsNewHandler
	// OrganizationSetMemberRolesHandler sets the operation handler for the set member roles operation
	OrganizationSetMemberRolesHandler organization.SetMemberRolesHandler
	// ComponentUpdateActionHandler sets the operation handler for the update action operation
	ComponentUpdateActionHandler component.UpdateActionHandler
	// ComponentUpdateActionVersionHandler sets the operation handler for the update action version operation
	ComponentUpdateActionVersionHandler component.UpdateActionVersionHandler
	// ComponentUpdateBaseHandler sets the operation handler for the update base operation
	ComponentUpdateBaseHandler component.UpdateBaseHandler
	// ComponentUpdateBaseVersionHandler sets the operation handler for the update base version operation
	ComponentUpdateBaseVersionHandler component.UpdateBaseVersionHandler
	// AuthUpdateCurrentUserHandler sets the operation handler for the update current user operation
	AuthUpdateCurrentUserHandler auth.UpdateCurrentUserHandler
	// PipelineUpdateDraftConfigurationHandler sets the operation handler for the update draft configuration operation
	PipelineUpdateDraftConfigurationHandler pipeline.UpdateDraftConfigurationHandler
	// PipelineUpdateEnvironmentVariableHandler sets the operation handler for the update environment variable operation
	PipelineUpdateEnvironmentVariableHandler pipeline.UpdateEnvironmentVariableHandler
	// OrganizationUpdateOrganizationHandler sets the operation handler for the update organization operation
	OrganizationUpdateOrganizationHandler organization.UpdateOrganizationHandler
	// PipelineUpdatePipelineHandler sets the operation handler for the update pipeline operation
	PipelineUpdatePipelineHandler pipeline.UpdatePipelineHandler
	// ComponentUpdateTriggerHandler sets the operation handler for the update trigger operation
	ComponentUpdateTriggerHandler component.UpdateTriggerHandler
	// ComponentUpdateTriggerVersionHandler sets the operation handler for the update trigger version operation
	ComponentUpdateTriggerVersionHandler component.UpdateTriggerVersionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *AresAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AresAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AresAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AresAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AresAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AresAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AresAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AresAPI
func (o *AresAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.TxtConsumer == nil {
		unregistered = append(unregistered, "TxtConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.TokenAuthenticationAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.AuthChangeCurrentPasswordHandler == nil {
		unregistered = append(unregistered, "auth.ChangeCurrentPasswordHandler")
	}

	if o.AuthConfirmRegistrationHandler == nil {
		unregistered = append(unregistered, "auth.ConfirmRegistrationHandler")
	}

	if o.AuthConfirmResetPasswordHandler == nil {
		unregistered = append(unregistered, "auth.ConfirmResetPasswordHandler")
	}

	if o.ComponentCreateActionHandler == nil {
		unregistered = append(unregistered, "component.CreateActionHandler")
	}

	if o.ComponentCreateActionVersionHandler == nil {
		unregistered = append(unregistered, "component.CreateActionVersionHandler")
	}

	if o.ComponentCreateBaseHandler == nil {
		unregistered = append(unregistered, "component.CreateBaseHandler")
	}

	if o.ComponentCreateBaseVersionHandler == nil {
		unregistered = append(unregistered, "component.CreateBaseVersionHandler")
	}

	if o.PipelineCreateEnvironmentVariableHandler == nil {
		unregistered = append(unregistered, "pipeline.CreateEnvironmentVariableHandler")
	}

	if o.OrganizationCreateOrganizationHandler == nil {
		unregistered = append(unregistered, "organization.CreateOrganizationHandler")
	}

	if o.PipelineCreatePipelineHandler == nil {
		unregistered = append(unregistered, "pipeline.CreatePipelineHandler")
	}

	if o.AuthCreateRegistrationHandler == nil {
		unregistered = append(unregistered, "auth.CreateRegistrationHandler")
	}

	if o.ComponentCreateTriggerHandler == nil {
		unregistered = append(unregistered, "component.CreateTriggerHandler")
	}

	if o.ComponentCreateTriggerVersionHandler == nil {
		unregistered = append(unregistered, "component.CreateTriggerVersionHandler")
	}

	if o.AuthDeleteCurrentUserHandler == nil {
		unregistered = append(unregistered, "auth.DeleteCurrentUserHandler")
	}

	if o.PipelineDeleteEnvironmentVariableHandler == nil {
		unregistered = append(unregistered, "pipeline.DeleteEnvironmentVariableHandler")
	}

	if o.PipelineDeletePipelineHandler == nil {
		unregistered = append(unregistered, "pipeline.DeletePipelineHandler")
	}

	if o.PipelineDeployConfigurationHandler == nil {
		unregistered = append(unregistered, "pipeline.DeployConfigurationHandler")
	}

	if o.ComponentGetActionHandler == nil {
		unregistered = append(unregistered, "component.GetActionHandler")
	}

	if o.ComponentGetActionVersionHandler == nil {
		unregistered = append(unregistered, "component.GetActionVersionHandler")
	}

	if o.ComponentGetAllActionsHandler == nil {
		unregistered = append(unregistered, "component.GetAllActionsHandler")
	}

	if o.ComponentGetAllBasesHandler == nil {
		unregistered = append(unregistered, "component.GetAllBasesHandler")
	}

	if o.PipelineGetAllEnvironmentVariablesHandler == nil {
		unregistered = append(unregistered, "pipeline.GetAllEnvironmentVariablesHandler")
	}

	if o.OrganizationGetAllMembersHandler == nil {
		unregistered = append(unregistered, "organization.GetAllMembersHandler")
	}

	if o.OrganizationGetAllOrganizationsHandler == nil {
		unregistered = append(unregistered, "organization.GetAllOrganizationsHandler")
	}

	if o.PipelineGetAllPipelinesHandler == nil {
		unregistered = append(unregistered, "pipeline.GetAllPipelinesHandler")
	}

	if o.ComponentGetAllPublicActionsHandler == nil {
		unregistered = append(unregistered, "component.GetAllPublicActionsHandler")
	}

	if o.ComponentGetAllPublicTriggersHandler == nil {
		unregistered = append(unregistered, "component.GetAllPublicTriggersHandler")
	}

	if o.ComponentGetAllTriggersHandler == nil {
		unregistered = append(unregistered, "component.GetAllTriggersHandler")
	}

	if o.ComponentGetBaseHandler == nil {
		unregistered = append(unregistered, "component.GetBaseHandler")
	}

	if o.ComponentGetBaseVersionHandler == nil {
		unregistered = append(unregistered, "component.GetBaseVersionHandler")
	}

	if o.PipelineGetConfigurationHandler == nil {
		unregistered = append(unregistered, "pipeline.GetConfigurationHandler")
	}

	if o.AuthGetCurrentUserHandler == nil {
		unregistered = append(unregistered, "auth.GetCurrentUserHandler")
	}

	if o.PipelineGetDeploymentHandler == nil {
		unregistered = append(unregistered, "pipeline.GetDeploymentHandler")
	}

	if o.PipelineGetDeploymentLogsHandler == nil {
		unregistered = append(unregistered, "pipeline.GetDeploymentLogsHandler")
	}

	if o.PipelineGetDraftConfigurationHandler == nil {
		unregistered = append(unregistered, "pipeline.GetDraftConfigurationHandler")
	}

	if o.OrganizationGetMemberHandler == nil {
		unregistered = append(unregistered, "organization.GetMemberHandler")
	}

	if o.OrganizationGetOrganizationHandler == nil {
		unregistered = append(unregistered, "organization.GetOrganizationHandler")
	}

	if o.PipelineGetPipelineHandler == nil {
		unregistered = append(unregistered, "pipeline.GetPipelineHandler")
	}

	if o.ComponentGetPublicActionHandler == nil {
		unregistered = append(unregistered, "component.GetPublicActionHandler")
	}

	if o.ComponentGetPublicActionVersionHandler == nil {
		unregistered = append(unregistered, "component.GetPublicActionVersionHandler")
	}

	if o.ComponentGetPublicTriggerHandler == nil {
		unregistered = append(unregistered, "component.GetPublicTriggerHandler")
	}

	if o.ComponentGetPublicTriggerVersionHandler == nil {
		unregistered = append(unregistered, "component.GetPublicTriggerVersionHandler")
	}

	if o.ComponentGetTriggerHandler == nil {
		unregistered = append(unregistered, "component.GetTriggerHandler")
	}

	if o.ComponentGetTriggerVersionHandler == nil {
		unregistered = append(unregistered, "component.GetTriggerVersionHandler")
	}

	if o.HelloHelloHandler == nil {
		unregistered = append(unregistered, "hello.HelloHandler")
	}

	if o.OrganizationInviteMemberHandler == nil {
		unregistered = append(unregistered, "organization.InviteMemberHandler")
	}

	if o.AuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.LoginHandler")
	}

	if o.AuthLogoutHandler == nil {
		unregistered = append(unregistered, "auth.LogoutHandler")
	}

	if o.AuthRedirectToRegistrationHandler == nil {
		unregistered = append(unregistered, "auth.RedirectToRegistrationHandler")
	}

	if o.PipelineRemoveDeploymentHandler == nil {
		unregistered = append(unregistered, "pipeline.RemoveDeploymentHandler")
	}

	if o.OrganizationRemoveMemberHandler == nil {
		unregistered = append(unregistered, "organization.RemoveMemberHandler")
	}

	if o.AuthResetPasswordHandler == nil {
		unregistered = append(unregistered, "auth.ResetPasswordHandler")
	}

	if o.PipelineSaveDraftConfigurationAsNewHandler == nil {
		unregistered = append(unregistered, "pipeline.SaveDraftConfigurationAsNewHandler")
	}

	if o.OrganizationSetMemberRolesHandler == nil {
		unregistered = append(unregistered, "organization.SetMemberRolesHandler")
	}

	if o.ComponentUpdateActionHandler == nil {
		unregistered = append(unregistered, "component.UpdateActionHandler")
	}

	if o.ComponentUpdateActionVersionHandler == nil {
		unregistered = append(unregistered, "component.UpdateActionVersionHandler")
	}

	if o.ComponentUpdateBaseHandler == nil {
		unregistered = append(unregistered, "component.UpdateBaseHandler")
	}

	if o.ComponentUpdateBaseVersionHandler == nil {
		unregistered = append(unregistered, "component.UpdateBaseVersionHandler")
	}

	if o.AuthUpdateCurrentUserHandler == nil {
		unregistered = append(unregistered, "auth.UpdateCurrentUserHandler")
	}

	if o.PipelineUpdateDraftConfigurationHandler == nil {
		unregistered = append(unregistered, "pipeline.UpdateDraftConfigurationHandler")
	}

	if o.PipelineUpdateEnvironmentVariableHandler == nil {
		unregistered = append(unregistered, "pipeline.UpdateEnvironmentVariableHandler")
	}

	if o.OrganizationUpdateOrganizationHandler == nil {
		unregistered = append(unregistered, "organization.UpdateOrganizationHandler")
	}

	if o.PipelineUpdatePipelineHandler == nil {
		unregistered = append(unregistered, "pipeline.UpdatePipelineHandler")
	}

	if o.ComponentUpdateTriggerHandler == nil {
		unregistered = append(unregistered, "component.UpdateTriggerHandler")
	}

	if o.ComponentUpdateTriggerVersionHandler == nil {
		unregistered = append(unregistered, "component.UpdateTriggerVersionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AresAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AresAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "Token authentication":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.TokenAuthenticationAuth(token)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *AresAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *AresAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		case "text/plain":
			result["text/plain"] = o.TxtConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *AresAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AresAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the ares API
func (o *AresAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AresAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/password/change"] = auth.NewChangeCurrentPassword(o.context, o.AuthChangeCurrentPasswordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/registration/confirm"] = auth.NewConfirmRegistration(o.context, o.AuthConfirmRegistrationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/password/reset/confirm"] = auth.NewConfirmResetPassword(o.context, o.AuthConfirmResetPasswordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/actions"] = component.NewCreateAction(o.context, o.ComponentCreateActionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/actions/{name}/versions"] = component.NewCreateActionVersion(o.context, o.ComponentCreateActionVersionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/bases"] = component.NewCreateBase(o.context, o.ComponentCreateBaseHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/bases/{name}/versions"] = component.NewCreateBaseVersion(o.context, o.ComponentCreateBaseVersionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/vars"] = pipeline.NewCreateEnvironmentVariable(o.context, o.PipelineCreateEnvironmentVariableHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs"] = organization.NewCreateOrganization(o.context, o.OrganizationCreateOrganizationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/pipelines"] = pipeline.NewCreatePipeline(o.context, o.PipelineCreatePipelineHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/registration"] = auth.NewCreateRegistration(o.context, o.AuthCreateRegistrationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/triggers"] = component.NewCreateTrigger(o.context, o.ComponentCreateTriggerHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/triggers/{name}/versions"] = component.NewCreateTriggerVersion(o.context, o.ComponentCreateTriggerVersionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/auth/user"] = auth.NewDeleteCurrentUser(o.context, o.AuthDeleteCurrentUserHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/vars/{varID}"] = pipeline.NewDeleteEnvironmentVariable(o.context, o.PipelineDeleteEnvironmentVariableHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/orgs/{orgName}/pipelines/{pipelineName}"] = pipeline.NewDeletePipeline(o.context, o.PipelineDeletePipelineHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment"] = pipeline.NewDeployConfiguration(o.context, o.PipelineDeployConfigurationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/actions/{name}"] = component.NewGetAction(o.context, o.ComponentGetActionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/actions/{name}/versions/{version}"] = component.NewGetActionVersion(o.context, o.ComponentGetActionVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/actions"] = component.NewGetAllActions(o.context, o.ComponentGetAllActionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/bases"] = component.NewGetAllBases(o.context, o.ComponentGetAllBasesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/vars"] = pipeline.NewGetAllEnvironmentVariables(o.context, o.PipelineGetAllEnvironmentVariablesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/members"] = organization.NewGetAllMembers(o.context, o.OrganizationGetAllMembersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs"] = organization.NewGetAllOrganizations(o.context, o.OrganizationGetAllOrganizationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/pipelines"] = pipeline.NewGetAllPipelines(o.context, o.PipelineGetAllPipelinesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actions"] = component.NewGetAllPublicActions(o.context, o.ComponentGetAllPublicActionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/triggers"] = component.NewGetAllPublicTriggers(o.context, o.ComponentGetAllPublicTriggersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/triggers"] = component.NewGetAllTriggers(o.context, o.ComponentGetAllTriggersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/bases/{name}"] = component.NewGetBase(o.context, o.ComponentGetBaseHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/bases/{name}/versions/{version}"] = component.NewGetBaseVersion(o.context, o.ComponentGetBaseVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/pipelines/{pipelineName}/configurations/{revision}"] = pipeline.NewGetConfiguration(o.context, o.PipelineGetConfigurationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/user"] = auth.NewGetCurrentUser(o.context, o.AuthGetCurrentUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment"] = pipeline.NewGetDeployment(o.context, o.PipelineGetDeploymentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment/logs"] = pipeline.NewGetDeploymentLogs(o.context, o.PipelineGetDeploymentLogsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/pipelines/{pipelineName}/configurations/draft"] = pipeline.NewGetDraftConfiguration(o.context, o.PipelineGetDraftConfigurationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/members/{email}"] = organization.NewGetMember(o.context, o.OrganizationGetMemberHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}"] = organization.NewGetOrganization(o.context, o.OrganizationGetOrganizationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/pipelines/{pipelineName}"] = pipeline.NewGetPipeline(o.context, o.PipelineGetPipelineHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actions/{name}"] = component.NewGetPublicAction(o.context, o.ComponentGetPublicActionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/actions/{name}/versions/{version}"] = component.NewGetPublicActionVersion(o.context, o.ComponentGetPublicActionVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/triggers/{name}"] = component.NewGetPublicTrigger(o.context, o.ComponentGetPublicTriggerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/triggers/{name}/versions/{version}"] = component.NewGetPublicTriggerVersion(o.context, o.ComponentGetPublicTriggerVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/triggers/{name}"] = component.NewGetTrigger(o.context, o.ComponentGetTriggerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orgs/{orgName}/triggers/{name}/versions/{version}"] = component.NewGetTriggerVersion(o.context, o.ComponentGetTriggerVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"][""] = hello.NewHello(o.context, o.HelloHelloHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/members"] = organization.NewInviteMember(o.context, o.OrganizationInviteMemberHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/login"] = auth.NewLogin(o.context, o.AuthLoginHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/logout"] = auth.NewLogout(o.context, o.AuthLogoutHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/registration-redirect"] = auth.NewRedirectToRegistration(o.context, o.AuthRedirectToRegistrationHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment"] = pipeline.NewRemoveDeployment(o.context, o.PipelineRemoveDeploymentHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/orgs/{orgName}/members/{email}"] = organization.NewRemoveMember(o.context, o.OrganizationRemoveMemberHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/password/reset"] = auth.NewResetPassword(o.context, o.AuthResetPasswordHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orgs/{orgName}/pipelines/{pipelineName}/configurations"] = pipeline.NewSaveDraftConfigurationAsNew(o.context, o.PipelineSaveDraftConfigurationAsNewHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}/members/{email}/roles"] = organization.NewSetMemberRoles(o.context, o.OrganizationSetMemberRolesHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}/actions/{name}"] = component.NewUpdateAction(o.context, o.ComponentUpdateActionHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orgs/{orgName}/actions/{name}/versions/{version}"] = component.NewUpdateActionVersion(o.context, o.ComponentUpdateActionVersionHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}/bases/{name}"] = component.NewUpdateBase(o.context, o.ComponentUpdateBaseHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orgs/{orgName}/bases/{name}/versions/{version}"] = component.NewUpdateBaseVersion(o.context, o.ComponentUpdateBaseVersionHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/auth/user"] = auth.NewUpdateCurrentUser(o.context, o.AuthUpdateCurrentUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}/pipelines/{pipelineName}/configurations/draft"] = pipeline.NewUpdateDraftConfiguration(o.context, o.PipelineUpdateDraftConfigurationHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/vars/{varID}"] = pipeline.NewUpdateEnvironmentVariable(o.context, o.PipelineUpdateEnvironmentVariableHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}"] = organization.NewUpdateOrganization(o.context, o.OrganizationUpdateOrganizationHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}/pipelines/{pipelineName}"] = pipeline.NewUpdatePipeline(o.context, o.PipelineUpdatePipelineHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orgs/{orgName}/triggers/{name}"] = component.NewUpdateTrigger(o.context, o.ComponentUpdateTriggerHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/orgs/{orgName}/triggers/{name}/versions/{version}"] = component.NewUpdateTriggerVersion(o.context, o.ComponentUpdateTriggerVersionHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AresAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *AresAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *AresAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *AresAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
