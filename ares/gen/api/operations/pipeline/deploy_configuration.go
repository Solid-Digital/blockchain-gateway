// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// DeployConfigurationHandlerFunc turns a function with the right signature into a deploy configuration handler
type DeployConfigurationHandlerFunc func(DeployConfigurationParams, *dto.User) middleware.Responder

// Handle executing the request and returning a response
func (fn DeployConfigurationHandlerFunc) Handle(params DeployConfigurationParams, principal *dto.User) middleware.Responder {
	return fn(params, principal)
}

// DeployConfigurationHandler interface for that can handle valid deploy configuration params
type DeployConfigurationHandler interface {
	Handle(DeployConfigurationParams, *dto.User) middleware.Responder
}

// NewDeployConfiguration creates a new http.Handler for the deploy configuration operation
func NewDeployConfiguration(ctx *middleware.Context, handler DeployConfigurationHandler) *DeployConfiguration {
	return &DeployConfiguration{Context: ctx, Handler: handler}
}

/*DeployConfiguration swagger:route PUT /orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment pipeline deployConfiguration

Deploy configuration to environment

Deploy a pipeline configuration to a specific environment within the pipeline context

*/
type DeployConfiguration struct {
	Context *middleware.Context
	Handler DeployConfigurationHandler
}

func (o *DeployConfiguration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeployConfigurationParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *dto.User
	if uprinc != nil {
		principal = uprinc.(*dto.User) // this is really a dto.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
