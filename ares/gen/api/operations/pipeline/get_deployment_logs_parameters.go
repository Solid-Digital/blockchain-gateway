// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeploymentLogsParams creates a new GetDeploymentLogsParams object
// no default values defined in spec.
func NewGetDeploymentLogsParams() GetDeploymentLogsParams {

	return GetDeploymentLogsParams{}
}

// GetDeploymentLogsParams contains all the bound params for the get deployment logs operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetDeploymentLogs
type GetDeploymentLogsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	EnvName string
	/*
	  In: query
	*/
	From *string
	/*
	  In: query
	*/
	Limit *string
	/*
	  Required: true
	  In: path
	*/
	OrgName string
	/*
	  Required: true
	  In: path
	*/
	PipelineName string
	/*
	  In: query
	*/
	To *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetDeploymentLogsParams() beforehand.
func (o *GetDeploymentLogsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rEnvName, rhkEnvName, _ := route.Params.GetOK("envName")
	if err := o.bindEnvName(rEnvName, rhkEnvName, route.Formats); err != nil {
		res = append(res, err)
	}

	qFrom, qhkFrom, _ := qs.GetOK("from")
	if err := o.bindFrom(qFrom, qhkFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	rOrgName, rhkOrgName, _ := route.Params.GetOK("orgName")
	if err := o.bindOrgName(rOrgName, rhkOrgName, route.Formats); err != nil {
		res = append(res, err)
	}

	rPipelineName, rhkPipelineName, _ := route.Params.GetOK("pipelineName")
	if err := o.bindPipelineName(rPipelineName, rhkPipelineName, route.Formats); err != nil {
		res = append(res, err)
	}

	qTo, qhkTo, _ := qs.GetOK("to")
	if err := o.bindTo(qTo, qhkTo, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEnvName binds and validates parameter EnvName from path.
func (o *GetDeploymentLogsParams) bindEnvName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.EnvName = raw

	return nil
}

// bindFrom binds and validates parameter From from query.
func (o *GetDeploymentLogsParams) bindFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.From = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetDeploymentLogsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Limit = &raw

	return nil
}

// bindOrgName binds and validates parameter OrgName from path.
func (o *GetDeploymentLogsParams) bindOrgName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.OrgName = raw

	return nil
}

// bindPipelineName binds and validates parameter PipelineName from path.
func (o *GetDeploymentLogsParams) bindPipelineName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.PipelineName = raw

	return nil
}

// bindTo binds and validates parameter To from query.
func (o *GetDeploymentLogsParams) bindTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.To = &raw

	return nil
}
