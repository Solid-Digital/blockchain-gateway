// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRemoveDeploymentParams creates a new RemoveDeploymentParams object
// no default values defined in spec.
func NewRemoveDeploymentParams() RemoveDeploymentParams {

	return RemoveDeploymentParams{}
}

// RemoveDeploymentParams contains all the bound params for the remove deployment operation
// typically these are obtained from a http.Request
//
// swagger:parameters RemoveDeployment
type RemoveDeploymentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	EnvName string
	/*
	  Required: true
	  In: path
	*/
	OrgName string
	/*
	  Required: true
	  In: path
	*/
	PipelineName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRemoveDeploymentParams() beforehand.
func (o *RemoveDeploymentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rEnvName, rhkEnvName, _ := route.Params.GetOK("envName")
	if err := o.bindEnvName(rEnvName, rhkEnvName, route.Formats); err != nil {
		res = append(res, err)
	}

	rOrgName, rhkOrgName, _ := route.Params.GetOK("orgName")
	if err := o.bindOrgName(rOrgName, rhkOrgName, route.Formats); err != nil {
		res = append(res, err)
	}

	rPipelineName, rhkPipelineName, _ := route.Params.GetOK("pipelineName")
	if err := o.bindPipelineName(rPipelineName, rhkPipelineName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEnvName binds and validates parameter EnvName from path.
func (o *RemoveDeploymentParams) bindEnvName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.EnvName = raw

	return nil
}

// bindOrgName binds and validates parameter OrgName from path.
func (o *RemoveDeploymentParams) bindOrgName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.OrgName = raw

	return nil
}

// bindPipelineName binds and validates parameter PipelineName from path.
func (o *RemoveDeploymentParams) bindPipelineName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.PipelineName = raw

	return nil
}
