// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// SetMemberRolesHandlerFunc turns a function with the right signature into a set member roles handler
type SetMemberRolesHandlerFunc func(SetMemberRolesParams, *dto.User) middleware.Responder

// Handle executing the request and returning a response
func (fn SetMemberRolesHandlerFunc) Handle(params SetMemberRolesParams, principal *dto.User) middleware.Responder {
	return fn(params, principal)
}

// SetMemberRolesHandler interface for that can handle valid set member roles params
type SetMemberRolesHandler interface {
	Handle(SetMemberRolesParams, *dto.User) middleware.Responder
}

// NewSetMemberRoles creates a new http.Handler for the set member roles operation
func NewSetMemberRoles(ctx *middleware.Context, handler SetMemberRolesHandler) *SetMemberRoles {
	return &SetMemberRoles{Context: ctx, Handler: handler}
}

/*SetMemberRoles swagger:route PUT /orgs/{orgName}/members/{email}/roles organization setMemberRoles

Set roles for member

*/
type SetMemberRoles struct {
	Context *middleware.Context
	Handler SetMemberRolesHandler
}

func (o *SetMemberRoles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetMemberRolesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *dto.User
	if uprinc != nil {
		principal = uprinc.(*dto.User) // this is really a dto.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
