// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// RemoveMemberNoContentCode is the HTTP code returned for type RemoveMemberNoContent
const RemoveMemberNoContentCode int = 204

/*RemoveMemberNoContent Deleted

swagger:response removeMemberNoContent
*/
type RemoveMemberNoContent struct {
}

// NewRemoveMemberNoContent creates RemoveMemberNoContent with default headers values
func NewRemoveMemberNoContent() *RemoveMemberNoContent {

	return &RemoveMemberNoContent{}
}

// WriteResponse to the client
func (o *RemoveMemberNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// RemoveMemberInternalServerErrorCode is the HTTP code returned for type RemoveMemberInternalServerError
const RemoveMemberInternalServerErrorCode int = 500

/*RemoveMemberInternalServerError Internal server error

swagger:response removeMemberInternalServerError
*/
type RemoveMemberInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewRemoveMemberInternalServerError creates RemoveMemberInternalServerError with default headers values
func NewRemoveMemberInternalServerError() *RemoveMemberInternalServerError {

	return &RemoveMemberInternalServerError{}
}

// WithPayload adds the payload to the remove member internal server error response
func (o *RemoveMemberInternalServerError) WithPayload(payload interface{}) *RemoveMemberInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove member internal server error response
func (o *RemoveMemberInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveMemberInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
