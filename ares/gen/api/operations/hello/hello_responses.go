// Code generated by go-swagger; DO NOT EDIT.

package hello

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// HelloOKCode is the HTTP code returned for type HelloOK
const HelloOKCode int = 200

/*HelloOK

swagger:response helloOK
*/
type HelloOK struct {
	/*

	  Default: "text/plain; charset=utf-8"
	*/
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewHelloOK creates HelloOK with default headers values
func NewHelloOK() *HelloOK {

	var (
		// initialize headers with default values

		contentTypeDefault = string("text/plain; charset=utf-8")
	)

	return &HelloOK{

		ContentType: contentTypeDefault,
	}
}

// WithContentType adds the contentType to the hello o k response
func (o *HelloOK) WithContentType(contentType string) *HelloOK {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the hello o k response
func (o *HelloOK) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the hello o k response
func (o *HelloOK) WithPayload(payload string) *HelloOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the hello o k response
func (o *HelloOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HelloOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
