// Code generated by go-swagger; DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"bitbucket.org/unchain/ares/gen/api/operations"
	"bitbucket.org/unchain/ares/gen/api/operations/auth"
	"bitbucket.org/unchain/ares/gen/api/operations/component"
	"bitbucket.org/unchain/ares/gen/api/operations/hello"
	"bitbucket.org/unchain/ares/gen/api/operations/organization"
	"bitbucket.org/unchain/ares/gen/api/operations/pipeline"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name AuthAPI -inpkg

// AuthAPI
type AuthAPI interface {
	ChangeCurrentPassword(params auth.ChangeCurrentPasswordParams, principal *dto.User) middleware.Responder
	ConfirmRegistration(params auth.ConfirmRegistrationParams) middleware.Responder
	ConfirmResetPassword(params auth.ConfirmResetPasswordParams) middleware.Responder
	CreateRegistration(params auth.CreateRegistrationParams) middleware.Responder
	// DeleteCurrentUser is Archive the profile that is associated with the token used for the API call.
	DeleteCurrentUser(params auth.DeleteCurrentUserParams, principal *dto.User) middleware.Responder
	// GetCurrentUser is Get the current user's profile.
	GetCurrentUser(params auth.GetCurrentUserParams, principal *dto.User) middleware.Responder
	Login(params auth.LoginParams) middleware.Responder
	Logout(params auth.LogoutParams, principal *dto.User) middleware.Responder
	RedirectToRegistration(params auth.RedirectToRegistrationParams) middleware.Responder
	ResetPassword(params auth.ResetPasswordParams) middleware.Responder
	// UpdateCurrentUser is Update the profile that is associated with the token used for the API call.
	UpdateCurrentUser(params auth.UpdateCurrentUserParams, principal *dto.User) middleware.Responder
}

//go:generate mockery -name ComponentAPI -inpkg

// ComponentAPI
type ComponentAPI interface {
	CreateAction(params component.CreateActionParams, principal *dto.User) middleware.Responder
	// CreateActionVersion is If the action that this version belongs to doesn't already exist, it will be created
	CreateActionVersion(params component.CreateActionVersionParams, principal *dto.User) middleware.Responder
	CreateBase(params component.CreateBaseParams, principal *dto.User) middleware.Responder
	// CreateBaseVersion is If the base that this version belongs to doesn't already exist, it will be created
	CreateBaseVersion(params component.CreateBaseVersionParams, principal *dto.User) middleware.Responder
	CreateTrigger(params component.CreateTriggerParams, principal *dto.User) middleware.Responder
	// CreateTriggerVersion is If the trigger that this version belongs to doesn't already exist, it will be created
	CreateTriggerVersion(params component.CreateTriggerVersionParams, principal *dto.User) middleware.Responder
	// GetAction is Get a action component with all its versions
	GetAction(params component.GetActionParams, principal *dto.User) middleware.Responder
	GetActionVersion(params component.GetActionVersionParams, principal *dto.User) middleware.Responder
	GetAllActions(params component.GetAllActionsParams, principal *dto.User) middleware.Responder
	GetAllBases(params component.GetAllBasesParams, principal *dto.User) middleware.Responder
	GetAllPublicActions(params component.GetAllPublicActionsParams) middleware.Responder
	GetAllPublicTriggers(params component.GetAllPublicTriggersParams) middleware.Responder
	GetAllTriggers(params component.GetAllTriggersParams, principal *dto.User) middleware.Responder
	// GetBase is Get a base component with all its versions
	GetBase(params component.GetBaseParams, principal *dto.User) middleware.Responder
	GetBaseVersion(params component.GetBaseVersionParams, principal *dto.User) middleware.Responder
	// GetPublicAction is Get a public action component with all its versions
	GetPublicAction(params component.GetPublicActionParams) middleware.Responder
	GetPublicActionVersion(params component.GetPublicActionVersionParams) middleware.Responder
	// GetPublicTrigger is Get a public trigger component with all its versions
	GetPublicTrigger(params component.GetPublicTriggerParams) middleware.Responder
	GetPublicTriggerVersion(params component.GetPublicTriggerVersionParams) middleware.Responder
	// GetTrigger is Get a trigger component with all its versions
	GetTrigger(params component.GetTriggerParams, principal *dto.User) middleware.Responder
	GetTriggerVersion(params component.GetTriggerVersionParams, principal *dto.User) middleware.Responder
	// UpdateAction is Update a action component
	UpdateAction(params component.UpdateActionParams, principal *dto.User) middleware.Responder
	UpdateActionVersion(params component.UpdateActionVersionParams, principal *dto.User) middleware.Responder
	// UpdateBase is Update a base component
	UpdateBase(params component.UpdateBaseParams, principal *dto.User) middleware.Responder
	UpdateBaseVersion(params component.UpdateBaseVersionParams, principal *dto.User) middleware.Responder
	// UpdateTrigger is Update a trigger component
	UpdateTrigger(params component.UpdateTriggerParams, principal *dto.User) middleware.Responder
	UpdateTriggerVersion(params component.UpdateTriggerVersionParams, principal *dto.User) middleware.Responder
}

//go:generate mockery -name HelloAPI -inpkg

// HelloAPI
type HelloAPI interface {
	// Hello is Hello route
	Hello(params hello.HelloParams) middleware.Responder
}

//go:generate mockery -name OrganizationAPI -inpkg

// OrganizationAPI
type OrganizationAPI interface {
	CreateOrganization(params organization.CreateOrganizationParams, principal *dto.User) middleware.Responder
	// GetAllMembers is Get all members of an organization
	GetAllMembers(params organization.GetAllMembersParams, principal *dto.User) middleware.Responder
	GetAllOrganizations(params organization.GetAllOrganizationsParams, principal *dto.User) middleware.Responder
	GetMember(params organization.GetMemberParams, principal *dto.User) middleware.Responder
	GetOrganization(params organization.GetOrganizationParams, principal *dto.User) middleware.Responder
	InviteMember(params organization.InviteMemberParams, principal *dto.User) middleware.Responder
	RemoveMember(params organization.RemoveMemberParams, principal *dto.User) middleware.Responder
	SetMemberRoles(params organization.SetMemberRolesParams, principal *dto.User) middleware.Responder
	UpdateOrganization(params organization.UpdateOrganizationParams, principal *dto.User) middleware.Responder
}

//go:generate mockery -name PipelineAPI -inpkg

// PipelineAPI
type PipelineAPI interface {
	CreateEnvironmentVariable(params pipeline.CreateEnvironmentVariableParams, principal *dto.User) middleware.Responder
	CreatePipeline(params pipeline.CreatePipelineParams, principal *dto.User) middleware.Responder
	DeleteEnvironmentVariable(params pipeline.DeleteEnvironmentVariableParams, principal *dto.User) middleware.Responder
	DeletePipeline(params pipeline.DeletePipelineParams, principal *dto.User) middleware.Responder
	// DeployConfiguration is Deploy a pipeline configuration to a specific environment within the pipeline context
	DeployConfiguration(params pipeline.DeployConfigurationParams, principal *dto.User) middleware.Responder
	GetAllEnvironmentVariables(params pipeline.GetAllEnvironmentVariablesParams, principal *dto.User) middleware.Responder
	// GetAllPipelines is Get all pipelines for the organization
	GetAllPipelines(params pipeline.GetAllPipelinesParams, principal *dto.User) middleware.Responder
	GetConfiguration(params pipeline.GetConfigurationParams, principal *dto.User) middleware.Responder
	GetDeployment(params pipeline.GetDeploymentParams, principal *dto.User) middleware.Responder
	GetDeploymentLogs(params pipeline.GetDeploymentLogsParams, principal *dto.User) middleware.Responder
	GetDraftConfiguration(params pipeline.GetDraftConfigurationParams, principal *dto.User) middleware.Responder
	// GetPipeline is Get the pipeline with all its different configurations and deployments.
	GetPipeline(params pipeline.GetPipelineParams, principal *dto.User) middleware.Responder
	RemoveDeployment(params pipeline.RemoveDeploymentParams, principal *dto.User) middleware.Responder
	// SaveDraftConfigurationAsNew is A new configuration is created by auto-incrementing the latest version by 1.
	SaveDraftConfigurationAsNew(params pipeline.SaveDraftConfigurationAsNewParams, principal *dto.User) middleware.Responder
	// UpdateDraftConfiguration is The latest configuration version is not stored as a numbered version yet and is the only configuration that can be updated.
	UpdateDraftConfiguration(params pipeline.UpdateDraftConfigurationParams, principal *dto.User) middleware.Responder
	UpdateEnvironmentVariable(params pipeline.UpdateEnvironmentVariableParams, principal *dto.User) middleware.Responder
	UpdatePipeline(params pipeline.UpdatePipelineParams, principal *dto.User) middleware.Responder
}

// Config is configuration for Handler
type Handlers struct {
	AuthAPI
	ComponentAPI
	HelloAPI
	OrganizationAPI
	PipelineAPI
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request, interface{}) error

	// AuthTokenAuthentication Applies when the "Authorization" header is set
	AuthTokenAuthentication func(token string) (*dto.User, error)
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Handlers) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *Ares instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Handlers) (http.Handler, *operations.AresAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewAresAPI(spec)
	api.ServeError = errors.ServeError

	api.JSONConsumer = runtime.JSONConsumer()
	api.UrlformConsumer = runtime.DiscardConsumer
	api.MultipartformConsumer = runtime.DiscardConsumer
	api.TxtConsumer = runtime.TextConsumer()
	api.JSONProducer = runtime.JSONProducer()
	api.TxtProducer = runtime.TextProducer()
	api.TokenAuthenticationAuth = func(token string) (*dto.User, error) {
		if c.AuthTokenAuthentication == nil {
			return nil, errors.NotImplemented("api key auth (Token authentication) Authorization from header param [Authorization] has not yet been implemented")
		}
		return c.AuthTokenAuthentication(token)
	}

	api.APIAuthorizer = authorizer(c.Authorizer)
	api.AuthChangeCurrentPasswordHandler = auth.ChangeCurrentPasswordHandlerFunc(func(params auth.ChangeCurrentPasswordParams, principal *dto.User) middleware.Responder {
		return c.AuthAPI.ChangeCurrentPassword(params, principal)
	})
	api.AuthConfirmRegistrationHandler = auth.ConfirmRegistrationHandlerFunc(func(params auth.ConfirmRegistrationParams) middleware.Responder {
		return c.AuthAPI.ConfirmRegistration(params)
	})
	api.AuthConfirmResetPasswordHandler = auth.ConfirmResetPasswordHandlerFunc(func(params auth.ConfirmResetPasswordParams) middleware.Responder {
		return c.AuthAPI.ConfirmResetPassword(params)
	})
	api.ComponentCreateActionHandler = component.CreateActionHandlerFunc(func(params component.CreateActionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.CreateAction(params, principal)
	})
	api.ComponentCreateActionVersionHandler = component.CreateActionVersionHandlerFunc(func(params component.CreateActionVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.CreateActionVersion(params, principal)
	})
	api.ComponentCreateBaseHandler = component.CreateBaseHandlerFunc(func(params component.CreateBaseParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.CreateBase(params, principal)
	})
	api.ComponentCreateBaseVersionHandler = component.CreateBaseVersionHandlerFunc(func(params component.CreateBaseVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.CreateBaseVersion(params, principal)
	})
	api.PipelineCreateEnvironmentVariableHandler = pipeline.CreateEnvironmentVariableHandlerFunc(func(params pipeline.CreateEnvironmentVariableParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.CreateEnvironmentVariable(params, principal)
	})
	api.OrganizationCreateOrganizationHandler = organization.CreateOrganizationHandlerFunc(func(params organization.CreateOrganizationParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.CreateOrganization(params, principal)
	})
	api.PipelineCreatePipelineHandler = pipeline.CreatePipelineHandlerFunc(func(params pipeline.CreatePipelineParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.CreatePipeline(params, principal)
	})
	api.AuthCreateRegistrationHandler = auth.CreateRegistrationHandlerFunc(func(params auth.CreateRegistrationParams) middleware.Responder {
		return c.AuthAPI.CreateRegistration(params)
	})
	api.ComponentCreateTriggerHandler = component.CreateTriggerHandlerFunc(func(params component.CreateTriggerParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.CreateTrigger(params, principal)
	})
	api.ComponentCreateTriggerVersionHandler = component.CreateTriggerVersionHandlerFunc(func(params component.CreateTriggerVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.CreateTriggerVersion(params, principal)
	})
	api.AuthDeleteCurrentUserHandler = auth.DeleteCurrentUserHandlerFunc(func(params auth.DeleteCurrentUserParams, principal *dto.User) middleware.Responder {
		return c.AuthAPI.DeleteCurrentUser(params, principal)
	})
	api.PipelineDeleteEnvironmentVariableHandler = pipeline.DeleteEnvironmentVariableHandlerFunc(func(params pipeline.DeleteEnvironmentVariableParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.DeleteEnvironmentVariable(params, principal)
	})
	api.PipelineDeletePipelineHandler = pipeline.DeletePipelineHandlerFunc(func(params pipeline.DeletePipelineParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.DeletePipeline(params, principal)
	})
	api.PipelineDeployConfigurationHandler = pipeline.DeployConfigurationHandlerFunc(func(params pipeline.DeployConfigurationParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.DeployConfiguration(params, principal)
	})
	api.ComponentGetActionHandler = component.GetActionHandlerFunc(func(params component.GetActionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetAction(params, principal)
	})
	api.ComponentGetActionVersionHandler = component.GetActionVersionHandlerFunc(func(params component.GetActionVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetActionVersion(params, principal)
	})
	api.ComponentGetAllActionsHandler = component.GetAllActionsHandlerFunc(func(params component.GetAllActionsParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetAllActions(params, principal)
	})
	api.ComponentGetAllBasesHandler = component.GetAllBasesHandlerFunc(func(params component.GetAllBasesParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetAllBases(params, principal)
	})
	api.PipelineGetAllEnvironmentVariablesHandler = pipeline.GetAllEnvironmentVariablesHandlerFunc(func(params pipeline.GetAllEnvironmentVariablesParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.GetAllEnvironmentVariables(params, principal)
	})
	api.OrganizationGetAllMembersHandler = organization.GetAllMembersHandlerFunc(func(params organization.GetAllMembersParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.GetAllMembers(params, principal)
	})
	api.OrganizationGetAllOrganizationsHandler = organization.GetAllOrganizationsHandlerFunc(func(params organization.GetAllOrganizationsParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.GetAllOrganizations(params, principal)
	})
	api.PipelineGetAllPipelinesHandler = pipeline.GetAllPipelinesHandlerFunc(func(params pipeline.GetAllPipelinesParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.GetAllPipelines(params, principal)
	})
	api.ComponentGetAllPublicActionsHandler = component.GetAllPublicActionsHandlerFunc(func(params component.GetAllPublicActionsParams) middleware.Responder {
		return c.ComponentAPI.GetAllPublicActions(params)
	})
	api.ComponentGetAllPublicTriggersHandler = component.GetAllPublicTriggersHandlerFunc(func(params component.GetAllPublicTriggersParams) middleware.Responder {
		return c.ComponentAPI.GetAllPublicTriggers(params)
	})
	api.ComponentGetAllTriggersHandler = component.GetAllTriggersHandlerFunc(func(params component.GetAllTriggersParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetAllTriggers(params, principal)
	})
	api.ComponentGetBaseHandler = component.GetBaseHandlerFunc(func(params component.GetBaseParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetBase(params, principal)
	})
	api.ComponentGetBaseVersionHandler = component.GetBaseVersionHandlerFunc(func(params component.GetBaseVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetBaseVersion(params, principal)
	})
	api.PipelineGetConfigurationHandler = pipeline.GetConfigurationHandlerFunc(func(params pipeline.GetConfigurationParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.GetConfiguration(params, principal)
	})
	api.AuthGetCurrentUserHandler = auth.GetCurrentUserHandlerFunc(func(params auth.GetCurrentUserParams, principal *dto.User) middleware.Responder {
		return c.AuthAPI.GetCurrentUser(params, principal)
	})
	api.PipelineGetDeploymentHandler = pipeline.GetDeploymentHandlerFunc(func(params pipeline.GetDeploymentParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.GetDeployment(params, principal)
	})
	api.PipelineGetDeploymentLogsHandler = pipeline.GetDeploymentLogsHandlerFunc(func(params pipeline.GetDeploymentLogsParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.GetDeploymentLogs(params, principal)
	})
	api.PipelineGetDraftConfigurationHandler = pipeline.GetDraftConfigurationHandlerFunc(func(params pipeline.GetDraftConfigurationParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.GetDraftConfiguration(params, principal)
	})
	api.OrganizationGetMemberHandler = organization.GetMemberHandlerFunc(func(params organization.GetMemberParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.GetMember(params, principal)
	})
	api.OrganizationGetOrganizationHandler = organization.GetOrganizationHandlerFunc(func(params organization.GetOrganizationParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.GetOrganization(params, principal)
	})
	api.PipelineGetPipelineHandler = pipeline.GetPipelineHandlerFunc(func(params pipeline.GetPipelineParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.GetPipeline(params, principal)
	})
	api.ComponentGetPublicActionHandler = component.GetPublicActionHandlerFunc(func(params component.GetPublicActionParams) middleware.Responder {
		return c.ComponentAPI.GetPublicAction(params)
	})
	api.ComponentGetPublicActionVersionHandler = component.GetPublicActionVersionHandlerFunc(func(params component.GetPublicActionVersionParams) middleware.Responder {
		return c.ComponentAPI.GetPublicActionVersion(params)
	})
	api.ComponentGetPublicTriggerHandler = component.GetPublicTriggerHandlerFunc(func(params component.GetPublicTriggerParams) middleware.Responder {
		return c.ComponentAPI.GetPublicTrigger(params)
	})
	api.ComponentGetPublicTriggerVersionHandler = component.GetPublicTriggerVersionHandlerFunc(func(params component.GetPublicTriggerVersionParams) middleware.Responder {
		return c.ComponentAPI.GetPublicTriggerVersion(params)
	})
	api.ComponentGetTriggerHandler = component.GetTriggerHandlerFunc(func(params component.GetTriggerParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetTrigger(params, principal)
	})
	api.ComponentGetTriggerVersionHandler = component.GetTriggerVersionHandlerFunc(func(params component.GetTriggerVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.GetTriggerVersion(params, principal)
	})
	api.HelloHelloHandler = hello.HelloHandlerFunc(func(params hello.HelloParams) middleware.Responder {
		return c.HelloAPI.Hello(params)
	})
	api.OrganizationInviteMemberHandler = organization.InviteMemberHandlerFunc(func(params organization.InviteMemberParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.InviteMember(params, principal)
	})
	api.AuthLoginHandler = auth.LoginHandlerFunc(func(params auth.LoginParams) middleware.Responder {
		return c.AuthAPI.Login(params)
	})
	api.AuthLogoutHandler = auth.LogoutHandlerFunc(func(params auth.LogoutParams, principal *dto.User) middleware.Responder {
		return c.AuthAPI.Logout(params, principal)
	})
	api.AuthRedirectToRegistrationHandler = auth.RedirectToRegistrationHandlerFunc(func(params auth.RedirectToRegistrationParams) middleware.Responder {
		return c.AuthAPI.RedirectToRegistration(params)
	})
	api.PipelineRemoveDeploymentHandler = pipeline.RemoveDeploymentHandlerFunc(func(params pipeline.RemoveDeploymentParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.RemoveDeployment(params, principal)
	})
	api.OrganizationRemoveMemberHandler = organization.RemoveMemberHandlerFunc(func(params organization.RemoveMemberParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.RemoveMember(params, principal)
	})
	api.AuthResetPasswordHandler = auth.ResetPasswordHandlerFunc(func(params auth.ResetPasswordParams) middleware.Responder {
		return c.AuthAPI.ResetPassword(params)
	})
	api.PipelineSaveDraftConfigurationAsNewHandler = pipeline.SaveDraftConfigurationAsNewHandlerFunc(func(params pipeline.SaveDraftConfigurationAsNewParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.SaveDraftConfigurationAsNew(params, principal)
	})
	api.OrganizationSetMemberRolesHandler = organization.SetMemberRolesHandlerFunc(func(params organization.SetMemberRolesParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.SetMemberRoles(params, principal)
	})
	api.ComponentUpdateActionHandler = component.UpdateActionHandlerFunc(func(params component.UpdateActionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.UpdateAction(params, principal)
	})
	api.ComponentUpdateActionVersionHandler = component.UpdateActionVersionHandlerFunc(func(params component.UpdateActionVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.UpdateActionVersion(params, principal)
	})
	api.ComponentUpdateBaseHandler = component.UpdateBaseHandlerFunc(func(params component.UpdateBaseParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.UpdateBase(params, principal)
	})
	api.ComponentUpdateBaseVersionHandler = component.UpdateBaseVersionHandlerFunc(func(params component.UpdateBaseVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.UpdateBaseVersion(params, principal)
	})
	api.AuthUpdateCurrentUserHandler = auth.UpdateCurrentUserHandlerFunc(func(params auth.UpdateCurrentUserParams, principal *dto.User) middleware.Responder {
		return c.AuthAPI.UpdateCurrentUser(params, principal)
	})
	api.PipelineUpdateDraftConfigurationHandler = pipeline.UpdateDraftConfigurationHandlerFunc(func(params pipeline.UpdateDraftConfigurationParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.UpdateDraftConfiguration(params, principal)
	})
	api.PipelineUpdateEnvironmentVariableHandler = pipeline.UpdateEnvironmentVariableHandlerFunc(func(params pipeline.UpdateEnvironmentVariableParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.UpdateEnvironmentVariable(params, principal)
	})
	api.OrganizationUpdateOrganizationHandler = organization.UpdateOrganizationHandlerFunc(func(params organization.UpdateOrganizationParams, principal *dto.User) middleware.Responder {
		return c.OrganizationAPI.UpdateOrganization(params, principal)
	})
	api.PipelineUpdatePipelineHandler = pipeline.UpdatePipelineHandlerFunc(func(params pipeline.UpdatePipelineParams, principal *dto.User) middleware.Responder {
		return c.PipelineAPI.UpdatePipeline(params, principal)
	})
	api.ComponentUpdateTriggerHandler = component.UpdateTriggerHandlerFunc(func(params component.UpdateTriggerParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.UpdateTrigger(params, principal)
	})
	api.ComponentUpdateTriggerVersionHandler = component.UpdateTriggerVersionHandlerFunc(func(params component.UpdateTriggerVersionParams, principal *dto.User) middleware.Responder {
		return c.ComponentAPI.UpdateTriggerVersion(params, principal)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request, interface{}) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	return a(req, principal)
}
