// Code generated by go-swagger; DO NOT EDIT.

package handlers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/google/wire"
	"github.com/unchainio/interfaces/logger"

	"bitbucket.org/unchain/ares/gen/api/operations/auth"

	dto "bitbucket.org/unchain/ares/gen/dto"

	"bitbucket.org/unchain/ares/gen/api"
	"bitbucket.org/unchain/ares/pkg/ares"
	"github.com/go-openapi/runtime/middleware"
)

var _ api.AuthAPI = &AuthHandler{}

var AuthSet = wire.NewSet(NewAuthHandler, wire.Bind(new(api.AuthAPI), new(AuthHandler)))

// FIXME(go-swagger): Add the required parameters for NewAuth
// NewAuthHandler
func NewAuthHandler(service ares.AuthService, log logger.Logger) *AuthHandler {
	return &AuthHandler{
		service: service,
		log:     log,
	}
}

// FIXME(go-swagger): Add the required fields for AuthHandler
// AuthHandler is an empty implementation of the api.AuthAPI interface.
type AuthHandler struct {
	service ares.AuthService
	log     logger.Logger
}

// ChangeCurrentPassword
func (h *AuthHandler) ChangeCurrentPassword(params auth.ChangeCurrentPasswordParams, principal *dto.User) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.ChangeCurrentPassword()

	// ret, err := h.service.ChangeCurrentPassword(params.Body)

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 401 - Unauthorized error
	// return &auth.ChangeCurrentPasswordUnauthorized {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.ChangeCurrentPassword(params) to &auth.ChangeCurrentPasswordCreated
	//return &auth.ChangeCurrentPasswordCreated {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation ChangeCurrentPassword has not yet been implemented")
}

// ConfirmRegistration
func (h *AuthHandler) ConfirmRegistration(params auth.ConfirmRegistrationParams) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.ConfirmRegistration()

	// ret, err := h.service.ConfirmRegistration(params.Body)

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 500 - Internal server error
	// return &auth.ConfirmRegistrationInternalServerError {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.ConfirmRegistration(params) to &auth.ConfirmRegistrationOK
	//return &auth.ConfirmRegistrationOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation ConfirmRegistration has not yet been implemented")
}

// ConfirmResetPassword
func (h *AuthHandler) ConfirmResetPassword(params auth.ConfirmResetPasswordParams) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.ConfirmResetPassword()

	// ret, err := h.service.ConfirmResetPassword(params.Body)

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 401 - Status 401
	// return &auth.ConfirmResetPasswordUnauthorized {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.ConfirmResetPassword(params) to &auth.ConfirmResetPasswordOK
	//return &auth.ConfirmResetPasswordOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation ConfirmResetPassword has not yet been implemented")
}

// CreateRegistration
func (h *AuthHandler) CreateRegistration(params auth.CreateRegistrationParams) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.CreateRegistration()

	// ret, err := h.service.CreateRegistration(params.Body)

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 500 - Internal server error
	// return &auth.CreateRegistrationInternalServerError {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.CreateRegistration(params) to &auth.CreateRegistrationOK
	//return &auth.CreateRegistrationOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation CreateRegistration has not yet been implemented")
}

// DeleteCurrentUser Archive the profile that is associated with the token used for the API call.
func (h *AuthHandler) DeleteCurrentUser(params auth.DeleteCurrentUserParams, principal *dto.User) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.DeleteCurrentUser()

	// ret, err := h.service.DeleteCurrentUser()

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 500 - Internal server error
	// return &auth.DeleteCurrentUserInternalServerError {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.DeleteCurrentUser(params) to &auth.DeleteCurrentUserNoContent
	//return &auth.DeleteCurrentUserNoContent {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation DeleteCurrentUser has not yet been implemented")
}

// GetCurrentUser Get the current user's profile.
func (h *AuthHandler) GetCurrentUser(params auth.GetCurrentUserParams, principal *dto.User) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.GetCurrentUser()

	// ret, err := h.service.GetCurrentUser()

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 500 - Internal server error
	// return &auth.GetCurrentUserInternalServerError {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.GetCurrentUser(params) to &auth.GetCurrentUserOK
	//return &auth.GetCurrentUserOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation GetCurrentUser has not yet been implemented")
}

// Login
func (h *AuthHandler) Login(params auth.LoginParams) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.Login()

	// ret, err := h.service.Login(params.Body)

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 401 - Status 401
	// return &auth.LoginUnauthorized {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.Login(params) to &auth.LoginOK
	//return &auth.LoginOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation Login has not yet been implemented")
}

// Logout
func (h *AuthHandler) Logout(params auth.LogoutParams, principal *dto.User) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.Logout()

	// ret, err := h.service.Logout()

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 500 - Internal server error
	// return &auth.LogoutInternalServerError {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.Logout(params) to &auth.LogoutOK
	//return &auth.LogoutOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation Logout has not yet been implemented")
}

// RedirectToRegistration
func (h *AuthHandler) RedirectToRegistration(params auth.RedirectToRegistrationParams) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.RedirectToRegistration()

	// ret, err := h.service.RedirectToRegistration()

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 301 - Redirect to connect registration page
	// return &auth.RedirectToRegistrationMovedPermanently {
	//    Payload: errors.Message(err, 1),
	//}
	// // FIXME(go-swagger): return error with code 500 - Internal Service Error
	// return &auth.RedirectToRegistrationInternalServerError {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.RedirectToRegistration(params) to &auth.RedirectToRegistrationOK
	//return &auth.RedirectToRegistrationOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation RedirectToRegistration has not yet been implemented")
}

// ResetPassword
func (h *AuthHandler) ResetPassword(params auth.ResetPasswordParams) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.ResetPassword()

	// ret, err := h.service.ResetPassword(params.Body)

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 401 - Status 401
	// return &auth.ResetPasswordUnauthorized {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.ResetPassword(params) to &auth.ResetPasswordOK
	//return &auth.ResetPasswordOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation ResetPassword has not yet been implemented")
}

// UpdateCurrentUser Update the profile that is associated with the token used for the API call.
func (h *AuthHandler) UpdateCurrentUser(params auth.UpdateCurrentUserParams, principal *dto.User) middleware.Responder {
	// // FIXME(go-swagger): transform handler parameters into the parameters of h.Service.UpdateCurrentUser()

	// ret, err := h.service.UpdateCurrentUser(params.Body)

	//if err != nil {
	// h.log.Errorf("%+v", err)
	// // FIXME(go-swagger): Handle errors
	// // FIXME(go-swagger): return error with code 500 - Internal server error
	// return &auth.UpdateCurrentUserInternalServerError {
	//    Payload: errors.Message(err, 1),
	//}
	//
	//}

	// // FIXME(go-swagger): transform the values returned by h.Service.UpdateCurrentUser(params) to &auth.UpdateCurrentUserOK
	//return &auth.UpdateCurrentUserOK {
	// Payload: ret,
	//}

	return middleware.NotImplemented("operation UpdateCurrentUser has not yet been implemented")
}
