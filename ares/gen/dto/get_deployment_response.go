// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDeploymentResponse get deployment response
// swagger:model GetDeploymentResponse
type GetDeploymentResponse struct {

	// id
	// Required: true
	ID *int64 `json:"id"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// created by
	// Required: true
	CreatedBy *CreatedBy `json:"createdBy"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`

	// updated by
	// Required: true
	UpdatedBy *UpdatedBy `json:"updatedBy"`

	// desired replicas
	// Required: true
	DesiredReplicas *int64 `json:"desiredReplicas"`

	// available replicas
	// Required: true
	AvailableReplicas *int64 `json:"availableReplicas"`

	// configuration
	// Required: true
	Configuration *PipelineConfigurationRevision `json:"configuration"`

	// dirty
	// Required: true
	Dirty *bool `json:"dirty"`

	// host
	// Required: true
	Host *string `json:"host"`

	// image
	// Required: true
	Image *string `json:"image"`

	// path
	// Required: true
	Path *string `json:"path"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this get deployment response
func (m *GetDeploymentResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredReplicas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableReplicas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDeploymentResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *GetDeploymentResponse) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validateUpdatedBy(formats strfmt.Registry) error {

	if err := validate.Required("updatedBy", "body", m.UpdatedBy); err != nil {
		return err
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *GetDeploymentResponse) validateDesiredReplicas(formats strfmt.Registry) error {

	if err := validate.Required("desiredReplicas", "body", m.DesiredReplicas); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validateAvailableReplicas(formats strfmt.Registry) error {

	if err := validate.Required("availableReplicas", "body", m.AvailableReplicas); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validateConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("configuration", "body", m.Configuration); err != nil {
		return err
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *GetDeploymentResponse) validateDirty(formats strfmt.Registry) error {

	if err := validate.Required("dirty", "body", m.Dirty); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *GetDeploymentResponse) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetDeploymentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDeploymentResponse) UnmarshalBinary(b []byte) error {
	var res GetDeploymentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
