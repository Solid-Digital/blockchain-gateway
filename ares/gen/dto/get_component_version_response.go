// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetComponentVersionResponse get component version response
// swagger:model GetComponentVersionResponse
type GetComponentVersionResponse struct {

	// id
	// Required: true
	ID *int64 `json:"id"`

	// version
	// Required: true
	Version *string `json:"version"`

	// release message
	// Required: true
	ReleaseMessage *string `json:"releaseMessage"`

	// description
	Description string `json:"description,omitempty"`

	// readme
	// Required: true
	Readme *string `json:"readme"`

	// example config
	// Required: true
	ExampleConfig *string `json:"exampleConfig"`

	// input schema
	// Required: true
	InputSchema []string `json:"inputSchema"`

	// output schema
	// Required: true
	OutputSchema []string `json:"outputSchema"`

	// public
	// Required: true
	Public *bool `json:"public"`

	// available
	// Required: true
	Available *bool `json:"available"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// created by
	// Required: true
	CreatedBy *CreatedBy `json:"createdBy"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updatedAt"`

	// updated by
	// Required: true
	UpdatedBy *UpdatedBy `json:"updatedBy"`
}

// Validate validates this get component version response
func (m *GetComponentVersionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleaseMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExampleConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetComponentVersionResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateReleaseMessage(formats strfmt.Registry) error {

	if err := validate.Required("releaseMessage", "body", m.ReleaseMessage); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateReadme(formats strfmt.Registry) error {

	if err := validate.Required("readme", "body", m.Readme); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateExampleConfig(formats strfmt.Registry) error {

	if err := validate.Required("exampleConfig", "body", m.ExampleConfig); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateInputSchema(formats strfmt.Registry) error {

	if err := validate.Required("inputSchema", "body", m.InputSchema); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateOutputSchema(formats strfmt.Registry) error {

	if err := validate.Required("outputSchema", "body", m.OutputSchema); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validatePublic(formats strfmt.Registry) error {

	if err := validate.Required("public", "body", m.Public); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("available", "body", m.Available); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *GetComponentVersionResponse) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updatedAt", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetComponentVersionResponse) validateUpdatedBy(formats strfmt.Registry) error {

	if err := validate.Required("updatedBy", "body", m.UpdatedBy); err != nil {
		return err
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetComponentVersionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetComponentVersionResponse) UnmarshalBinary(b []byte) error {
	var res GetComponentVersionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
