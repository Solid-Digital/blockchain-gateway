// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComponentConfiguration component configuration
// swagger:model ComponentConfiguration
type ComponentConfiguration struct {

	// component
	// Required: true
	Component *GetComponentResponse `json:"component"`

	// component version
	// Required: true
	ComponentVersion *GetComponentVersionResponse `json:"componentVersion"`

	// init configuration
	// Required: true
	InitConfiguration *string `json:"initConfiguration"`

	// message configuration
	// Required: true
	MessageConfiguration *string `json:"messageConfiguration"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this component configuration
func (m *ComponentConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentConfiguration) validateComponent(formats strfmt.Registry) error {

	if err := validate.Required("component", "body", m.Component); err != nil {
		return err
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *ComponentConfiguration) validateComponentVersion(formats strfmt.Registry) error {

	if err := validate.Required("componentVersion", "body", m.ComponentVersion); err != nil {
		return err
	}

	if m.ComponentVersion != nil {
		if err := m.ComponentVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("componentVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ComponentConfiguration) validateInitConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("initConfiguration", "body", m.InitConfiguration); err != nil {
		return err
	}

	return nil
}

func (m *ComponentConfiguration) validateMessageConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("messageConfiguration", "body", m.MessageConfiguration); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComponentConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentConfiguration) UnmarshalBinary(b []byte) error {
	var res ComponentConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
