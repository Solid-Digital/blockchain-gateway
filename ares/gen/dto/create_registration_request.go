// Code generated by go-swagger; DO NOT EDIT.

package dto

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRegistrationRequest create registration request
// swagger:model CreateRegistrationRequest
type CreateRegistrationRequest struct {

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// organization display name
	// Required: true
	OrganizationDisplayName *string `json:"organizationDisplayName"`

	// organization name
	// Required: true
	OrganizationName *string `json:"organizationName"`

	// registration reference
	RegistrationReference *CreateRegistrationRequestRegistrationReference `json:"registrationReference,omitempty"`
}

// Validate validates this create registration request
func (m *CreateRegistrationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRegistrationRequest) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CreateRegistrationRequest) validateOrganizationDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("organizationDisplayName", "body", m.OrganizationDisplayName); err != nil {
		return err
	}

	return nil
}

func (m *CreateRegistrationRequest) validateOrganizationName(formats strfmt.Registry) error {

	if err := validate.Required("organizationName", "body", m.OrganizationName); err != nil {
		return err
	}

	return nil
}

func (m *CreateRegistrationRequest) validateRegistrationReference(formats strfmt.Registry) error {

	if swag.IsZero(m.RegistrationReference) { // not required
		return nil
	}

	if m.RegistrationReference != nil {
		if err := m.RegistrationReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrationReference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRegistrationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRegistrationRequest) UnmarshalBinary(b []byte) error {
	var res CreateRegistrationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateRegistrationRequestRegistrationReference reference object for any billing provider or marketplace
// swagger:model CreateRegistrationRequestRegistrationReference
type CreateRegistrationRequestRegistrationReference struct {

	// source
	Source string `json:"source,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this create registration request registration reference
func (m *CreateRegistrationRequestRegistrationReference) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateRegistrationRequestRegistrationReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRegistrationRequestRegistrationReference) UnmarshalBinary(b []byte) error {
	var res CreateRegistrationRequestRegistrationReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
