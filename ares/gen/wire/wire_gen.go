// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"bitbucket.org/unchain/ares/gen/api"
	"bitbucket.org/unchain/ares/pkg/3p/aws"
	"bitbucket.org/unchain/ares/pkg/3p/casbin"
	"bitbucket.org/unchain/ares/pkg/3p/docker"
	"bitbucket.org/unchain/ares/pkg/3p/elastic"
	"bitbucket.org/unchain/ares/pkg/3p/harbor"
	"bitbucket.org/unchain/ares/pkg/3p/kubernetes"
	"bitbucket.org/unchain/ares/pkg/3p/mail"
	"bitbucket.org/unchain/ares/pkg/3p/mario"
	"bitbucket.org/unchain/ares/pkg/3p/redis"
	"bitbucket.org/unchain/ares/pkg/3p/s3"
	"bitbucket.org/unchain/ares/pkg/3p/sql"
	"bitbucket.org/unchain/ares/pkg/ares"
	"bitbucket.org/unchain/ares/pkg/auth"
	"bitbucket.org/unchain/ares/pkg/bootstrap"
	"bitbucket.org/unchain/ares/pkg/component"
	"bitbucket.org/unchain/ares/pkg/hello"
	"bitbucket.org/unchain/ares/pkg/http"
	"bitbucket.org/unchain/ares/pkg/organization"
	"bitbucket.org/unchain/ares/pkg/pipeline"
	"bitbucket.org/unchain/ares/pkg/subscription"
	"github.com/unchainio/interfaces/logger"
	"testing"
)

// Injectors from inject_ares.go:

func Ares(meta *ares.Metadata, cfg *Config, log logger.Logger) (*ares.Server, func(), error) {
	config := cfg.SQL
	db, err := sql.NewDB(log, config)
	if err != nil {
		return nil, nil, err
	}
	casbinConfig := cfg.Casbin
	enforcer, err := casbin.NewEnforcer(log, db, casbinConfig)
	if err != nil {
		return nil, nil, err
	}
	mailConfig := cfg.Mail
	mailer, err := mail.NewMailer(mailConfig)
	if err != nil {
		return nil, nil, err
	}
	redisConfig := cfg.Redis
	client, cleanup, err := redis.NewClient(log, redisConfig)
	if err != nil {
		return nil, nil, err
	}
	awsConfig := cfg.AWS
	awsClient, err := aws.New(awsConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authConfig := cfg.JWT
	service, err := auth.NewService(db, enforcer, mailer, client, awsClient, log, authConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authHandler := http.NewAuthHandler(service, log)
	s3Config := cfg.S3
	fileStore, err := s3.NewFileStore(log, s3Config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	componentService, err := component.NewService(db, fileStore, enforcer, log)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	componentHandler := http.NewComponentHandler(componentService, log)
	helloService := hello.NewService(meta)
	helloHandler := http.NewHelloHandler(helloService, log)
	harborConfig := cfg.Harbor
	harborClient, err := harbor.NewClient(harborConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	organizationService := organization.NewService(db, service, enforcer, mailer, harborClient)
	organizationHandler := http.NewOrganizationHandler(organizationService, log)
	marioConfig := cfg.Mario
	marioClient := mario.NewClient(log, marioConfig)
	dockerConfig := cfg.Docker
	dockerClient, cleanup2, err := docker.NewClient(log, dockerConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	containerService := docker.NewContainerService(dockerClient, log, dockerConfig)
	kubernetesConfig := cfg.Kubernetes
	kubernetesService, err := kubernetes.NewService(kubernetesConfig, log)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	elasticConfig := cfg.Elastic
	elasticClient, err := elastic.NewClient(elasticConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pipelineConfig := cfg.Pipelines
	pipelineService := pipeline.NewService(db, fileStore, marioClient, containerService, kubernetesService, harborClient, elasticClient, pipelineConfig, log)
	pipelineHandler := http.NewPipelineHandler(pipelineService, log)
	v := http.InnerMiddlewareProvider()
	v2 := http.AuthorizationMiddleware(enforcer)
	v3 := http.AuthenticationMiddleware(service)
	handlers := &api.Handlers{
		AuthAPI:                 authHandler,
		ComponentAPI:            componentHandler,
		HelloAPI:                helloHandler,
		OrganizationAPI:         organizationHandler,
		PipelineAPI:             pipelineHandler,
		InnerMiddleware:         v,
		Authorizer:              v2,
		AuthTokenAuthentication: v3,
	}
	xloggerConfig := cfg.Logger
	middleware := http.MiddlewareProvider(xloggerConfig)
	subscriptionConfig := cfg.Subscription
	subscriptionService, err := subscription.NewService(subscriptionConfig, db, awsClient, log)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, err := ares.NewServer(handlers, middleware, db, client, fileStore, enforcer, service, componentService, kubernetesService, organizationService, pipelineService, subscriptionService, log)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

// Injectors from inject_ares_bitbucket.go:

func AresForBitBucket(t *testing.T, meta *ares.Metadata, cfg *Config, log logger.Logger) (*ares.Server, func(), error) {
	config := cfg.SQL
	db, err := sql.NewDB(log, config)
	if err != nil {
		return nil, nil, err
	}
	casbinConfig := cfg.Casbin
	enforcer, err := casbin.NewEnforcer(log, db, casbinConfig)
	if err != nil {
		return nil, nil, err
	}
	mailConfig := cfg.Mail
	mailer, err := mail.NewMailer(mailConfig)
	if err != nil {
		return nil, nil, err
	}
	redisConfig := cfg.Redis
	client, cleanup, err := redis.NewClient(log, redisConfig)
	if err != nil {
		return nil, nil, err
	}
	awsClient := MockAWSProvider(t)
	authConfig := cfg.JWT
	service, err := auth.NewService(db, enforcer, mailer, client, awsClient, log, authConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authHandler := http.NewAuthHandler(service, log)
	s3Config := cfg.S3
	fileStore, err := s3.NewFileStore(log, s3Config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	componentService, err := component.NewService(db, fileStore, enforcer, log)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	componentHandler := http.NewComponentHandler(componentService, log)
	helloService := hello.NewService(meta)
	helloHandler := http.NewHelloHandler(helloService, log)
	harborConfig := cfg.Harbor
	harborClient, err := harbor.NewClient(harborConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	organizationService := organization.NewService(db, service, enforcer, mailer, harborClient)
	organizationHandler := http.NewOrganizationHandler(organizationService, log)
	marioConfig := cfg.Mario
	marioClient := mario.NewClient(log, marioConfig)
	dockerConfig := cfg.Docker
	dockerClient, cleanup2, err := docker.NewClient(log, dockerConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	containerService := docker.NewContainerService(dockerClient, log, dockerConfig)
	mockDeploymentService := MockKubernetesProvider()
	elasticConfig := cfg.Elastic
	elasticClient, err := elastic.NewClient(elasticConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pipelineConfig := cfg.Pipelines
	pipelineService := pipeline.NewService(db, fileStore, marioClient, containerService, mockDeploymentService, harborClient, elasticClient, pipelineConfig, log)
	pipelineHandler := http.NewPipelineHandler(pipelineService, log)
	v := http.InnerMiddlewareProvider()
	v2 := http.AuthorizationMiddleware(enforcer)
	v3 := http.AuthenticationMiddleware(service)
	handlers := &api.Handlers{
		AuthAPI:                 authHandler,
		ComponentAPI:            componentHandler,
		HelloAPI:                helloHandler,
		OrganizationAPI:         organizationHandler,
		PipelineAPI:             pipelineHandler,
		InnerMiddleware:         v,
		Authorizer:              v2,
		AuthTokenAuthentication: v3,
	}
	xloggerConfig := cfg.Logger
	middleware := http.MiddlewareProvider(xloggerConfig)
	subscriptionConfig := cfg.Subscription
	subscriptionService, err := subscription.NewService(subscriptionConfig, db, awsClient, log)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, err := ares.NewServer(handlers, middleware, db, client, fileStore, enforcer, service, componentService, mockDeploymentService, organizationService, pipelineService, subscriptionService, log)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

// Injectors from inject_ares_tests.go:

func AresForTests(t *testing.T, meta *ares.Metadata, cfg *Config, log logger.Logger) (*ares.Server, func(), error) {
	config := cfg.SQL
	db, err := sql.NewDB(log, config)
	if err != nil {
		return nil, nil, err
	}
	casbinConfig := cfg.Casbin
	enforcer, err := casbin.NewEnforcer(log, db, casbinConfig)
	if err != nil {
		return nil, nil, err
	}
	mailConfig := cfg.Mail
	mailer, err := mail.NewMailer(mailConfig)
	if err != nil {
		return nil, nil, err
	}
	redisConfig := cfg.Redis
	client, cleanup, err := redis.NewClient(log, redisConfig)
	if err != nil {
		return nil, nil, err
	}
	awsClient := MockAWSProvider(t)
	authConfig := cfg.JWT
	service, err := auth.NewService(db, enforcer, mailer, client, awsClient, log, authConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authHandler := http.NewAuthHandler(service, log)
	s3Config := cfg.S3
	fileStore, err := s3.NewFileStore(log, s3Config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	componentService, err := component.NewService(db, fileStore, enforcer, log)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	componentHandler := http.NewComponentHandler(componentService, log)
	helloService := hello.NewService(meta)
	helloHandler := http.NewHelloHandler(helloService, log)
	harborConfig := cfg.Harbor
	harborClient, err := harbor.NewClient(harborConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	organizationService := organization.NewService(db, service, enforcer, mailer, harborClient)
	organizationHandler := http.NewOrganizationHandler(organizationService, log)
	marioConfig := cfg.Mario
	marioClient := mario.NewClient(log, marioConfig)
	dockerConfig := cfg.Docker
	dockerClient, cleanup2, err := docker.NewClient(log, dockerConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	containerService := docker.NewContainerService(dockerClient, log, dockerConfig)
	kubernetesConfig := cfg.Kubernetes
	kubernetesService, err := kubernetes.NewService(kubernetesConfig, log)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	elasticConfig := cfg.Elastic
	elasticClient, err := elastic.NewClient(elasticConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pipelineConfig := cfg.Pipelines
	pipelineService := pipeline.NewService(db, fileStore, marioClient, containerService, kubernetesService, harborClient, elasticClient, pipelineConfig, log)
	pipelineHandler := http.NewPipelineHandler(pipelineService, log)
	v := http.InnerMiddlewareProvider()
	v2 := http.AuthorizationMiddleware(enforcer)
	v3 := http.AuthenticationMiddleware(service)
	handlers := &api.Handlers{
		AuthAPI:                 authHandler,
		ComponentAPI:            componentHandler,
		HelloAPI:                helloHandler,
		OrganizationAPI:         organizationHandler,
		PipelineAPI:             pipelineHandler,
		InnerMiddleware:         v,
		Authorizer:              v2,
		AuthTokenAuthentication: v3,
	}
	xloggerConfig := cfg.Logger
	middleware := http.MiddlewareProvider(xloggerConfig)
	subscriptionConfig := cfg.Subscription
	subscriptionService, err := subscription.NewService(subscriptionConfig, db, awsClient, log)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, err := ares.NewServer(handlers, middleware, db, client, fileStore, enforcer, service, componentService, kubernetesService, organizationService, pipelineService, subscriptionService, log)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

// Injectors from inject_bootstrap.go:

func Bootstrap(meta *ares.Metadata, cfg *Config, log logger.Logger) (*bootstrap.Service, func(), error) {
	config := cfg.SQL
	db, err := sql.NewDB(log, config)
	if err != nil {
		return nil, nil, err
	}
	casbinConfig := cfg.Casbin
	enforcer, err := casbin.NewEnforcer(log, db, casbinConfig)
	if err != nil {
		return nil, nil, err
	}
	mailConfig := cfg.Mail
	mailer, err := mail.NewMailer(mailConfig)
	if err != nil {
		return nil, nil, err
	}
	redisConfig := cfg.Redis
	client, cleanup, err := redis.NewClient(log, redisConfig)
	if err != nil {
		return nil, nil, err
	}
	awsClient := NilAWSProvider()
	authConfig := cfg.JWT
	service, err := auth.NewService(db, enforcer, mailer, client, awsClient, log, authConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	harborConfig := cfg.Harbor
	harborClient, err := harbor.NewClient(harborConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	organizationService := organization.NewService(db, service, enforcer, mailer, harborClient)
	bootstrapConfig := cfg.Bootstrap
	bootstrapService := bootstrap.New(db, organizationService, enforcer, service, bootstrapConfig)
	return bootstrapService, func() {
		cleanup()
	}, nil
}
