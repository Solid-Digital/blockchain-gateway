// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ares/aws.go

// Package mock_ares is a generated GoMock package.
package mock_ares

import (
	ares "bitbucket.org/unchain/ares/pkg/ares"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAWSClient is a mock of AWSClient interface
type MockAWSClient struct {
	ctrl     *gomock.Controller
	recorder *MockAWSClientMockRecorder
}

// MockAWSClientMockRecorder is the mock recorder for MockAWSClient
type MockAWSClientMockRecorder struct {
	mock *MockAWSClient
}

// NewMockAWSClient creates a new mock instance
func NewMockAWSClient(ctrl *gomock.Controller) *MockAWSClient {
	mock := &MockAWSClient{ctrl: ctrl}
	mock.recorder = &MockAWSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAWSClient) EXPECT() *MockAWSClientMockRecorder {
	return m.recorder
}

// ResolveCustomer mocks base method
func (m *MockAWSClient) ResolveCustomer(token string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCustomer", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveCustomer indicates an expected call of ResolveCustomer
func (mr *MockAWSClientMockRecorder) ResolveCustomer(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCustomer", reflect.TypeOf((*MockAWSClient)(nil).ResolveCustomer), token)
}

// DeleteSQSMessage mocks base method
func (m *MockAWSClient) DeleteSQSMessage(Handle *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSQSMessage", Handle)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSQSMessage indicates an expected call of DeleteSQSMessage
func (mr *MockAWSClientMockRecorder) DeleteSQSMessage(Handle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSQSMessage", reflect.TypeOf((*MockAWSClient)(nil).DeleteSQSMessage), Handle)
}

// ReceiveMarketplaceNotification mocks base method
func (m *MockAWSClient) ReceiveMarketplaceNotification() ares.AWSMarketplaceNotificationMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMarketplaceNotification")
	ret0, _ := ret[0].(ares.AWSMarketplaceNotificationMessage)
	return ret0
}

// ReceiveMarketplaceNotification indicates an expected call of ReceiveMarketplaceNotification
func (mr *MockAWSClientMockRecorder) ReceiveMarketplaceNotification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMarketplaceNotification", reflect.TypeOf((*MockAWSClient)(nil).ReceiveMarketplaceNotification))
}

// GetEntitlements mocks base method
func (m *MockAWSClient) GetEntitlements(customerID, productCode string) ([]*ares.AWSEntitlement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitlements", customerID, productCode)
	ret0, _ := ret[0].([]*ares.AWSEntitlement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitlements indicates an expected call of GetEntitlements
func (mr *MockAWSClientMockRecorder) GetEntitlements(customerID, productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitlements", reflect.TypeOf((*MockAWSClient)(nil).GetEntitlements), customerID, productCode)
}
