// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ares/component.go

// Package mock_ares is a generated GoMock package.
package mock_ares

import (
	dto "bitbucket.org/unchain/ares/gen/dto"
	apperr "bitbucket.org/unchain/ares/pkg/3p/apperr"
	ares "bitbucket.org/unchain/ares/pkg/ares"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockComponentService is a mock of ComponentService interface
type MockComponentService struct {
	ctrl     *gomock.Controller
	recorder *MockComponentServiceMockRecorder
}

// MockComponentServiceMockRecorder is the mock recorder for MockComponentService
type MockComponentServiceMockRecorder struct {
	mock *MockComponentService
}

// NewMockComponentService creates a new mock instance
func NewMockComponentService(ctrl *gomock.Controller) *MockComponentService {
	mock := &MockComponentService{ctrl: ctrl}
	mock.recorder = &MockComponentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentService) EXPECT() *MockComponentServiceMockRecorder {
	return m.recorder
}

// CreateAction mocks base method
func (m *MockComponentService) CreateAction(params *dto.CreateComponentRequest, orgName string, principal *dto.User) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAction", params, orgName, principal)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreateAction indicates an expected call of CreateAction
func (mr *MockComponentServiceMockRecorder) CreateAction(params, orgName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAction", reflect.TypeOf((*MockComponentService)(nil).CreateAction), params, orgName, principal)
}

// CreateActionVersion mocks base method
func (m *MockComponentService) CreateActionVersion(params *ares.CreateActionVersionRequest) (*dto.GetComponentVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionVersion", params)
	ret0, _ := ret[0].(*dto.GetComponentVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreateActionVersion indicates an expected call of CreateActionVersion
func (mr *MockComponentServiceMockRecorder) CreateActionVersion(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionVersion", reflect.TypeOf((*MockComponentService)(nil).CreateActionVersion), params)
}

// GetPublicAction mocks base method
func (m *MockComponentService) GetPublicAction(name string) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicAction", name)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetPublicAction indicates an expected call of GetPublicAction
func (mr *MockComponentServiceMockRecorder) GetPublicAction(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicAction", reflect.TypeOf((*MockComponentService)(nil).GetPublicAction), name)
}

// GetAction mocks base method
func (m *MockComponentService) GetAction(orgName, name string) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", orgName, name)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAction indicates an expected call of GetAction
func (mr *MockComponentServiceMockRecorder) GetAction(orgName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockComponentService)(nil).GetAction), orgName, name)
}

// GetActionVersion mocks base method
func (m *MockComponentService) GetActionVersion(orgName, name, version string) (*dto.GetComponentVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionVersion", orgName, name, version)
	ret0, _ := ret[0].(*dto.GetComponentVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetActionVersion indicates an expected call of GetActionVersion
func (mr *MockComponentServiceMockRecorder) GetActionVersion(orgName, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionVersion", reflect.TypeOf((*MockComponentService)(nil).GetActionVersion), orgName, name, version)
}

// GetPublicActionVersion mocks base method
func (m *MockComponentService) GetPublicActionVersion(name, version string) (*dto.GetComponentVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicActionVersion", name, version)
	ret0, _ := ret[0].(*dto.GetComponentVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetPublicActionVersion indicates an expected call of GetPublicActionVersion
func (mr *MockComponentServiceMockRecorder) GetPublicActionVersion(name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicActionVersion", reflect.TypeOf((*MockComponentService)(nil).GetPublicActionVersion), name, version)
}

// CreateBase mocks base method
func (m *MockComponentService) CreateBase(params *dto.CreateComponentRequest, orgName string, principal *dto.User) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBase", params, orgName, principal)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreateBase indicates an expected call of CreateBase
func (mr *MockComponentServiceMockRecorder) CreateBase(params, orgName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBase", reflect.TypeOf((*MockComponentService)(nil).CreateBase), params, orgName, principal)
}

// CreateBaseVersion mocks base method
func (m *MockComponentService) CreateBaseVersion(params *dto.CreateBaseVersionRequest, orgName, name string, principal *dto.User) (*dto.GetBaseVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBaseVersion", params, orgName, name, principal)
	ret0, _ := ret[0].(*dto.GetBaseVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreateBaseVersion indicates an expected call of CreateBaseVersion
func (mr *MockComponentServiceMockRecorder) CreateBaseVersion(params, orgName, name, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBaseVersion", reflect.TypeOf((*MockComponentService)(nil).CreateBaseVersion), params, orgName, name, principal)
}

// CreateTrigger mocks base method
func (m *MockComponentService) CreateTrigger(params *dto.CreateComponentRequest, orgName string, principal *dto.User) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrigger", params, orgName, principal)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger
func (mr *MockComponentServiceMockRecorder) CreateTrigger(params, orgName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockComponentService)(nil).CreateTrigger), params, orgName, principal)
}

// CreateTriggerVersion mocks base method
func (m *MockComponentService) CreateTriggerVersion(params *ares.CreateTriggerVersionRequest) (*dto.GetComponentVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTriggerVersion", params)
	ret0, _ := ret[0].(*dto.GetComponentVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreateTriggerVersion indicates an expected call of CreateTriggerVersion
func (mr *MockComponentServiceMockRecorder) CreateTriggerVersion(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTriggerVersion", reflect.TypeOf((*MockComponentService)(nil).CreateTriggerVersion), params)
}

// GetBase mocks base method
func (m *MockComponentService) GetBase(orgName, name string) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBase", orgName, name)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetBase indicates an expected call of GetBase
func (mr *MockComponentServiceMockRecorder) GetBase(orgName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBase", reflect.TypeOf((*MockComponentService)(nil).GetBase), orgName, name)
}

// GetBaseVersion mocks base method
func (m *MockComponentService) GetBaseVersion(orgName, name, version string) (*dto.GetBaseVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseVersion", orgName, name, version)
	ret0, _ := ret[0].(*dto.GetBaseVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetBaseVersion indicates an expected call of GetBaseVersion
func (mr *MockComponentServiceMockRecorder) GetBaseVersion(orgName, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseVersion", reflect.TypeOf((*MockComponentService)(nil).GetBaseVersion), orgName, name, version)
}

// GetPublicTrigger mocks base method
func (m *MockComponentService) GetPublicTrigger(name string) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicTrigger", name)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetPublicTrigger indicates an expected call of GetPublicTrigger
func (mr *MockComponentServiceMockRecorder) GetPublicTrigger(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicTrigger", reflect.TypeOf((*MockComponentService)(nil).GetPublicTrigger), name)
}

// GetTrigger mocks base method
func (m *MockComponentService) GetTrigger(orgName, name string) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrigger", orgName, name)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetTrigger indicates an expected call of GetTrigger
func (mr *MockComponentServiceMockRecorder) GetTrigger(orgName, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrigger", reflect.TypeOf((*MockComponentService)(nil).GetTrigger), orgName, name)
}

// GetTriggerVersion mocks base method
func (m *MockComponentService) GetTriggerVersion(orgName, name, version string) (*dto.GetComponentVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerVersion", orgName, name, version)
	ret0, _ := ret[0].(*dto.GetComponentVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetTriggerVersion indicates an expected call of GetTriggerVersion
func (mr *MockComponentServiceMockRecorder) GetTriggerVersion(orgName, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerVersion", reflect.TypeOf((*MockComponentService)(nil).GetTriggerVersion), orgName, name, version)
}

// GetPublicTriggerVersion mocks base method
func (m *MockComponentService) GetPublicTriggerVersion(name, version string) (*dto.GetComponentVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicTriggerVersion", name, version)
	ret0, _ := ret[0].(*dto.GetComponentVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetPublicTriggerVersion indicates an expected call of GetPublicTriggerVersion
func (mr *MockComponentServiceMockRecorder) GetPublicTriggerVersion(name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicTriggerVersion", reflect.TypeOf((*MockComponentService)(nil).GetPublicTriggerVersion), name, version)
}

// UpdateAction mocks base method
func (m *MockComponentService) UpdateAction(params *dto.UpdateComponentRequest, orgName, name string, principal *dto.User) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAction", params, orgName, name, principal)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateAction indicates an expected call of UpdateAction
func (mr *MockComponentServiceMockRecorder) UpdateAction(params, orgName, name, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAction", reflect.TypeOf((*MockComponentService)(nil).UpdateAction), params, orgName, name, principal)
}

// UpdateBase mocks base method
func (m *MockComponentService) UpdateBase(params *dto.UpdateComponentRequest, orgName, name string, principal *dto.User) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBase", params, orgName, name, principal)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateBase indicates an expected call of UpdateBase
func (mr *MockComponentServiceMockRecorder) UpdateBase(params, orgName, name, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBase", reflect.TypeOf((*MockComponentService)(nil).UpdateBase), params, orgName, name, principal)
}

// UpdateTrigger mocks base method
func (m *MockComponentService) UpdateTrigger(params *dto.UpdateComponentRequest, orgName, name string, principal *dto.User) (*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrigger", params, orgName, name, principal)
	ret0, _ := ret[0].(*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateTrigger indicates an expected call of UpdateTrigger
func (mr *MockComponentServiceMockRecorder) UpdateTrigger(params, orgName, name, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrigger", reflect.TypeOf((*MockComponentService)(nil).UpdateTrigger), params, orgName, name, principal)
}

// GetAllBases mocks base method
func (m *MockComponentService) GetAllBases(orgName string, available *bool) ([]*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBases", orgName, available)
	ret0, _ := ret[0].([]*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllBases indicates an expected call of GetAllBases
func (mr *MockComponentServiceMockRecorder) GetAllBases(orgName, available interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBases", reflect.TypeOf((*MockComponentService)(nil).GetAllBases), orgName, available)
}

// GetAllTriggers mocks base method
func (m *MockComponentService) GetAllTriggers(orgName string, available *bool) ([]*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTriggers", orgName, available)
	ret0, _ := ret[0].([]*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllTriggers indicates an expected call of GetAllTriggers
func (mr *MockComponentServiceMockRecorder) GetAllTriggers(orgName, available interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTriggers", reflect.TypeOf((*MockComponentService)(nil).GetAllTriggers), orgName, available)
}

// GetAllPublicTriggers mocks base method
func (m *MockComponentService) GetAllPublicTriggers() ([]*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPublicTriggers")
	ret0, _ := ret[0].([]*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllPublicTriggers indicates an expected call of GetAllPublicTriggers
func (mr *MockComponentServiceMockRecorder) GetAllPublicTriggers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPublicTriggers", reflect.TypeOf((*MockComponentService)(nil).GetAllPublicTriggers))
}

// GetAllActions mocks base method
func (m *MockComponentService) GetAllActions(orgName string, available *bool) ([]*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActions", orgName, available)
	ret0, _ := ret[0].([]*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllActions indicates an expected call of GetAllActions
func (mr *MockComponentServiceMockRecorder) GetAllActions(orgName, available interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActions", reflect.TypeOf((*MockComponentService)(nil).GetAllActions), orgName, available)
}

// GetAllPublicActions mocks base method
func (m *MockComponentService) GetAllPublicActions() ([]*dto.GetComponentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPublicActions")
	ret0, _ := ret[0].([]*dto.GetComponentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllPublicActions indicates an expected call of GetAllPublicActions
func (mr *MockComponentServiceMockRecorder) GetAllPublicActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPublicActions", reflect.TypeOf((*MockComponentService)(nil).GetAllPublicActions))
}

// UpdateTriggerVersion mocks base method
func (m *MockComponentService) UpdateTriggerVersion(params *dto.UpdateComponentVersionRequest, orgName, name, version string, principal *dto.User) (*dto.GetComponentVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTriggerVersion", params, orgName, name, version, principal)
	ret0, _ := ret[0].(*dto.GetComponentVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateTriggerVersion indicates an expected call of UpdateTriggerVersion
func (mr *MockComponentServiceMockRecorder) UpdateTriggerVersion(params, orgName, name, version, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTriggerVersion", reflect.TypeOf((*MockComponentService)(nil).UpdateTriggerVersion), params, orgName, name, version, principal)
}

// UpdateActionVersion mocks base method
func (m *MockComponentService) UpdateActionVersion(params *dto.UpdateComponentVersionRequest, orgName, name, version string, principal *dto.User) (*dto.GetComponentVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActionVersion", params, orgName, name, version, principal)
	ret0, _ := ret[0].(*dto.GetComponentVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateActionVersion indicates an expected call of UpdateActionVersion
func (mr *MockComponentServiceMockRecorder) UpdateActionVersion(params, orgName, name, version, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionVersion", reflect.TypeOf((*MockComponentService)(nil).UpdateActionVersion), params, orgName, name, version, principal)
}

// UpdateBaseVersion mocks base method
func (m *MockComponentService) UpdateBaseVersion(params *dto.UpdateBaseVersionRequest, orgName, name, version string, principal *dto.User) (*dto.GetBaseVersionResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBaseVersion", params, orgName, name, version, principal)
	ret0, _ := ret[0].(*dto.GetBaseVersionResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateBaseVersion indicates an expected call of UpdateBaseVersion
func (mr *MockComponentServiceMockRecorder) UpdateBaseVersion(params, orgName, name, version, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBaseVersion", reflect.TypeOf((*MockComponentService)(nil).UpdateBaseVersion), params, orgName, name, version, principal)
}
