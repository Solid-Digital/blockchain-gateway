// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ares/auth.go

// Package mock_ares is a generated GoMock package.
package mock_ares

import (
	dto "bitbucket.org/unchain/ares/gen/dto"
	orm "bitbucket.org/unchain/ares/gen/orm"
	apperr "bitbucket.org/unchain/ares/pkg/3p/apperr"
	ares "bitbucket.org/unchain/ares/pkg/ares"
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthService is a mock of AuthService interface
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateRegistration mocks base method
func (m *MockAuthService) CreateRegistration(params *dto.CreateRegistrationRequest) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistration", params)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// CreateRegistration indicates an expected call of CreateRegistration
func (mr *MockAuthServiceMockRecorder) CreateRegistration(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistration", reflect.TypeOf((*MockAuthService)(nil).CreateRegistration), params)
}

// ConfirmRegistration mocks base method
func (m *MockAuthService) ConfirmRegistration(params *dto.ConfirmRegistrationRequest) (*dto.LoginResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmRegistration", params)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// ConfirmRegistration indicates an expected call of ConfirmRegistration
func (mr *MockAuthServiceMockRecorder) ConfirmRegistration(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmRegistration", reflect.TypeOf((*MockAuthService)(nil).ConfirmRegistration), params)
}

// Login mocks base method
func (m *MockAuthService) Login(ip string, params *dto.LoginRequest) (*dto.LoginResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ip, params)
	ret0, _ := ret[0].(*dto.LoginResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthServiceMockRecorder) Login(ip, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), ip, params)
}

// Logout mocks base method
func (m *MockAuthService) Logout(token *dto.Token) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", token)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockAuthServiceMockRecorder) Logout(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthService)(nil).Logout), token)
}

// GetCurrentUser mocks base method
func (m *MockAuthService) GetCurrentUser(principal *dto.User) (*dto.GetCurrentUserResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", principal)
	ret0, _ := ret[0].(*dto.GetCurrentUserResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser
func (mr *MockAuthServiceMockRecorder) GetCurrentUser(principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockAuthService)(nil).GetCurrentUser), principal)
}

// UpdateCurrentUser mocks base method
func (m *MockAuthService) UpdateCurrentUser(params *dto.UpdateCurrentUserRequest, u *dto.User) (*dto.GetCurrentUserResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentUser", params, u)
	ret0, _ := ret[0].(*dto.GetCurrentUserResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateCurrentUser indicates an expected call of UpdateCurrentUser
func (mr *MockAuthServiceMockRecorder) UpdateCurrentUser(params, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentUser", reflect.TypeOf((*MockAuthService)(nil).UpdateCurrentUser), params, u)
}

// ChangeCurrentPassword mocks base method
func (m *MockAuthService) ChangeCurrentPassword(params *dto.ChangeCurrentPasswordRequest, user *dto.User) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCurrentPassword", params, user)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// ChangeCurrentPassword indicates an expected call of ChangeCurrentPassword
func (mr *MockAuthServiceMockRecorder) ChangeCurrentPassword(params, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCurrentPassword", reflect.TypeOf((*MockAuthService)(nil).ChangeCurrentPassword), params, user)
}

// ResetPassword mocks base method
func (m *MockAuthService) ResetPassword(params *dto.ResetPasswordRequest) (*dto.ResetPasswordResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", params)
	ret0, _ := ret[0].(*dto.ResetPasswordResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword
func (mr *MockAuthServiceMockRecorder) ResetPassword(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockAuthService)(nil).ResetPassword), params)
}

// ConfirmResetPassword mocks base method
func (m *MockAuthService) ConfirmResetPassword(params *dto.ConfirmResetPasswordRequest) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmResetPassword", params)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// ConfirmResetPassword indicates an expected call of ConfirmResetPassword
func (mr *MockAuthServiceMockRecorder) ConfirmResetPassword(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmResetPassword", reflect.TypeOf((*MockAuthService)(nil).ConfirmResetPassword), params)
}

// DeleteCurrentUser mocks base method
func (m *MockAuthService) DeleteCurrentUser(principal *dto.User) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCurrentUser", principal)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// DeleteCurrentUser indicates an expected call of DeleteCurrentUser
func (mr *MockAuthServiceMockRecorder) DeleteCurrentUser(principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrentUser", reflect.TypeOf((*MockAuthService)(nil).DeleteCurrentUser), principal)
}

// HashPassword mocks base method
func (m *MockAuthService) HashPassword(password string) (string, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword
func (mr *MockAuthServiceMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockAuthService)(nil).HashPassword), password)
}

// CompareHashAndPassword mocks base method
func (m *MockAuthService) CompareHashAndPassword(hash, password string) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hash, password)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword
func (mr *MockAuthServiceMockRecorder) CompareHashAndPassword(hash, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockAuthService)(nil).CompareHashAndPassword), hash, password)
}

// Authenticate mocks base method
func (m *MockAuthService) Authenticate(token string) (*dto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", token)
	ret0, _ := ret[0].(*dto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockAuthServiceMockRecorder) Authenticate(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthService)(nil).Authenticate), token)
}

// InviteUserTx mocks base method
func (m *MockAuthService) InviteUserTx(ctx context.Context, tx *sql.Tx, email, orgName string) (string, *orm.User, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUserTx", ctx, tx, email, orgName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*orm.User)
	ret2, _ := ret[2].(*apperr.Error)
	return ret0, ret1, ret2
}

// InviteUserTx indicates an expected call of InviteUserTx
func (mr *MockAuthServiceMockRecorder) InviteUserTx(ctx, tx, email, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUserTx", reflect.TypeOf((*MockAuthService)(nil).InviteUserTx), ctx, tx, email, orgName)
}

// SetOrganizationService mocks base method
func (m *MockAuthService) SetOrganizationService(service ares.OrganizationService) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOrganizationService", service)
}

// SetOrganizationService indicates an expected call of SetOrganizationService
func (mr *MockAuthServiceMockRecorder) SetOrganizationService(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrganizationService", reflect.TypeOf((*MockAuthService)(nil).SetOrganizationService), service)
}

// GetConnectURL mocks base method
func (m *MockAuthService) GetConnectURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConnectURL indicates an expected call of GetConnectURL
func (mr *MockAuthServiceMockRecorder) GetConnectURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectURL", reflect.TypeOf((*MockAuthService)(nil).GetConnectURL))
}
