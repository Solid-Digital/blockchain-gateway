// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ares/deployment.go

// Package mock_ares is a generated GoMock package.
package mock_ares

import (
	ares "bitbucket.org/unchain/ares/pkg/ares"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockDeploymentService is a mock of DeploymentService interface
type MockDeploymentService struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentServiceMockRecorder
}

// MockDeploymentServiceMockRecorder is the mock recorder for MockDeploymentService
type MockDeploymentServiceMockRecorder struct {
	mock *MockDeploymentService
}

// NewMockDeploymentService creates a new mock instance
func NewMockDeploymentService(ctrl *gomock.Controller) *MockDeploymentService {
	mock := &MockDeploymentService{ctrl: ctrl}
	mock.recorder = &MockDeploymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentService) EXPECT() *MockDeploymentServiceMockRecorder {
	return m.recorder
}

// GetDeploymentPods mocks base method
func (m *MockDeploymentService) GetDeploymentPods(namespace, name string) (*v10.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentPods", namespace, name)
	ret0, _ := ret[0].(*v10.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentPods indicates an expected call of GetDeploymentPods
func (mr *MockDeploymentServiceMockRecorder) GetDeploymentPods(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentPods", reflect.TypeOf((*MockDeploymentService)(nil).GetDeploymentPods), namespace, name)
}

// GetDeployment mocks base method
func (m *MockDeploymentService) GetDeployment(namespace, name string) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", namespace, name)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockDeploymentServiceMockRecorder) GetDeployment(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockDeploymentService)(nil).GetDeployment), namespace, name)
}

// GetAllDeployments mocks base method
func (m *MockDeploymentService) GetAllDeployments(namespace string, names []string) (*v1.DeploymentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeployments", namespace, names)
	ret0, _ := ret[0].(*v1.DeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeployments indicates an expected call of GetAllDeployments
func (mr *MockDeploymentServiceMockRecorder) GetAllDeployments(namespace, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeployments", reflect.TypeOf((*MockDeploymentService)(nil).GetAllDeployments), namespace, names)
}

// CreateDeployment mocks base method
func (m *MockDeploymentService) CreateDeployment(params *ares.DeploymentParams) (*v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeployment", params)
	ret0, _ := ret[0].(*v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeployment indicates an expected call of CreateDeployment
func (mr *MockDeploymentServiceMockRecorder) CreateDeployment(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeployment", reflect.TypeOf((*MockDeploymentService)(nil).CreateDeployment), params)
}

// DeleteDeployment mocks base method
func (m *MockDeploymentService) DeleteDeployment(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeployment", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeployment indicates an expected call of DeleteDeployment
func (mr *MockDeploymentServiceMockRecorder) DeleteDeployment(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeployment", reflect.TypeOf((*MockDeploymentService)(nil).DeleteDeployment), namespace, name)
}

// DeleteAllDeployments mocks base method
func (m *MockDeploymentService) DeleteAllDeployments(namespace string, names []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllDeployments", namespace, names)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllDeployments indicates an expected call of DeleteAllDeployments
func (mr *MockDeploymentServiceMockRecorder) DeleteAllDeployments(namespace, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllDeployments", reflect.TypeOf((*MockDeploymentService)(nil).DeleteAllDeployments), namespace, names)
}
