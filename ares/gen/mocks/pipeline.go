// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ares/pipeline.go

// Package mock_ares is a generated GoMock package.
package mock_ares

import (
	dto "bitbucket.org/unchain/ares/gen/dto"
	apperr "bitbucket.org/unchain/ares/pkg/3p/apperr"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPipelineService is a mock of PipelineService interface
type MockPipelineService struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineServiceMockRecorder
}

// MockPipelineServiceMockRecorder is the mock recorder for MockPipelineService
type MockPipelineServiceMockRecorder struct {
	mock *MockPipelineService
}

// NewMockPipelineService creates a new mock instance
func NewMockPipelineService(ctrl *gomock.Controller) *MockPipelineService {
	mock := &MockPipelineService{ctrl: ctrl}
	mock.recorder = &MockPipelineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPipelineService) EXPECT() *MockPipelineServiceMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method
func (m *MockPipelineService) CreatePipeline(params *dto.CreatePipelineRequest, orgName string, principal *dto.User) (*dto.GetPipelineResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", params, orgName, principal)
	ret0, _ := ret[0].(*dto.GetPipelineResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline
func (mr *MockPipelineServiceMockRecorder) CreatePipeline(params, orgName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelineService)(nil).CreatePipeline), params, orgName, principal)
}

// UpdatePipeline mocks base method
func (m *MockPipelineService) UpdatePipeline(params *dto.UpdatePipelineRequest, orgName, pipelineName string, principal *dto.User) (*dto.GetPipelineResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", params, orgName, pipelineName, principal)
	ret0, _ := ret[0].(*dto.GetPipelineResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdatePipeline indicates an expected call of UpdatePipeline
func (mr *MockPipelineServiceMockRecorder) UpdatePipeline(params, orgName, pipelineName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockPipelineService)(nil).UpdatePipeline), params, orgName, pipelineName, principal)
}

// GetPipeline mocks base method
func (m *MockPipelineService) GetPipeline(orgName, pipelineName string) (*dto.GetPipelineResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", orgName, pipelineName)
	ret0, _ := ret[0].(*dto.GetPipelineResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline
func (mr *MockPipelineServiceMockRecorder) GetPipeline(orgName, pipelineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelineService)(nil).GetPipeline), orgName, pipelineName)
}

// DeletePipeline mocks base method
func (m *MockPipelineService) DeletePipeline(orgName, pipelineName string, principal *dto.User) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", orgName, pipelineName, principal)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockPipelineServiceMockRecorder) DeletePipeline(orgName, pipelineName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockPipelineService)(nil).DeletePipeline), orgName, pipelineName, principal)
}

// UpdateDraftConfiguration mocks base method
func (m *MockPipelineService) UpdateDraftConfiguration(params *dto.UpdateDraftConfigurationRequest, orgName, pipelineName string, principal *dto.User) (*dto.GetConfigurationResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraftConfiguration", params, orgName, pipelineName, principal)
	ret0, _ := ret[0].(*dto.GetConfigurationResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateDraftConfiguration indicates an expected call of UpdateDraftConfiguration
func (mr *MockPipelineServiceMockRecorder) UpdateDraftConfiguration(params, orgName, pipelineName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraftConfiguration", reflect.TypeOf((*MockPipelineService)(nil).UpdateDraftConfiguration), params, orgName, pipelineName, principal)
}

// SaveDraftConfigurationAsNew mocks base method
func (m *MockPipelineService) SaveDraftConfigurationAsNew(params *dto.SaveDraftConfigurationAsNewRequest, orgName, pipelineName string, principal *dto.User) (*dto.GetConfigurationResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDraftConfigurationAsNew", params, orgName, pipelineName, principal)
	ret0, _ := ret[0].(*dto.GetConfigurationResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// SaveDraftConfigurationAsNew indicates an expected call of SaveDraftConfigurationAsNew
func (mr *MockPipelineServiceMockRecorder) SaveDraftConfigurationAsNew(params, orgName, pipelineName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDraftConfigurationAsNew", reflect.TypeOf((*MockPipelineService)(nil).SaveDraftConfigurationAsNew), params, orgName, pipelineName, principal)
}

// GetAllPipelines mocks base method
func (m *MockPipelineService) GetAllPipelines(orgName string) (dto.GetAllPipelinesResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPipelines", orgName)
	ret0, _ := ret[0].(dto.GetAllPipelinesResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllPipelines indicates an expected call of GetAllPipelines
func (mr *MockPipelineServiceMockRecorder) GetAllPipelines(orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPipelines", reflect.TypeOf((*MockPipelineService)(nil).GetAllPipelines), orgName)
}

// GetConfiguration mocks base method
func (m *MockPipelineService) GetConfiguration(orgName, pipelineName string, revision int64) (*dto.GetConfigurationResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", orgName, pipelineName, revision)
	ret0, _ := ret[0].(*dto.GetConfigurationResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration
func (mr *MockPipelineServiceMockRecorder) GetConfiguration(orgName, pipelineName, revision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockPipelineService)(nil).GetConfiguration), orgName, pipelineName, revision)
}

// GetDraftConfiguration mocks base method
func (m *MockPipelineService) GetDraftConfiguration(orgName, pipelineName string) (*dto.GetConfigurationResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDraftConfiguration", orgName, pipelineName)
	ret0, _ := ret[0].(*dto.GetConfigurationResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetDraftConfiguration indicates an expected call of GetDraftConfiguration
func (mr *MockPipelineServiceMockRecorder) GetDraftConfiguration(orgName, pipelineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraftConfiguration", reflect.TypeOf((*MockPipelineService)(nil).GetDraftConfiguration), orgName, pipelineName)
}

// DeployConfiguration mocks base method
func (m *MockPipelineService) DeployConfiguration(params *dto.DeployConfigurationRequest, orgName, pipelineName, envName string, user *dto.User) (*dto.GetDeploymentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployConfiguration", params, orgName, pipelineName, envName, user)
	ret0, _ := ret[0].(*dto.GetDeploymentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// DeployConfiguration indicates an expected call of DeployConfiguration
func (mr *MockPipelineServiceMockRecorder) DeployConfiguration(params, orgName, pipelineName, envName, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployConfiguration", reflect.TypeOf((*MockPipelineService)(nil).DeployConfiguration), params, orgName, pipelineName, envName, user)
}

// RemoveDeployment mocks base method
func (m *MockPipelineService) RemoveDeployment(orgName, pipelineName, envName string) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeployment", orgName, pipelineName, envName)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// RemoveDeployment indicates an expected call of RemoveDeployment
func (mr *MockPipelineServiceMockRecorder) RemoveDeployment(orgName, pipelineName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeployment", reflect.TypeOf((*MockPipelineService)(nil).RemoveDeployment), orgName, pipelineName, envName)
}

// GetDeploymentLogs mocks base method
func (m *MockPipelineService) GetDeploymentLogs(orgName, pipelineName, envName, from, to, limit string) ([]*dto.LogLine, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentLogs", orgName, pipelineName, envName, from, to, limit)
	ret0, _ := ret[0].([]*dto.LogLine)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetDeploymentLogs indicates an expected call of GetDeploymentLogs
func (mr *MockPipelineServiceMockRecorder) GetDeploymentLogs(orgName, pipelineName, envName, from, to, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentLogs", reflect.TypeOf((*MockPipelineService)(nil).GetDeploymentLogs), orgName, pipelineName, envName, from, to, limit)
}

// GetDeployment mocks base method
func (m *MockPipelineService) GetDeployment(orgName, pipelineName, envName string) (*dto.GetDeploymentResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", orgName, pipelineName, envName)
	ret0, _ := ret[0].(*dto.GetDeploymentResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment
func (mr *MockPipelineServiceMockRecorder) GetDeployment(orgName, pipelineName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockPipelineService)(nil).GetDeployment), orgName, pipelineName, envName)
}

// CreateEnvironmentVariable mocks base method
func (m *MockPipelineService) CreateEnvironmentVariable(params *dto.CreateEnvironmentVariableRequest, orgName, pipelineName, envName string, user *dto.User) (*dto.GetEnvironmentVariableResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentVariable", params, orgName, pipelineName, envName, user)
	ret0, _ := ret[0].(*dto.GetEnvironmentVariableResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreateEnvironmentVariable indicates an expected call of CreateEnvironmentVariable
func (mr *MockPipelineServiceMockRecorder) CreateEnvironmentVariable(params, orgName, pipelineName, envName, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentVariable", reflect.TypeOf((*MockPipelineService)(nil).CreateEnvironmentVariable), params, orgName, pipelineName, envName, user)
}

// GetAllEnvironmentVariables mocks base method
func (m *MockPipelineService) GetAllEnvironmentVariables(orgName, pipelineName, envName string, user *dto.User) (dto.GetAllEnvironmentVariablesResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEnvironmentVariables", orgName, pipelineName, envName, user)
	ret0, _ := ret[0].(dto.GetAllEnvironmentVariablesResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllEnvironmentVariables indicates an expected call of GetAllEnvironmentVariables
func (mr *MockPipelineServiceMockRecorder) GetAllEnvironmentVariables(orgName, pipelineName, envName, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEnvironmentVariables", reflect.TypeOf((*MockPipelineService)(nil).GetAllEnvironmentVariables), orgName, pipelineName, envName, user)
}

// DeleteEnvironmentVariable mocks base method
func (m *MockPipelineService) DeleteEnvironmentVariable(orgName, pipelineName, envName string, varID int64, user *dto.User) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentVariable", orgName, pipelineName, envName, varID, user)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// DeleteEnvironmentVariable indicates an expected call of DeleteEnvironmentVariable
func (mr *MockPipelineServiceMockRecorder) DeleteEnvironmentVariable(orgName, pipelineName, envName, varID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentVariable", reflect.TypeOf((*MockPipelineService)(nil).DeleteEnvironmentVariable), orgName, pipelineName, envName, varID, user)
}

// UpdateEnvironmentVariable mocks base method
func (m *MockPipelineService) UpdateEnvironmentVariable(params *dto.UpdateEnvironmentVariablesRequest, orgName, pipelineName, envName string, varID int64, user *dto.User) (*dto.GetEnvironmentVariableResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentVariable", params, orgName, pipelineName, envName, varID, user)
	ret0, _ := ret[0].(*dto.GetEnvironmentVariableResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateEnvironmentVariable indicates an expected call of UpdateEnvironmentVariable
func (mr *MockPipelineServiceMockRecorder) UpdateEnvironmentVariable(params, orgName, pipelineName, envName, varID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentVariable", reflect.TypeOf((*MockPipelineService)(nil).UpdateEnvironmentVariable), params, orgName, pipelineName, envName, varID, user)
}
