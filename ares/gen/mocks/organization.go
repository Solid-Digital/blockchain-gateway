// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ares/organization.go

// Package mock_ares is a generated GoMock package.
package mock_ares

import (
	dto "bitbucket.org/unchain/ares/gen/dto"
	orm "bitbucket.org/unchain/ares/gen/orm"
	apperr "bitbucket.org/unchain/ares/pkg/3p/apperr"
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrganizationService is a mock of OrganizationService interface
type MockOrganizationService struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServiceMockRecorder
}

// MockOrganizationServiceMockRecorder is the mock recorder for MockOrganizationService
type MockOrganizationServiceMockRecorder struct {
	mock *MockOrganizationService
}

// NewMockOrganizationService creates a new mock instance
func NewMockOrganizationService(ctrl *gomock.Controller) *MockOrganizationService {
	mock := &MockOrganizationService{ctrl: ctrl}
	mock.recorder = &MockOrganizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrganizationService) EXPECT() *MockOrganizationServiceMockRecorder {
	return m.recorder
}

// InviteMember mocks base method
func (m *MockOrganizationService) InviteMember(params *dto.InviteMemberRequest, orgName string) (*dto.InviteMemberResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMember", params, orgName)
	ret0, _ := ret[0].(*dto.InviteMemberResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// InviteMember indicates an expected call of InviteMember
func (mr *MockOrganizationServiceMockRecorder) InviteMember(params, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMember", reflect.TypeOf((*MockOrganizationService)(nil).InviteMember), params, orgName)
}

// InviteMemberTx mocks base method
func (m *MockOrganizationService) InviteMemberTx(ctx context.Context, tx *sql.Tx, user *orm.User, orgName string, roles map[string]bool) (*dto.GetMemberResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMemberTx", ctx, tx, user, orgName, roles)
	ret0, _ := ret[0].(*dto.GetMemberResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// InviteMemberTx indicates an expected call of InviteMemberTx
func (mr *MockOrganizationServiceMockRecorder) InviteMemberTx(ctx, tx, user, orgName, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMemberTx", reflect.TypeOf((*MockOrganizationService)(nil).InviteMemberTx), ctx, tx, user, orgName, roles)
}

// RemoveMember mocks base method
func (m *MockOrganizationService) RemoveMember(email, orgName string) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", email, orgName)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember
func (mr *MockOrganizationServiceMockRecorder) RemoveMember(email, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockOrganizationService)(nil).RemoveMember), email, orgName)
}

// SetMemberRoles mocks base method
func (m *MockOrganizationService) SetMemberRoles(params *dto.SetMemberRolesRequest, email, orgName string, u *dto.User) *apperr.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMemberRoles", params, email, orgName, u)
	ret0, _ := ret[0].(*apperr.Error)
	return ret0
}

// SetMemberRoles indicates an expected call of SetMemberRoles
func (mr *MockOrganizationServiceMockRecorder) SetMemberRoles(params, email, orgName, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMemberRoles", reflect.TypeOf((*MockOrganizationService)(nil).SetMemberRoles), params, email, orgName, u)
}

// GetMember mocks base method
func (m *MockOrganizationService) GetMember(email, orgName string, u *dto.User) (*dto.GetMemberResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", email, orgName, u)
	ret0, _ := ret[0].(*dto.GetMemberResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember
func (mr *MockOrganizationServiceMockRecorder) GetMember(email, orgName, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockOrganizationService)(nil).GetMember), email, orgName, u)
}

// GetAllMembers mocks base method
func (m *MockOrganizationService) GetAllMembers(orgName string, principal *dto.User) ([]*dto.GetMemberResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMembers", orgName, principal)
	ret0, _ := ret[0].([]*dto.GetMemberResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllMembers indicates an expected call of GetAllMembers
func (mr *MockOrganizationServiceMockRecorder) GetAllMembers(orgName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMembers", reflect.TypeOf((*MockOrganizationService)(nil).GetAllMembers), orgName, principal)
}

// CreateOrganization mocks base method
func (m *MockOrganizationService) CreateOrganization(params *dto.CreateOrganizationRequest, principal *dto.User) (*dto.GetOrganizationResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", params, principal)
	ret0, _ := ret[0].(*dto.GetOrganizationResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization
func (mr *MockOrganizationServiceMockRecorder) CreateOrganization(params, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationService)(nil).CreateOrganization), params, principal)
}

// GetAllOrganizations mocks base method
func (m *MockOrganizationService) GetAllOrganizations(principal *dto.User) ([]*dto.GetOrganizationResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrganizations", principal)
	ret0, _ := ret[0].([]*dto.GetOrganizationResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetAllOrganizations indicates an expected call of GetAllOrganizations
func (mr *MockOrganizationServiceMockRecorder) GetAllOrganizations(principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrganizations", reflect.TypeOf((*MockOrganizationService)(nil).GetAllOrganizations), principal)
}

// GetOrganization mocks base method
func (m *MockOrganizationService) GetOrganization(orgName string, principal *dto.User) (*dto.GetOrganizationResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", orgName, principal)
	ret0, _ := ret[0].(*dto.GetOrganizationResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization
func (mr *MockOrganizationServiceMockRecorder) GetOrganization(orgName, principal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockOrganizationService)(nil).GetOrganization), orgName, principal)
}

// UpdateOrganization mocks base method
func (m *MockOrganizationService) UpdateOrganization(params *dto.UpdateOrganizationRequest, orgName string) (*dto.GetOrganizationResponse, *apperr.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", params, orgName)
	ret0, _ := ret[0].(*dto.GetOrganizationResponse)
	ret1, _ := ret[1].(*apperr.Error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization
func (mr *MockOrganizationServiceMockRecorder) UpdateOrganization(params, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationService)(nil).UpdateOrganization), params, orgName)
}
