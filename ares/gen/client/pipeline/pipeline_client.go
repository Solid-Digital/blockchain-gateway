// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new pipeline API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pipeline API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateEnvironmentVariable creates a new variable for a pipeline environment
*/
func (a *Client) CreateEnvironmentVariable(params *CreateEnvironmentVariableParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEnvironmentVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEnvironmentVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateEnvironmentVariable",
		Method:             "POST",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/vars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEnvironmentVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEnvironmentVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEnvironmentVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePipeline creates a new pipeline
*/
func (a *Client) CreatePipeline(params *CreatePipelineParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePipeline",
		Method:             "POST",
		PathPattern:        "/orgs/{orgName}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEnvironmentVariable deletes a variable for a pipeline environment
*/
func (a *Client) DeleteEnvironmentVariable(params *DeleteEnvironmentVariableParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEnvironmentVariableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEnvironmentVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEnvironmentVariable",
		Method:             "DELETE",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/vars/{varID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEnvironmentVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEnvironmentVariableNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEnvironmentVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePipeline deletes pipeline
*/
func (a *Client) DeletePipeline(params *DeletePipelineParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePipelineNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeletePipeline",
		Method:             "DELETE",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePipelineNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeployConfiguration deploys configuration to environment

Deploy a pipeline configuration to a specific environment within the pipeline context
*/
func (a *Client) DeployConfiguration(params *DeployConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*DeployConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeployConfiguration",
		Method:             "PUT",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeployConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeployConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeployConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllEnvironmentVariables gets the variables for a pipeline environment
*/
func (a *Client) GetAllEnvironmentVariables(params *GetAllEnvironmentVariablesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllEnvironmentVariablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEnvironmentVariablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllEnvironmentVariables",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/vars",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEnvironmentVariablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEnvironmentVariablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllEnvironmentVariables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllPipelines gets all pipelines

Get all pipelines for the organization
*/
func (a *Client) GetAllPipelines(params *GetAllPipelinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllPipelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPipelinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllPipelines",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPipelinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPipelinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllPipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfiguration gets configuration
*/
func (a *Client) GetConfiguration(params *GetConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetConfiguration",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/configurations/{revision}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeployment gets the pipeline deployment for an environment
*/
func (a *Client) GetDeployment(params *GetDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDeployment",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDeploymentLogs logs for pipeline deployment
*/
func (a *Client) GetDeploymentLogs(params *GetDeploymentLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeploymentLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploymentLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDeploymentLogs",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploymentLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploymentLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeploymentLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDraftConfiguration gets draft configuration
*/
func (a *Client) GetDraftConfiguration(params *GetDraftConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*GetDraftConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDraftConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDraftConfiguration",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/configurations/draft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDraftConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDraftConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDraftConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipeline gets pipeline detail

Get the pipeline with all its different configurations and deployments.
*/
func (a *Client) GetPipeline(params *GetPipelineParams, authInfo runtime.ClientAuthInfoWriter) (*GetPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPipeline",
		Method:             "GET",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveDeployment deletes deployment to environment
*/
func (a *Client) RemoveDeployment(params *RemoveDeploymentParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveDeploymentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveDeployment",
		Method:             "DELETE",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/deployment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveDeploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveDeploymentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveDraftConfigurationAsNew saves draft as new configuration

A new configuration is created by auto-incrementing the latest version by 1.
*/
func (a *Client) SaveDraftConfigurationAsNew(params *SaveDraftConfigurationAsNewParams, authInfo runtime.ClientAuthInfoWriter) (*SaveDraftConfigurationAsNewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveDraftConfigurationAsNewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SaveDraftConfigurationAsNew",
		Method:             "POST",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveDraftConfigurationAsNewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveDraftConfigurationAsNewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SaveDraftConfigurationAsNew: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDraftConfiguration updates draft configuration

The latest configuration version is not stored as a numbered version yet and is the only configuration that can be updated.
*/
func (a *Client) UpdateDraftConfiguration(params *UpdateDraftConfigurationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateDraftConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDraftConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateDraftConfiguration",
		Method:             "PUT",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/configurations/draft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDraftConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDraftConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDraftConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEnvironmentVariable updates a variable for a pipeline environment
*/
func (a *Client) UpdateEnvironmentVariable(params *UpdateEnvironmentVariableParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEnvironmentVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnvironmentVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateEnvironmentVariable",
		Method:             "PUT",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}/environments/{envName}/vars/{varID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEnvironmentVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEnvironmentVariableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEnvironmentVariable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePipeline updates pipeline
*/
func (a *Client) UpdatePipeline(params *UpdatePipelineParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePipelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdatePipeline",
		Method:             "PUT",
		PathPattern:        "/orgs/{orgName}/pipelines/{pipelineName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
