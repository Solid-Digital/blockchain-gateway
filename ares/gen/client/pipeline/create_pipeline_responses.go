// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// CreatePipelineReader is a Reader for the CreatePipeline structure.
type CreatePipelineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePipelineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreatePipelineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewCreatePipelineConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreatePipelineInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreatePipelineOK creates a CreatePipelineOK with default headers values
func NewCreatePipelineOK() *CreatePipelineOK {
	return &CreatePipelineOK{}
}

/*CreatePipelineOK handles this case with default header values.

Status 200
*/
type CreatePipelineOK struct {
	Payload *dto.GetPipelineResponse
}

func (o *CreatePipelineOK) Error() string {
	return fmt.Sprintf("[POST /orgs/{orgName}/pipelines][%d] createPipelineOK  %+v", 200, o.Payload)
}

func (o *CreatePipelineOK) GetPayload() *dto.GetPipelineResponse {
	return o.Payload
}

func (o *CreatePipelineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dto.GetPipelineResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePipelineConflict creates a CreatePipelineConflict with default headers values
func NewCreatePipelineConflict() *CreatePipelineConflict {
	return &CreatePipelineConflict{}
}

/*CreatePipelineConflict handles this case with default header values.

Pipeline name already exists
*/
type CreatePipelineConflict struct {
	Payload interface{}
}

func (o *CreatePipelineConflict) Error() string {
	return fmt.Sprintf("[POST /orgs/{orgName}/pipelines][%d] createPipelineConflict  %+v", 409, o.Payload)
}

func (o *CreatePipelineConflict) GetPayload() interface{} {
	return o.Payload
}

func (o *CreatePipelineConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePipelineInternalServerError creates a CreatePipelineInternalServerError with default headers values
func NewCreatePipelineInternalServerError() *CreatePipelineInternalServerError {
	return &CreatePipelineInternalServerError{}
}

/*CreatePipelineInternalServerError handles this case with default header values.

Internal server error
*/
type CreatePipelineInternalServerError struct {
	Payload interface{}
}

func (o *CreatePipelineInternalServerError) Error() string {
	return fmt.Sprintf("[POST /orgs/{orgName}/pipelines][%d] createPipelineInternalServerError  %+v", 500, o.Payload)
}

func (o *CreatePipelineInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *CreatePipelineInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
