// Code generated by go-swagger; DO NOT EDIT.

package pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeploymentLogsParams creates a new GetDeploymentLogsParams object
// with the default values initialized.
func NewGetDeploymentLogsParams() *GetDeploymentLogsParams {
	var ()
	return &GetDeploymentLogsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeploymentLogsParamsWithTimeout creates a new GetDeploymentLogsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeploymentLogsParamsWithTimeout(timeout time.Duration) *GetDeploymentLogsParams {
	var ()
	return &GetDeploymentLogsParams{

		timeout: timeout,
	}
}

// NewGetDeploymentLogsParamsWithContext creates a new GetDeploymentLogsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeploymentLogsParamsWithContext(ctx context.Context) *GetDeploymentLogsParams {
	var ()
	return &GetDeploymentLogsParams{

		Context: ctx,
	}
}

// NewGetDeploymentLogsParamsWithHTTPClient creates a new GetDeploymentLogsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeploymentLogsParamsWithHTTPClient(client *http.Client) *GetDeploymentLogsParams {
	var ()
	return &GetDeploymentLogsParams{
		HTTPClient: client,
	}
}

/*GetDeploymentLogsParams contains all the parameters to send to the API endpoint
for the get deployment logs operation typically these are written to a http.Request
*/
type GetDeploymentLogsParams struct {

	/*EnvName*/
	EnvName string
	/*From*/
	From *string
	/*Limit*/
	Limit *string
	/*OrgName*/
	OrgName string
	/*PipelineName*/
	PipelineName string
	/*To*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get deployment logs params
func (o *GetDeploymentLogsParams) WithTimeout(timeout time.Duration) *GetDeploymentLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deployment logs params
func (o *GetDeploymentLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deployment logs params
func (o *GetDeploymentLogsParams) WithContext(ctx context.Context) *GetDeploymentLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deployment logs params
func (o *GetDeploymentLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deployment logs params
func (o *GetDeploymentLogsParams) WithHTTPClient(client *http.Client) *GetDeploymentLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deployment logs params
func (o *GetDeploymentLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvName adds the envName to the get deployment logs params
func (o *GetDeploymentLogsParams) WithEnvName(envName string) *GetDeploymentLogsParams {
	o.SetEnvName(envName)
	return o
}

// SetEnvName adds the envName to the get deployment logs params
func (o *GetDeploymentLogsParams) SetEnvName(envName string) {
	o.EnvName = envName
}

// WithFrom adds the from to the get deployment logs params
func (o *GetDeploymentLogsParams) WithFrom(from *string) *GetDeploymentLogsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get deployment logs params
func (o *GetDeploymentLogsParams) SetFrom(from *string) {
	o.From = from
}

// WithLimit adds the limit to the get deployment logs params
func (o *GetDeploymentLogsParams) WithLimit(limit *string) *GetDeploymentLogsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get deployment logs params
func (o *GetDeploymentLogsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOrgName adds the orgName to the get deployment logs params
func (o *GetDeploymentLogsParams) WithOrgName(orgName string) *GetDeploymentLogsParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the get deployment logs params
func (o *GetDeploymentLogsParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithPipelineName adds the pipelineName to the get deployment logs params
func (o *GetDeploymentLogsParams) WithPipelineName(pipelineName string) *GetDeploymentLogsParams {
	o.SetPipelineName(pipelineName)
	return o
}

// SetPipelineName adds the pipelineName to the get deployment logs params
func (o *GetDeploymentLogsParams) SetPipelineName(pipelineName string) {
	o.PipelineName = pipelineName
}

// WithTo adds the to to the get deployment logs params
func (o *GetDeploymentLogsParams) WithTo(to *string) *GetDeploymentLogsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get deployment logs params
func (o *GetDeploymentLogsParams) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeploymentLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param envName
	if err := r.SetPathParam("envName", o.EnvName); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom string
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	// path param pipelineName
	if err := r.SetPathParam("pipelineName", o.PipelineName); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo string
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
