// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAllActionsParams creates a new GetAllActionsParams object
// with the default values initialized.
func NewGetAllActionsParams() *GetAllActionsParams {
	var ()
	return &GetAllActionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllActionsParamsWithTimeout creates a new GetAllActionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllActionsParamsWithTimeout(timeout time.Duration) *GetAllActionsParams {
	var ()
	return &GetAllActionsParams{

		timeout: timeout,
	}
}

// NewGetAllActionsParamsWithContext creates a new GetAllActionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllActionsParamsWithContext(ctx context.Context) *GetAllActionsParams {
	var ()
	return &GetAllActionsParams{

		Context: ctx,
	}
}

// NewGetAllActionsParamsWithHTTPClient creates a new GetAllActionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllActionsParamsWithHTTPClient(client *http.Client) *GetAllActionsParams {
	var ()
	return &GetAllActionsParams{
		HTTPClient: client,
	}
}

/*GetAllActionsParams contains all the parameters to send to the API endpoint
for the get all actions operation typically these are written to a http.Request
*/
type GetAllActionsParams struct {

	/*Available*/
	Available *bool
	/*OrgName*/
	OrgName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all actions params
func (o *GetAllActionsParams) WithTimeout(timeout time.Duration) *GetAllActionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all actions params
func (o *GetAllActionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all actions params
func (o *GetAllActionsParams) WithContext(ctx context.Context) *GetAllActionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all actions params
func (o *GetAllActionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all actions params
func (o *GetAllActionsParams) WithHTTPClient(client *http.Client) *GetAllActionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all actions params
func (o *GetAllActionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAvailable adds the available to the get all actions params
func (o *GetAllActionsParams) WithAvailable(available *bool) *GetAllActionsParams {
	o.SetAvailable(available)
	return o
}

// SetAvailable adds the available to the get all actions params
func (o *GetAllActionsParams) SetAvailable(available *bool) {
	o.Available = available
}

// WithOrgName adds the orgName to the get all actions params
func (o *GetAllActionsParams) WithOrgName(orgName string) *GetAllActionsParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the get all actions params
func (o *GetAllActionsParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllActionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Available != nil {

		// query param available
		var qrAvailable bool
		if o.Available != nil {
			qrAvailable = *o.Available
		}
		qAvailable := swag.FormatBool(qrAvailable)
		if qAvailable != "" {
			if err := r.SetQueryParam("available", qAvailable); err != nil {
				return err
			}
		}

	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
