// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// UpdateTriggerReader is a Reader for the UpdateTrigger structure.
type UpdateTriggerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTriggerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTriggerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewUpdateTriggerConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateTriggerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateTriggerOK creates a UpdateTriggerOK with default headers values
func NewUpdateTriggerOK() *UpdateTriggerOK {
	return &UpdateTriggerOK{}
}

/*UpdateTriggerOK handles this case with default header values.

Status 200
*/
type UpdateTriggerOK struct {
	Payload *dto.GetComponentResponse
}

func (o *UpdateTriggerOK) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/triggers/{name}][%d] updateTriggerOK  %+v", 200, o.Payload)
}

func (o *UpdateTriggerOK) GetPayload() *dto.GetComponentResponse {
	return o.Payload
}

func (o *UpdateTriggerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dto.GetComponentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTriggerConflict creates a UpdateTriggerConflict with default headers values
func NewUpdateTriggerConflict() *UpdateTriggerConflict {
	return &UpdateTriggerConflict{}
}

/*UpdateTriggerConflict handles this case with default header values.

Conflict
*/
type UpdateTriggerConflict struct {
	Payload *dto.ErrorResponse
}

func (o *UpdateTriggerConflict) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/triggers/{name}][%d] updateTriggerConflict  %+v", 409, o.Payload)
}

func (o *UpdateTriggerConflict) GetPayload() *dto.ErrorResponse {
	return o.Payload
}

func (o *UpdateTriggerConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dto.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTriggerInternalServerError creates a UpdateTriggerInternalServerError with default headers values
func NewUpdateTriggerInternalServerError() *UpdateTriggerInternalServerError {
	return &UpdateTriggerInternalServerError{}
}

/*UpdateTriggerInternalServerError handles this case with default header values.

Internal server error
*/
type UpdateTriggerInternalServerError struct {
	Payload *dto.ErrorResponse
}

func (o *UpdateTriggerInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}/triggers/{name}][%d] updateTriggerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateTriggerInternalServerError) GetPayload() *dto.ErrorResponse {
	return o.Payload
}

func (o *UpdateTriggerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dto.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
