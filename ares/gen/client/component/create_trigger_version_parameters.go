// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateTriggerVersionParams creates a new CreateTriggerVersionParams object
// with the default values initialized.
func NewCreateTriggerVersionParams() *CreateTriggerVersionParams {
	var ()
	return &CreateTriggerVersionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateTriggerVersionParamsWithTimeout creates a new CreateTriggerVersionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateTriggerVersionParamsWithTimeout(timeout time.Duration) *CreateTriggerVersionParams {
	var ()
	return &CreateTriggerVersionParams{

		timeout: timeout,
	}
}

// NewCreateTriggerVersionParamsWithContext creates a new CreateTriggerVersionParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateTriggerVersionParamsWithContext(ctx context.Context) *CreateTriggerVersionParams {
	var ()
	return &CreateTriggerVersionParams{

		Context: ctx,
	}
}

// NewCreateTriggerVersionParamsWithHTTPClient creates a new CreateTriggerVersionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateTriggerVersionParamsWithHTTPClient(client *http.Client) *CreateTriggerVersionParams {
	var ()
	return &CreateTriggerVersionParams{
		HTTPClient: client,
	}
}

/*CreateTriggerVersionParams contains all the parameters to send to the API endpoint
for the create trigger version operation typically these are written to a http.Request
*/
type CreateTriggerVersionParams struct {

	/*Description
	  short description of this trigger version

	*/
	Description *string
	/*ExampleConfig
	  default config for this trigger version

	*/
	ExampleConfig *string
	/*InputSchema
	  json encoded string containing the input specification of the trigger

	*/
	InputSchema *string
	/*Name*/
	Name string
	/*OrgName*/
	OrgName string
	/*OutputSchema
	  json encoded string containing the output specification of the trigger

	*/
	OutputSchema *string
	/*Public
	  describes whether or not this trigger version is public

	*/
	Public *bool
	/*Readme
	  readme for this trigger version

	*/
	Readme *string
	/*TriggerFile
	  the trigger version file

	*/
	TriggerFile runtime.NamedReadCloser
	/*Version
	  version string for this trigger version

	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create trigger version params
func (o *CreateTriggerVersionParams) WithTimeout(timeout time.Duration) *CreateTriggerVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create trigger version params
func (o *CreateTriggerVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create trigger version params
func (o *CreateTriggerVersionParams) WithContext(ctx context.Context) *CreateTriggerVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create trigger version params
func (o *CreateTriggerVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create trigger version params
func (o *CreateTriggerVersionParams) WithHTTPClient(client *http.Client) *CreateTriggerVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create trigger version params
func (o *CreateTriggerVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the create trigger version params
func (o *CreateTriggerVersionParams) WithDescription(description *string) *CreateTriggerVersionParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the create trigger version params
func (o *CreateTriggerVersionParams) SetDescription(description *string) {
	o.Description = description
}

// WithExampleConfig adds the exampleConfig to the create trigger version params
func (o *CreateTriggerVersionParams) WithExampleConfig(exampleConfig *string) *CreateTriggerVersionParams {
	o.SetExampleConfig(exampleConfig)
	return o
}

// SetExampleConfig adds the exampleConfig to the create trigger version params
func (o *CreateTriggerVersionParams) SetExampleConfig(exampleConfig *string) {
	o.ExampleConfig = exampleConfig
}

// WithInputSchema adds the inputSchema to the create trigger version params
func (o *CreateTriggerVersionParams) WithInputSchema(inputSchema *string) *CreateTriggerVersionParams {
	o.SetInputSchema(inputSchema)
	return o
}

// SetInputSchema adds the inputSchema to the create trigger version params
func (o *CreateTriggerVersionParams) SetInputSchema(inputSchema *string) {
	o.InputSchema = inputSchema
}

// WithName adds the name to the create trigger version params
func (o *CreateTriggerVersionParams) WithName(name string) *CreateTriggerVersionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the create trigger version params
func (o *CreateTriggerVersionParams) SetName(name string) {
	o.Name = name
}

// WithOrgName adds the orgName to the create trigger version params
func (o *CreateTriggerVersionParams) WithOrgName(orgName string) *CreateTriggerVersionParams {
	o.SetOrgName(orgName)
	return o
}

// SetOrgName adds the orgName to the create trigger version params
func (o *CreateTriggerVersionParams) SetOrgName(orgName string) {
	o.OrgName = orgName
}

// WithOutputSchema adds the outputSchema to the create trigger version params
func (o *CreateTriggerVersionParams) WithOutputSchema(outputSchema *string) *CreateTriggerVersionParams {
	o.SetOutputSchema(outputSchema)
	return o
}

// SetOutputSchema adds the outputSchema to the create trigger version params
func (o *CreateTriggerVersionParams) SetOutputSchema(outputSchema *string) {
	o.OutputSchema = outputSchema
}

// WithPublic adds the public to the create trigger version params
func (o *CreateTriggerVersionParams) WithPublic(public *bool) *CreateTriggerVersionParams {
	o.SetPublic(public)
	return o
}

// SetPublic adds the public to the create trigger version params
func (o *CreateTriggerVersionParams) SetPublic(public *bool) {
	o.Public = public
}

// WithReadme adds the readme to the create trigger version params
func (o *CreateTriggerVersionParams) WithReadme(readme *string) *CreateTriggerVersionParams {
	o.SetReadme(readme)
	return o
}

// SetReadme adds the readme to the create trigger version params
func (o *CreateTriggerVersionParams) SetReadme(readme *string) {
	o.Readme = readme
}

// WithTriggerFile adds the triggerFile to the create trigger version params
func (o *CreateTriggerVersionParams) WithTriggerFile(triggerFile runtime.NamedReadCloser) *CreateTriggerVersionParams {
	o.SetTriggerFile(triggerFile)
	return o
}

// SetTriggerFile adds the triggerFile to the create trigger version params
func (o *CreateTriggerVersionParams) SetTriggerFile(triggerFile runtime.NamedReadCloser) {
	o.TriggerFile = triggerFile
}

// WithVersion adds the version to the create trigger version params
func (o *CreateTriggerVersionParams) WithVersion(version *string) *CreateTriggerVersionParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the create trigger version params
func (o *CreateTriggerVersionParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *CreateTriggerVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}

	}

	if o.ExampleConfig != nil {

		// form param exampleConfig
		var frExampleConfig string
		if o.ExampleConfig != nil {
			frExampleConfig = *o.ExampleConfig
		}
		fExampleConfig := frExampleConfig
		if fExampleConfig != "" {
			if err := r.SetFormParam("exampleConfig", fExampleConfig); err != nil {
				return err
			}
		}

	}

	if o.InputSchema != nil {

		// form param inputSchema
		var frInputSchema string
		if o.InputSchema != nil {
			frInputSchema = *o.InputSchema
		}
		fInputSchema := frInputSchema
		if fInputSchema != "" {
			if err := r.SetFormParam("inputSchema", fInputSchema); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param orgName
	if err := r.SetPathParam("orgName", o.OrgName); err != nil {
		return err
	}

	if o.OutputSchema != nil {

		// form param outputSchema
		var frOutputSchema string
		if o.OutputSchema != nil {
			frOutputSchema = *o.OutputSchema
		}
		fOutputSchema := frOutputSchema
		if fOutputSchema != "" {
			if err := r.SetFormParam("outputSchema", fOutputSchema); err != nil {
				return err
			}
		}

	}

	if o.Public != nil {

		// form param public
		var frPublic bool
		if o.Public != nil {
			frPublic = *o.Public
		}
		fPublic := swag.FormatBool(frPublic)
		if fPublic != "" {
			if err := r.SetFormParam("public", fPublic); err != nil {
				return err
			}
		}

	}

	if o.Readme != nil {

		// form param readme
		var frReadme string
		if o.Readme != nil {
			frReadme = *o.Readme
		}
		fReadme := frReadme
		if fReadme != "" {
			if err := r.SetFormParam("readme", fReadme); err != nil {
				return err
			}
		}

	}

	if o.TriggerFile != nil {

		if o.TriggerFile != nil {

			// form file param triggerFile
			if err := r.SetFileParam("triggerFile", o.TriggerFile); err != nil {
				return err
			}

		}

	}

	if o.Version != nil {

		// form param version
		var frVersion string
		if o.Version != nil {
			frVersion = *o.Version
		}
		fVersion := frVersion
		if fVersion != "" {
			if err := r.SetFormParam("version", fVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
