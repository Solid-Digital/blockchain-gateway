// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	dto "bitbucket.org/unchain/ares/gen/dto"
)

// UpdateOrganizationReader is a Reader for the UpdateOrganization structure.
type UpdateOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrganizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateOrganizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateOrganizationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateOrganizationOK creates a UpdateOrganizationOK with default headers values
func NewUpdateOrganizationOK() *UpdateOrganizationOK {
	return &UpdateOrganizationOK{}
}

/*UpdateOrganizationOK handles this case with default header values.

Status 200
*/
type UpdateOrganizationOK struct {
	Payload *dto.GetOrganizationResponse
}

func (o *UpdateOrganizationOK) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}][%d] updateOrganizationOK  %+v", 200, o.Payload)
}

func (o *UpdateOrganizationOK) GetPayload() *dto.GetOrganizationResponse {
	return o.Payload
}

func (o *UpdateOrganizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(dto.GetOrganizationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationUnauthorized creates a UpdateOrganizationUnauthorized with default headers values
func NewUpdateOrganizationUnauthorized() *UpdateOrganizationUnauthorized {
	return &UpdateOrganizationUnauthorized{}
}

/*UpdateOrganizationUnauthorized handles this case with default header values.

Permission denied
*/
type UpdateOrganizationUnauthorized struct {
	Payload interface{}
}

func (o *UpdateOrganizationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}][%d] updateOrganizationUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateOrganizationUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateOrganizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrganizationInternalServerError creates a UpdateOrganizationInternalServerError with default headers values
func NewUpdateOrganizationInternalServerError() *UpdateOrganizationInternalServerError {
	return &UpdateOrganizationInternalServerError{}
}

/*UpdateOrganizationInternalServerError handles this case with default header values.

Internal server error
*/
type UpdateOrganizationInternalServerError struct {
	Payload interface{}
}

func (o *UpdateOrganizationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /orgs/{orgName}][%d] updateOrganizationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateOrganizationInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateOrganizationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
