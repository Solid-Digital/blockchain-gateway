apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: ui
    app.kubernetes.io/part-of: prometheus
  name: grafana
  namespace: kustomize-managed
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: grafana
  name: grafana
  namespace: kustomize-managed
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  strategy:
    type: RollingUpdate
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: ui
        app.kubernetes.io/part-of: prometheus
    spec:
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      affinity:
        podAntiAffinity: # Don't schedule pods on the same node if posssible.
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: grafana
              topologyKey: kubernetes.io/hostname
      containers:
        - name: grafana
          envFrom:
          - secretRef:
              name: grafana-postgres
          - secretRef:
              name: grafana
          image: grafana/grafana:7.1.5
          imagePullPolicy: IfNotPresent
          args:
            - --config=/etc/grafana/grafana.ini
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            timeoutSeconds: 5
          resources:
            requests:
              memory: "256Mi"
              cpu: "0.25"
            limits:
              memory: "512Mi"
              cpu: "0.5"
          volumeMounts:
            - name: config-volume
              mountPath: /etc/grafana
            - name: datasources-volume
              mountPath: /etc/grafana/provisioning/datasources/
            - name: dashboards-config-volume
              mountPath: /etc/grafana/provisioning/dashboards 
            - name: dashboards-volume
              mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: config-volume
          configMap:
            name: grafana-config
        - name: datasources-volume
          configMap:
            name: grafana-datasources
        - name: dashboards-config-volume
          configMap:
            name: grafana-dashboards-config
        - name: dashboards-volume
          configMap:
            name: grafana-dashboards
