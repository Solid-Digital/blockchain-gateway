service:
  # Set the way how to expose the service. Set the type as "Ingress",
  # "ClusterIP", "NodePort" or "LoadBalancer" and fill the information
  # in the corresponding section
  type: ClusterIP
  tls:
    existingSecret: "registry.unchain.io"
    
ingress:
  enabled: true
  hosts:
    core: registry.unchain.io
    notary: notary.registry.unchain.io
  # set to the type of ingress controller if it has specific requirements.
  # leave as `default` for most ingress controllers.
  # set to `gce` if using the GCE ingress controller
  # set to `ncp` if using the NCP (NSX-T Container Plugin) ingress controller
  controller: default
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

# The external URL for Harbor core service. It is used to
# 1) populate the docker/helm commands showed on portal
# 2) populate the token service URL returned to docker/notary client
#
# Format: protocol://domain[:port]. Usually:
# 1) if "service.type" is "ingress", the "domain" should be
# the value of "service.ingress.hosts.core"
# 2) if "service.type" is "clusterIP", the "domain" should be
# the value of "service.clusterIP.name"
# 3) if "service.type" is "nodePort", the "domain" should be
# the IP address of k8s node
#
# If Harbor is deployed behind the proxy, set it as the URL of proxy
externalURL: https://registry.unchain.io

# The persistence is enabled by default and a default StorageClass
# is needed in the k8s cluster to provision volumes dynamicly.
# Specify another StorageClass in the "storageClass" or set "existingClaim"
# if you have already existing persistent volumes to use
#
# For storing images and charts, you can also use "azure", "gcs", "s3",
# "swift" or "oss". Set it in the "imageChartStorage" section
persistence:
  # Define which storage backend is used for registry and chartmuseum to store
  # images and charts. Refer to
  # https://github.com/docker/distribution/blob/master/docs/configuration.md#storage
  # for the detail.
  imageChartStorage:
    type: s3
    s3:
      bucket: harbor
      regionendpoint: ams3.digitaloceanspaces.com
      encrypt: false
      secure: true
      v4auth: false
      chunksize: "5242880"
      rootdirectory: /objects

## Option to force users to specify passwords (core.secret, harborAdminPassword, and secretKey). That is required for 'helm upgrade' to work properly.
## If it is not forced, random values will be generated.
##
forcePassword: true

core:
  # Fill the name of a kubernetes secret if you want to use your own
  # TLS certificate and private key for token encryption/decryption.
  # The secret must contain keys named:
  # "tls.crt" - the certificate
  # "tls.key" - the private key
  # The default key pair will be used if it isn't set
  secretName: "registry.unchain.io"
  ## Configure extra options for liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
  ##
  livenessProbe:
    enabled: false
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: false
    initialDelaySeconds: 300
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

clair:
  enabled: false

notary:
  enabled: false
