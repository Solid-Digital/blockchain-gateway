// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stub.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stub_57997c212aadf793, []int{0}
}
func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (dst *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(dst, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LogResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stub_57997c212aadf793, []int{1}
}
func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResponse.Unmarshal(m, b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
}
func (dst *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(dst, src)
}
func (m *LogResponse) XXX_Size() int {
	return xxx_messageInfo_LogResponse.Size(m)
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LogRequest)(nil), "proto.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "proto.LogResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StubHelperClient is the client API for StubHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StubHelperClient interface {
	Printf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	Fatalf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	Panicf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	Debugf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	Warnf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	Errorf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type stubHelperClient struct {
	cc *grpc.ClientConn
}

func NewStubHelperClient(cc *grpc.ClientConn) StubHelperClient {
	return &stubHelperClient{cc}
}

func (c *stubHelperClient) Printf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/proto.StubHelper/Printf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stubHelperClient) Fatalf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/proto.StubHelper/Fatalf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stubHelperClient) Panicf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/proto.StubHelper/Panicf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stubHelperClient) Debugf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/proto.StubHelper/Debugf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stubHelperClient) Warnf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/proto.StubHelper/Warnf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stubHelperClient) Errorf(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/proto.StubHelper/Errorf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StubHelperServer is the server API for StubHelper service.
type StubHelperServer interface {
	Printf(context.Context, *LogRequest) (*LogResponse, error)
	Fatalf(context.Context, *LogRequest) (*LogResponse, error)
	Panicf(context.Context, *LogRequest) (*LogResponse, error)
	Debugf(context.Context, *LogRequest) (*LogResponse, error)
	Warnf(context.Context, *LogRequest) (*LogResponse, error)
	Errorf(context.Context, *LogRequest) (*LogResponse, error)
}

func RegisterStubHelperServer(s *grpc.Server, srv StubHelperServer) {
	s.RegisterService(&_StubHelper_serviceDesc, srv)
}

func _StubHelper_Printf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StubHelperServer).Printf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StubHelper/Printf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StubHelperServer).Printf(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StubHelper_Fatalf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StubHelperServer).Fatalf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StubHelper/Fatalf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StubHelperServer).Fatalf(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StubHelper_Panicf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StubHelperServer).Panicf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StubHelper/Panicf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StubHelperServer).Panicf(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StubHelper_Debugf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StubHelperServer).Debugf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StubHelper/Debugf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StubHelperServer).Debugf(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StubHelper_Warnf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StubHelperServer).Warnf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StubHelper/Warnf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StubHelperServer).Warnf(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StubHelper_Errorf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StubHelperServer).Errorf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StubHelper/Errorf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StubHelperServer).Errorf(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StubHelper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StubHelper",
	HandlerType: (*StubHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Printf",
			Handler:    _StubHelper_Printf_Handler,
		},
		{
			MethodName: "Fatalf",
			Handler:    _StubHelper_Fatalf_Handler,
		},
		{
			MethodName: "Panicf",
			Handler:    _StubHelper_Panicf_Handler,
		},
		{
			MethodName: "Debugf",
			Handler:    _StubHelper_Debugf_Handler,
		},
		{
			MethodName: "Warnf",
			Handler:    _StubHelper_Warnf_Handler,
		},
		{
			MethodName: "Errorf",
			Handler:    _StubHelper_Errorf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stub.proto",
}

func init() { proto.RegisterFile("stub.proto", fileDescriptor_stub_57997c212aadf793) }

var fileDescriptor_stub_57997c212aadf793 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2e, 0x29, 0x4d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x6a, 0x5c, 0x5c, 0x3e, 0xf9,
	0xe9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5,
	0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x12, 0x2f, 0x17, 0x37,
	0x58, 0x5d, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0xd1, 0x46, 0x26, 0x2e, 0xae, 0xe0, 0x92, 0xd2,
	0x24, 0x8f, 0xd4, 0x9c, 0x82, 0xd4, 0x22, 0x21, 0x7d, 0x2e, 0xb6, 0x80, 0xa2, 0xcc, 0xbc, 0x92,
	0x34, 0x21, 0x41, 0x88, 0xf1, 0x7a, 0x08, 0x43, 0xa5, 0x84, 0x90, 0x85, 0x20, 0xfa, 0x41, 0x1a,
	0xdc, 0x12, 0x4b, 0x12, 0x73, 0x48, 0xd1, 0x10, 0x90, 0x98, 0x97, 0x99, 0x4c, 0x8a, 0x06, 0x97,
	0xd4, 0xa4, 0xd2, 0x74, 0xa2, 0x35, 0xe8, 0x71, 0xb1, 0x86, 0x27, 0x16, 0xe5, 0x91, 0x62, 0x81,
	0x6b, 0x51, 0x51, 0x7e, 0x11, 0xb1, 0x1a, 0x92, 0xd8, 0xc0, 0x42, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb8, 0x7d, 0x05, 0x23, 0x86, 0x01, 0x00, 0x00,
}
