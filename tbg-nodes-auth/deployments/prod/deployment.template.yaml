apiVersion: apps/v1
kind: Deployment
metadata:
  name: tbg-nodes-auth-prod
  namespace: tbg-nodes-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tbg-nodes-auth-prod
  template:
    metadata:
      labels:
        app: tbg-nodes-auth-prod
      annotations:
        updated-at: "{{date}}"
        version: "{{tag}}"
    spec:
      volumes:
        - name: tbg-nodes-auth-prod-config
          secret:
            secretName: tbg-nodes-auth-prod-config
            items:
              - key: config.toml
                path: config.toml
      containers:
        - name: tbg-nodes-auth-prod
          image: registry.unchain.io/unchain/tbg-nodes-auth:{{tag}}
          command:
            - /app/tbg-nodes-auth
          args:
            - --cfg=config/config.toml
          volumeMounts:
            - mountPath: /app/config
              name: tbg-nodes-auth-prod-config
      imagePullSecrets:
        - name: registry-unchain-io
---
apiVersion: v1
kind: Service
metadata:
  name: tbg-nodes-auth-prod
  labels:
    app: tbg-nodes-auth-prod
  namespace: tbg-nodes-prod
spec:
  type: ClusterIP
  selector:
    app: tbg-nodes-auth-prod
  ports:
    - port: 8080
      targetPort: 8080

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: tbg-nodes-prod
  name: tbg-nodes-auth-prod
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/proxy-body-size: 200m
spec:
  tls:
    - secretName: "tbg-nodes-auth.prod.dgo.unchain.io"
      hosts:
        - "tbg-nodes-auth.prod.dgo.unchain.io"
  rules:
    - host: "tbg-nodes-auth.prod.dgo.unchain.io"
      http:
        paths:
          - path: "/?(.*)"
            backend:
              serviceName: tbg-nodes-auth-prod
              servicePort: 8080
