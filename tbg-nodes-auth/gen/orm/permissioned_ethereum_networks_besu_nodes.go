// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PermissionedEthereumNetworksBesuNode is an object representing the database table.
type PermissionedEthereumNetworksBesuNode struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	PublicKey  null.String `boil:"public_key" json:"publicKey,omitempty" toml:"publicKey" yaml:"publicKey,omitempty"`
	PrivateKey null.String `boil:"private_key" json:"privateKey,omitempty" toml:"privateKey" yaml:"privateKey,omitempty"`
	NodeType   null.String `boil:"node_type" json:"nodeType,omitempty" toml:"nodeType" yaml:"nodeType,omitempty"`
	Config     null.String `boil:"config" json:"config,omitempty" toml:"config" yaml:"config,omitempty"`
	NetworkID  null.Int64  `boil:"network_id" json:"networkID,omitempty" toml:"networkID" yaml:"networkID,omitempty"`
	UUID       string      `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	ManagedBy  null.String `boil:"managed_by" json:"managedBy,omitempty" toml:"managedBy" yaml:"managedBy,omitempty"`
	InsertedAt time.Time   `boil:"inserted_at" json:"insertedAt" toml:"insertedAt" yaml:"insertedAt"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *permissionedEthereumNetworksBesuNodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L permissionedEthereumNetworksBesuNodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PermissionedEthereumNetworksBesuNodeColumns = struct {
	ID         string
	Name       string
	PublicKey  string
	PrivateKey string
	NodeType   string
	Config     string
	NetworkID  string
	UUID       string
	ManagedBy  string
	InsertedAt string
	UpdatedAt  string
}{
	ID:         "id",
	Name:       "name",
	PublicKey:  "public_key",
	PrivateKey: "private_key",
	NodeType:   "node_type",
	Config:     "config",
	NetworkID:  "network_id",
	UUID:       "uuid",
	ManagedBy:  "managed_by",
	InsertedAt: "inserted_at",
	UpdatedAt:  "updated_at",
}

// Generated where

var PermissionedEthereumNetworksBesuNodeWhere = struct {
	ID         whereHelperint64
	Name       whereHelpernull_String
	PublicKey  whereHelpernull_String
	PrivateKey whereHelpernull_String
	NodeType   whereHelpernull_String
	Config     whereHelpernull_String
	NetworkID  whereHelpernull_Int64
	UUID       whereHelperstring
	ManagedBy  whereHelpernull_String
	InsertedAt whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "\"permissioned_ethereum_networks_besu_nodes\".\"id\""},
	Name:       whereHelpernull_String{field: "\"permissioned_ethereum_networks_besu_nodes\".\"name\""},
	PublicKey:  whereHelpernull_String{field: "\"permissioned_ethereum_networks_besu_nodes\".\"public_key\""},
	PrivateKey: whereHelpernull_String{field: "\"permissioned_ethereum_networks_besu_nodes\".\"private_key\""},
	NodeType:   whereHelpernull_String{field: "\"permissioned_ethereum_networks_besu_nodes\".\"node_type\""},
	Config:     whereHelpernull_String{field: "\"permissioned_ethereum_networks_besu_nodes\".\"config\""},
	NetworkID:  whereHelpernull_Int64{field: "\"permissioned_ethereum_networks_besu_nodes\".\"network_id\""},
	UUID:       whereHelperstring{field: "\"permissioned_ethereum_networks_besu_nodes\".\"uuid\""},
	ManagedBy:  whereHelpernull_String{field: "\"permissioned_ethereum_networks_besu_nodes\".\"managed_by\""},
	InsertedAt: whereHelpertime_Time{field: "\"permissioned_ethereum_networks_besu_nodes\".\"inserted_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"permissioned_ethereum_networks_besu_nodes\".\"updated_at\""},
}

// PermissionedEthereumNetworksBesuNodeRels is where relationship names are stored.
var PermissionedEthereumNetworksBesuNodeRels = struct {
	Network string
}{
	Network: "Network",
}

// permissionedEthereumNetworksBesuNodeR is where relationships are stored.
type permissionedEthereumNetworksBesuNodeR struct {
	Network *PermissionedEthereumNetwork
}

// NewStruct creates a new relationship struct
func (*permissionedEthereumNetworksBesuNodeR) NewStruct() *permissionedEthereumNetworksBesuNodeR {
	return &permissionedEthereumNetworksBesuNodeR{}
}

// permissionedEthereumNetworksBesuNodeL is where Load methods for each relationship are stored.
type permissionedEthereumNetworksBesuNodeL struct{}

var (
	permissionedEthereumNetworksBesuNodeAllColumns            = []string{"id", "name", "public_key", "private_key", "node_type", "config", "network_id", "uuid", "managed_by", "inserted_at", "updated_at"}
	permissionedEthereumNetworksBesuNodeColumnsWithoutDefault = []string{"name", "public_key", "private_key", "node_type", "config", "network_id", "uuid", "managed_by", "inserted_at", "updated_at"}
	permissionedEthereumNetworksBesuNodeColumnsWithDefault    = []string{"id"}
	permissionedEthereumNetworksBesuNodePrimaryKeyColumns     = []string{"id"}
)

type (
	// PermissionedEthereumNetworksBesuNodeSlice is an alias for a slice of pointers to PermissionedEthereumNetworksBesuNode.
	// This should generally be used opposed to []PermissionedEthereumNetworksBesuNode.
	PermissionedEthereumNetworksBesuNodeSlice []*PermissionedEthereumNetworksBesuNode
	// PermissionedEthereumNetworksBesuNodeHook is the signature for custom PermissionedEthereumNetworksBesuNode hook methods
	PermissionedEthereumNetworksBesuNodeHook func(context.Context, boil.ContextExecutor, *PermissionedEthereumNetworksBesuNode) error

	permissionedEthereumNetworksBesuNodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	permissionedEthereumNetworksBesuNodeType                 = reflect.TypeOf(&PermissionedEthereumNetworksBesuNode{})
	permissionedEthereumNetworksBesuNodeMapping              = queries.MakeStructMapping(permissionedEthereumNetworksBesuNodeType)
	permissionedEthereumNetworksBesuNodePrimaryKeyMapping, _ = queries.BindMapping(permissionedEthereumNetworksBesuNodeType, permissionedEthereumNetworksBesuNodeMapping, permissionedEthereumNetworksBesuNodePrimaryKeyColumns)
	permissionedEthereumNetworksBesuNodeInsertCacheMut       sync.RWMutex
	permissionedEthereumNetworksBesuNodeInsertCache          = make(map[string]insertCache)
	permissionedEthereumNetworksBesuNodeUpdateCacheMut       sync.RWMutex
	permissionedEthereumNetworksBesuNodeUpdateCache          = make(map[string]updateCache)
	permissionedEthereumNetworksBesuNodeUpsertCacheMut       sync.RWMutex
	permissionedEthereumNetworksBesuNodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var permissionedEthereumNetworksBesuNodeBeforeInsertHooks []PermissionedEthereumNetworksBesuNodeHook
var permissionedEthereumNetworksBesuNodeBeforeUpdateHooks []PermissionedEthereumNetworksBesuNodeHook
var permissionedEthereumNetworksBesuNodeBeforeDeleteHooks []PermissionedEthereumNetworksBesuNodeHook
var permissionedEthereumNetworksBesuNodeBeforeUpsertHooks []PermissionedEthereumNetworksBesuNodeHook

var permissionedEthereumNetworksBesuNodeAfterInsertHooks []PermissionedEthereumNetworksBesuNodeHook
var permissionedEthereumNetworksBesuNodeAfterSelectHooks []PermissionedEthereumNetworksBesuNodeHook
var permissionedEthereumNetworksBesuNodeAfterUpdateHooks []PermissionedEthereumNetworksBesuNodeHook
var permissionedEthereumNetworksBesuNodeAfterDeleteHooks []PermissionedEthereumNetworksBesuNodeHook
var permissionedEthereumNetworksBesuNodeAfterUpsertHooks []PermissionedEthereumNetworksBesuNodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PermissionedEthereumNetworksBesuNode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBesuNodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPermissionedEthereumNetworksBesuNodeHook registers your hook function for all future operations.
func AddPermissionedEthereumNetworksBesuNodeHook(hookPoint boil.HookPoint, permissionedEthereumNetworksBesuNodeHook PermissionedEthereumNetworksBesuNodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		permissionedEthereumNetworksBesuNodeBeforeInsertHooks = append(permissionedEthereumNetworksBesuNodeBeforeInsertHooks, permissionedEthereumNetworksBesuNodeHook)
	case boil.BeforeUpdateHook:
		permissionedEthereumNetworksBesuNodeBeforeUpdateHooks = append(permissionedEthereumNetworksBesuNodeBeforeUpdateHooks, permissionedEthereumNetworksBesuNodeHook)
	case boil.BeforeDeleteHook:
		permissionedEthereumNetworksBesuNodeBeforeDeleteHooks = append(permissionedEthereumNetworksBesuNodeBeforeDeleteHooks, permissionedEthereumNetworksBesuNodeHook)
	case boil.BeforeUpsertHook:
		permissionedEthereumNetworksBesuNodeBeforeUpsertHooks = append(permissionedEthereumNetworksBesuNodeBeforeUpsertHooks, permissionedEthereumNetworksBesuNodeHook)
	case boil.AfterInsertHook:
		permissionedEthereumNetworksBesuNodeAfterInsertHooks = append(permissionedEthereumNetworksBesuNodeAfterInsertHooks, permissionedEthereumNetworksBesuNodeHook)
	case boil.AfterSelectHook:
		permissionedEthereumNetworksBesuNodeAfterSelectHooks = append(permissionedEthereumNetworksBesuNodeAfterSelectHooks, permissionedEthereumNetworksBesuNodeHook)
	case boil.AfterUpdateHook:
		permissionedEthereumNetworksBesuNodeAfterUpdateHooks = append(permissionedEthereumNetworksBesuNodeAfterUpdateHooks, permissionedEthereumNetworksBesuNodeHook)
	case boil.AfterDeleteHook:
		permissionedEthereumNetworksBesuNodeAfterDeleteHooks = append(permissionedEthereumNetworksBesuNodeAfterDeleteHooks, permissionedEthereumNetworksBesuNodeHook)
	case boil.AfterUpsertHook:
		permissionedEthereumNetworksBesuNodeAfterUpsertHooks = append(permissionedEthereumNetworksBesuNodeAfterUpsertHooks, permissionedEthereumNetworksBesuNodeHook)
	}
}

// One returns a single permissionedEthereumNetworksBesuNode record from the query.
func (q permissionedEthereumNetworksBesuNodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PermissionedEthereumNetworksBesuNode, error) {
	o := &PermissionedEthereumNetworksBesuNode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for permissioned_ethereum_networks_besu_nodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PermissionedEthereumNetworksBesuNode records from the query.
func (q permissionedEthereumNetworksBesuNodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PermissionedEthereumNetworksBesuNodeSlice, error) {
	var o []*PermissionedEthereumNetworksBesuNode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to PermissionedEthereumNetworksBesuNode slice")
	}

	if len(permissionedEthereumNetworksBesuNodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PermissionedEthereumNetworksBesuNode records in the query.
func (q permissionedEthereumNetworksBesuNodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count permissioned_ethereum_networks_besu_nodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q permissionedEthereumNetworksBesuNodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if permissioned_ethereum_networks_besu_nodes exists")
	}

	return count > 0, nil
}

// Network pointed to by the foreign key.
func (o *PermissionedEthereumNetworksBesuNode) Network(mods ...qm.QueryMod) permissionedEthereumNetworkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NetworkID),
	}

	queryMods = append(queryMods, mods...)

	query := PermissionedEthereumNetworks(queryMods...)
	queries.SetFrom(query.Query, "\"permissioned_ethereum_networks\"")

	return query
}

// LoadNetwork allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (permissionedEthereumNetworksBesuNodeL) LoadNetwork(ctx context.Context, e boil.ContextExecutor, singular bool, maybePermissionedEthereumNetworksBesuNode interface{}, mods queries.Applicator) error {
	var slice []*PermissionedEthereumNetworksBesuNode
	var object *PermissionedEthereumNetworksBesuNode

	if singular {
		object = maybePermissionedEthereumNetworksBesuNode.(*PermissionedEthereumNetworksBesuNode)
	} else {
		slice = *maybePermissionedEthereumNetworksBesuNode.(*[]*PermissionedEthereumNetworksBesuNode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &permissionedEthereumNetworksBesuNodeR{}
		}
		if !queries.IsNil(object.NetworkID) {
			args = append(args, object.NetworkID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &permissionedEthereumNetworksBesuNodeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NetworkID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.NetworkID) {
				args = append(args, obj.NetworkID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`permissioned_ethereum_networks`), qm.WhereIn(`permissioned_ethereum_networks.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PermissionedEthereumNetwork")
	}

	var resultSlice []*PermissionedEthereumNetwork
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PermissionedEthereumNetwork")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for permissioned_ethereum_networks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissioned_ethereum_networks")
	}

	if len(permissionedEthereumNetworksBesuNodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Network = foreign
		if foreign.R == nil {
			foreign.R = &permissionedEthereumNetworkR{}
		}
		foreign.R.NetworkPermissionedEthereumNetworksBesuNodes = append(foreign.R.NetworkPermissionedEthereumNetworksBesuNodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NetworkID, foreign.ID) {
				local.R.Network = foreign
				if foreign.R == nil {
					foreign.R = &permissionedEthereumNetworkR{}
				}
				foreign.R.NetworkPermissionedEthereumNetworksBesuNodes = append(foreign.R.NetworkPermissionedEthereumNetworksBesuNodes, local)
				break
			}
		}
	}

	return nil
}

// SetNetwork of the permissionedEthereumNetworksBesuNode to the related item.
// Sets o.R.Network to related.
// Adds o to related.R.NetworkPermissionedEthereumNetworksBesuNodes.
func (o *PermissionedEthereumNetworksBesuNode) SetNetwork(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PermissionedEthereumNetwork) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"permissioned_ethereum_networks_besu_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"network_id"}),
		strmangle.WhereClause("\"", "\"", 2, permissionedEthereumNetworksBesuNodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NetworkID, related.ID)
	if o.R == nil {
		o.R = &permissionedEthereumNetworksBesuNodeR{
			Network: related,
		}
	} else {
		o.R.Network = related
	}

	if related.R == nil {
		related.R = &permissionedEthereumNetworkR{
			NetworkPermissionedEthereumNetworksBesuNodes: PermissionedEthereumNetworksBesuNodeSlice{o},
		}
	} else {
		related.R.NetworkPermissionedEthereumNetworksBesuNodes = append(related.R.NetworkPermissionedEthereumNetworksBesuNodes, o)
	}

	return nil
}

// RemoveNetwork relationship.
// Sets o.R.Network to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PermissionedEthereumNetworksBesuNode) RemoveNetwork(ctx context.Context, exec boil.ContextExecutor, related *PermissionedEthereumNetwork) error {
	var err error

	queries.SetScanner(&o.NetworkID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("network_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Network = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NetworkPermissionedEthereumNetworksBesuNodes {
		if queries.Equal(o.NetworkID, ri.NetworkID) {
			continue
		}

		ln := len(related.R.NetworkPermissionedEthereumNetworksBesuNodes)
		if ln > 1 && i < ln-1 {
			related.R.NetworkPermissionedEthereumNetworksBesuNodes[i] = related.R.NetworkPermissionedEthereumNetworksBesuNodes[ln-1]
		}
		related.R.NetworkPermissionedEthereumNetworksBesuNodes = related.R.NetworkPermissionedEthereumNetworksBesuNodes[:ln-1]
		break
	}
	return nil
}

// PermissionedEthereumNetworksBesuNodes retrieves all the records using an executor.
func PermissionedEthereumNetworksBesuNodes(mods ...qm.QueryMod) permissionedEthereumNetworksBesuNodeQuery {
	mods = append(mods, qm.From("\"permissioned_ethereum_networks_besu_nodes\""))
	return permissionedEthereumNetworksBesuNodeQuery{NewQuery(mods...)}
}

// FindPermissionedEthereumNetworksBesuNode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPermissionedEthereumNetworksBesuNode(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PermissionedEthereumNetworksBesuNode, error) {
	permissionedEthereumNetworksBesuNodeObj := &PermissionedEthereumNetworksBesuNode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"permissioned_ethereum_networks_besu_nodes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, permissionedEthereumNetworksBesuNodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from permissioned_ethereum_networks_besu_nodes")
	}

	return permissionedEthereumNetworksBesuNodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PermissionedEthereumNetworksBesuNode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no permissioned_ethereum_networks_besu_nodes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permissionedEthereumNetworksBesuNodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	permissionedEthereumNetworksBesuNodeInsertCacheMut.RLock()
	cache, cached := permissionedEthereumNetworksBesuNodeInsertCache[key]
	permissionedEthereumNetworksBesuNodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			permissionedEthereumNetworksBesuNodeAllColumns,
			permissionedEthereumNetworksBesuNodeColumnsWithDefault,
			permissionedEthereumNetworksBesuNodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworksBesuNodeType, permissionedEthereumNetworksBesuNodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(permissionedEthereumNetworksBesuNodeType, permissionedEthereumNetworksBesuNodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"permissioned_ethereum_networks_besu_nodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"permissioned_ethereum_networks_besu_nodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into permissioned_ethereum_networks_besu_nodes")
	}

	if !cached {
		permissionedEthereumNetworksBesuNodeInsertCacheMut.Lock()
		permissionedEthereumNetworksBesuNodeInsertCache[key] = cache
		permissionedEthereumNetworksBesuNodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PermissionedEthereumNetworksBesuNode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PermissionedEthereumNetworksBesuNode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	permissionedEthereumNetworksBesuNodeUpdateCacheMut.RLock()
	cache, cached := permissionedEthereumNetworksBesuNodeUpdateCache[key]
	permissionedEthereumNetworksBesuNodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			permissionedEthereumNetworksBesuNodeAllColumns,
			permissionedEthereumNetworksBesuNodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update permissioned_ethereum_networks_besu_nodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"permissioned_ethereum_networks_besu_nodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, permissionedEthereumNetworksBesuNodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworksBesuNodeType, permissionedEthereumNetworksBesuNodeMapping, append(wl, permissionedEthereumNetworksBesuNodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update permissioned_ethereum_networks_besu_nodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for permissioned_ethereum_networks_besu_nodes")
	}

	if !cached {
		permissionedEthereumNetworksBesuNodeUpdateCacheMut.Lock()
		permissionedEthereumNetworksBesuNodeUpdateCache[key] = cache
		permissionedEthereumNetworksBesuNodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q permissionedEthereumNetworksBesuNodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for permissioned_ethereum_networks_besu_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for permissioned_ethereum_networks_besu_nodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PermissionedEthereumNetworksBesuNodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworksBesuNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"permissioned_ethereum_networks_besu_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, permissionedEthereumNetworksBesuNodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in permissionedEthereumNetworksBesuNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all permissionedEthereumNetworksBesuNode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PermissionedEthereumNetworksBesuNode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no permissioned_ethereum_networks_besu_nodes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permissionedEthereumNetworksBesuNodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	permissionedEthereumNetworksBesuNodeUpsertCacheMut.RLock()
	cache, cached := permissionedEthereumNetworksBesuNodeUpsertCache[key]
	permissionedEthereumNetworksBesuNodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			permissionedEthereumNetworksBesuNodeAllColumns,
			permissionedEthereumNetworksBesuNodeColumnsWithDefault,
			permissionedEthereumNetworksBesuNodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			permissionedEthereumNetworksBesuNodeAllColumns,
			permissionedEthereumNetworksBesuNodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert permissioned_ethereum_networks_besu_nodes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(permissionedEthereumNetworksBesuNodePrimaryKeyColumns))
			copy(conflict, permissionedEthereumNetworksBesuNodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"permissioned_ethereum_networks_besu_nodes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworksBesuNodeType, permissionedEthereumNetworksBesuNodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(permissionedEthereumNetworksBesuNodeType, permissionedEthereumNetworksBesuNodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert permissioned_ethereum_networks_besu_nodes")
	}

	if !cached {
		permissionedEthereumNetworksBesuNodeUpsertCacheMut.Lock()
		permissionedEthereumNetworksBesuNodeUpsertCache[key] = cache
		permissionedEthereumNetworksBesuNodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PermissionedEthereumNetworksBesuNode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PermissionedEthereumNetworksBesuNode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no PermissionedEthereumNetworksBesuNode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), permissionedEthereumNetworksBesuNodePrimaryKeyMapping)
	sql := "DELETE FROM \"permissioned_ethereum_networks_besu_nodes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from permissioned_ethereum_networks_besu_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for permissioned_ethereum_networks_besu_nodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q permissionedEthereumNetworksBesuNodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no permissionedEthereumNetworksBesuNodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from permissioned_ethereum_networks_besu_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for permissioned_ethereum_networks_besu_nodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PermissionedEthereumNetworksBesuNodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(permissionedEthereumNetworksBesuNodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworksBesuNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"permissioned_ethereum_networks_besu_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permissionedEthereumNetworksBesuNodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from permissionedEthereumNetworksBesuNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for permissioned_ethereum_networks_besu_nodes")
	}

	if len(permissionedEthereumNetworksBesuNodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PermissionedEthereumNetworksBesuNode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPermissionedEthereumNetworksBesuNode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PermissionedEthereumNetworksBesuNodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PermissionedEthereumNetworksBesuNodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworksBesuNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"permissioned_ethereum_networks_besu_nodes\".* FROM \"permissioned_ethereum_networks_besu_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permissionedEthereumNetworksBesuNodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PermissionedEthereumNetworksBesuNodeSlice")
	}

	*o = slice

	return nil
}

// PermissionedEthereumNetworksBesuNodeExists checks if the PermissionedEthereumNetworksBesuNode row exists.
func PermissionedEthereumNetworksBesuNodeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"permissioned_ethereum_networks_besu_nodes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if permissioned_ethereum_networks_besu_nodes exists")
	}

	return exists, nil
}
