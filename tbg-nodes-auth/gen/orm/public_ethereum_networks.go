// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PublicEthereumNetwork is an object representing the database table.
type PublicEthereumNetwork struct {
	ID                   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                 null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	InsertedAt           time.Time   `boil:"inserted_at" json:"insertedAt" toml:"insertedAt" yaml:"insertedAt"`
	UpdatedAt            time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	NetworkConfiguration null.String `boil:"network_configuration" json:"networkConfiguration,omitempty" toml:"networkConfiguration" yaml:"networkConfiguration,omitempty"`
	DeploymentType       null.String `boil:"deployment_type" json:"deploymentType,omitempty" toml:"deploymentType" yaml:"deploymentType,omitempty"`
	UserID               null.Int64  `boil:"user_id" json:"userID,omitempty" toml:"userID" yaml:"userID,omitempty"`
	UUID                 string      `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`

	R *publicEthereumNetworkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publicEthereumNetworkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublicEthereumNetworkColumns = struct {
	ID                   string
	Name                 string
	InsertedAt           string
	UpdatedAt            string
	NetworkConfiguration string
	DeploymentType       string
	UserID               string
	UUID                 string
}{
	ID:                   "id",
	Name:                 "name",
	InsertedAt:           "inserted_at",
	UpdatedAt:            "updated_at",
	NetworkConfiguration: "network_configuration",
	DeploymentType:       "deployment_type",
	UserID:               "user_id",
	UUID:                 "uuid",
}

// Generated where

var PublicEthereumNetworkWhere = struct {
	ID                   whereHelperint64
	Name                 whereHelpernull_String
	InsertedAt           whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	NetworkConfiguration whereHelpernull_String
	DeploymentType       whereHelpernull_String
	UserID               whereHelpernull_Int64
	UUID                 whereHelperstring
}{
	ID:                   whereHelperint64{field: "\"public_ethereum_networks\".\"id\""},
	Name:                 whereHelpernull_String{field: "\"public_ethereum_networks\".\"name\""},
	InsertedAt:           whereHelpertime_Time{field: "\"public_ethereum_networks\".\"inserted_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"public_ethereum_networks\".\"updated_at\""},
	NetworkConfiguration: whereHelpernull_String{field: "\"public_ethereum_networks\".\"network_configuration\""},
	DeploymentType:       whereHelpernull_String{field: "\"public_ethereum_networks\".\"deployment_type\""},
	UserID:               whereHelpernull_Int64{field: "\"public_ethereum_networks\".\"user_id\""},
	UUID:                 whereHelperstring{field: "\"public_ethereum_networks\".\"uuid\""},
}

// PublicEthereumNetworkRels is where relationship names are stored.
var PublicEthereumNetworkRels = struct {
	User                                                   string
	NetworkPublicEthereumNetworksNetworkExternalInterfaces string
}{
	User: "User",
	NetworkPublicEthereumNetworksNetworkExternalInterfaces: "NetworkPublicEthereumNetworksNetworkExternalInterfaces",
}

// publicEthereumNetworkR is where relationships are stored.
type publicEthereumNetworkR struct {
	User                                                   *User
	NetworkPublicEthereumNetworksNetworkExternalInterfaces PublicEthereumNetworksNetworkExternalInterfaceSlice
}

// NewStruct creates a new relationship struct
func (*publicEthereumNetworkR) NewStruct() *publicEthereumNetworkR {
	return &publicEthereumNetworkR{}
}

// publicEthereumNetworkL is where Load methods for each relationship are stored.
type publicEthereumNetworkL struct{}

var (
	publicEthereumNetworkAllColumns            = []string{"id", "name", "inserted_at", "updated_at", "network_configuration", "deployment_type", "user_id", "uuid"}
	publicEthereumNetworkColumnsWithoutDefault = []string{"name", "inserted_at", "updated_at", "network_configuration", "deployment_type", "user_id"}
	publicEthereumNetworkColumnsWithDefault    = []string{"id", "uuid"}
	publicEthereumNetworkPrimaryKeyColumns     = []string{"id"}
)

type (
	// PublicEthereumNetworkSlice is an alias for a slice of pointers to PublicEthereumNetwork.
	// This should generally be used opposed to []PublicEthereumNetwork.
	PublicEthereumNetworkSlice []*PublicEthereumNetwork
	// PublicEthereumNetworkHook is the signature for custom PublicEthereumNetwork hook methods
	PublicEthereumNetworkHook func(context.Context, boil.ContextExecutor, *PublicEthereumNetwork) error

	publicEthereumNetworkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publicEthereumNetworkType                 = reflect.TypeOf(&PublicEthereumNetwork{})
	publicEthereumNetworkMapping              = queries.MakeStructMapping(publicEthereumNetworkType)
	publicEthereumNetworkPrimaryKeyMapping, _ = queries.BindMapping(publicEthereumNetworkType, publicEthereumNetworkMapping, publicEthereumNetworkPrimaryKeyColumns)
	publicEthereumNetworkInsertCacheMut       sync.RWMutex
	publicEthereumNetworkInsertCache          = make(map[string]insertCache)
	publicEthereumNetworkUpdateCacheMut       sync.RWMutex
	publicEthereumNetworkUpdateCache          = make(map[string]updateCache)
	publicEthereumNetworkUpsertCacheMut       sync.RWMutex
	publicEthereumNetworkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publicEthereumNetworkBeforeInsertHooks []PublicEthereumNetworkHook
var publicEthereumNetworkBeforeUpdateHooks []PublicEthereumNetworkHook
var publicEthereumNetworkBeforeDeleteHooks []PublicEthereumNetworkHook
var publicEthereumNetworkBeforeUpsertHooks []PublicEthereumNetworkHook

var publicEthereumNetworkAfterInsertHooks []PublicEthereumNetworkHook
var publicEthereumNetworkAfterSelectHooks []PublicEthereumNetworkHook
var publicEthereumNetworkAfterUpdateHooks []PublicEthereumNetworkHook
var publicEthereumNetworkAfterDeleteHooks []PublicEthereumNetworkHook
var publicEthereumNetworkAfterUpsertHooks []PublicEthereumNetworkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublicEthereumNetwork) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublicEthereumNetwork) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublicEthereumNetwork) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublicEthereumNetwork) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublicEthereumNetwork) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublicEthereumNetwork) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublicEthereumNetwork) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublicEthereumNetwork) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublicEthereumNetwork) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublicEthereumNetworkHook registers your hook function for all future operations.
func AddPublicEthereumNetworkHook(hookPoint boil.HookPoint, publicEthereumNetworkHook PublicEthereumNetworkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		publicEthereumNetworkBeforeInsertHooks = append(publicEthereumNetworkBeforeInsertHooks, publicEthereumNetworkHook)
	case boil.BeforeUpdateHook:
		publicEthereumNetworkBeforeUpdateHooks = append(publicEthereumNetworkBeforeUpdateHooks, publicEthereumNetworkHook)
	case boil.BeforeDeleteHook:
		publicEthereumNetworkBeforeDeleteHooks = append(publicEthereumNetworkBeforeDeleteHooks, publicEthereumNetworkHook)
	case boil.BeforeUpsertHook:
		publicEthereumNetworkBeforeUpsertHooks = append(publicEthereumNetworkBeforeUpsertHooks, publicEthereumNetworkHook)
	case boil.AfterInsertHook:
		publicEthereumNetworkAfterInsertHooks = append(publicEthereumNetworkAfterInsertHooks, publicEthereumNetworkHook)
	case boil.AfterSelectHook:
		publicEthereumNetworkAfterSelectHooks = append(publicEthereumNetworkAfterSelectHooks, publicEthereumNetworkHook)
	case boil.AfterUpdateHook:
		publicEthereumNetworkAfterUpdateHooks = append(publicEthereumNetworkAfterUpdateHooks, publicEthereumNetworkHook)
	case boil.AfterDeleteHook:
		publicEthereumNetworkAfterDeleteHooks = append(publicEthereumNetworkAfterDeleteHooks, publicEthereumNetworkHook)
	case boil.AfterUpsertHook:
		publicEthereumNetworkAfterUpsertHooks = append(publicEthereumNetworkAfterUpsertHooks, publicEthereumNetworkHook)
	}
}

// One returns a single publicEthereumNetwork record from the query.
func (q publicEthereumNetworkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PublicEthereumNetwork, error) {
	o := &PublicEthereumNetwork{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for public_ethereum_networks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PublicEthereumNetwork records from the query.
func (q publicEthereumNetworkQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublicEthereumNetworkSlice, error) {
	var o []*PublicEthereumNetwork

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to PublicEthereumNetwork slice")
	}

	if len(publicEthereumNetworkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PublicEthereumNetwork records in the query.
func (q publicEthereumNetworkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count public_ethereum_networks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publicEthereumNetworkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if public_ethereum_networks exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *PublicEthereumNetwork) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// NetworkPublicEthereumNetworksNetworkExternalInterfaces retrieves all the public_ethereum_networks_network_external_interface's PublicEthereumNetworksNetworkExternalInterfaces with an executor via network_id column.
func (o *PublicEthereumNetwork) NetworkPublicEthereumNetworksNetworkExternalInterfaces(mods ...qm.QueryMod) publicEthereumNetworksNetworkExternalInterfaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"public_ethereum_networks_network_external_interfaces\".\"network_id\"=?", o.ID),
	)

	query := PublicEthereumNetworksNetworkExternalInterfaces(queryMods...)
	queries.SetFrom(query.Query, "\"public_ethereum_networks_network_external_interfaces\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"public_ethereum_networks_network_external_interfaces\".*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (publicEthereumNetworkL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublicEthereumNetwork interface{}, mods queries.Applicator) error {
	var slice []*PublicEthereumNetwork
	var object *PublicEthereumNetwork

	if singular {
		object = maybePublicEthereumNetwork.(*PublicEthereumNetwork)
	} else {
		slice = *maybePublicEthereumNetwork.(*[]*PublicEthereumNetwork)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publicEthereumNetworkR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publicEthereumNetworkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(publicEthereumNetworkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PublicEthereumNetworks = append(foreign.R.PublicEthereumNetworks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PublicEthereumNetworks = append(foreign.R.PublicEthereumNetworks, local)
				break
			}
		}
	}

	return nil
}

// LoadNetworkPublicEthereumNetworksNetworkExternalInterfaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publicEthereumNetworkL) LoadNetworkPublicEthereumNetworksNetworkExternalInterfaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublicEthereumNetwork interface{}, mods queries.Applicator) error {
	var slice []*PublicEthereumNetwork
	var object *PublicEthereumNetwork

	if singular {
		object = maybePublicEthereumNetwork.(*PublicEthereumNetwork)
	} else {
		slice = *maybePublicEthereumNetwork.(*[]*PublicEthereumNetwork)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publicEthereumNetworkR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publicEthereumNetworkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`public_ethereum_networks_network_external_interfaces`), qm.WhereIn(`public_ethereum_networks_network_external_interfaces.network_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load public_ethereum_networks_network_external_interfaces")
	}

	var resultSlice []*PublicEthereumNetworksNetworkExternalInterface
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice public_ethereum_networks_network_external_interfaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on public_ethereum_networks_network_external_interfaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for public_ethereum_networks_network_external_interfaces")
	}

	if len(publicEthereumNetworksNetworkExternalInterfaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &publicEthereumNetworksNetworkExternalInterfaceR{}
			}
			foreign.R.Network = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NetworkID) {
				local.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = append(local.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces, foreign)
				if foreign.R == nil {
					foreign.R = &publicEthereumNetworksNetworkExternalInterfaceR{}
				}
				foreign.R.Network = local
				break
			}
		}
	}

	return nil
}

// SetUser of the publicEthereumNetwork to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PublicEthereumNetworks.
func (o *PublicEthereumNetwork) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"public_ethereum_networks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, publicEthereumNetworkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &publicEthereumNetworkR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PublicEthereumNetworks: PublicEthereumNetworkSlice{o},
		}
	} else {
		related.R.PublicEthereumNetworks = append(related.R.PublicEthereumNetworks, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PublicEthereumNetwork) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PublicEthereumNetworks {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.PublicEthereumNetworks)
		if ln > 1 && i < ln-1 {
			related.R.PublicEthereumNetworks[i] = related.R.PublicEthereumNetworks[ln-1]
		}
		related.R.PublicEthereumNetworks = related.R.PublicEthereumNetworks[:ln-1]
		break
	}
	return nil
}

// AddNetworkPublicEthereumNetworksNetworkExternalInterfaces adds the given related objects to the existing relationships
// of the public_ethereum_network, optionally inserting them as new records.
// Appends related to o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces.
// Sets related.R.Network appropriately.
func (o *PublicEthereumNetwork) AddNetworkPublicEthereumNetworksNetworkExternalInterfaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PublicEthereumNetworksNetworkExternalInterface) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NetworkID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"public_ethereum_networks_network_external_interfaces\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"network_id"}),
				strmangle.WhereClause("\"", "\"", 2, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NetworkID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &publicEthereumNetworkR{
			NetworkPublicEthereumNetworksNetworkExternalInterfaces: related,
		}
	} else {
		o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = append(o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &publicEthereumNetworksNetworkExternalInterfaceR{
				Network: o,
			}
		} else {
			rel.R.Network = o
		}
	}
	return nil
}

// SetNetworkPublicEthereumNetworksNetworkExternalInterfaces removes all previously related items of the
// public_ethereum_network replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Network's NetworkPublicEthereumNetworksNetworkExternalInterfaces accordingly.
// Replaces o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces with related.
// Sets related.R.Network's NetworkPublicEthereumNetworksNetworkExternalInterfaces accordingly.
func (o *PublicEthereumNetwork) SetNetworkPublicEthereumNetworksNetworkExternalInterfaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PublicEthereumNetworksNetworkExternalInterface) error {
	query := "update \"public_ethereum_networks_network_external_interfaces\" set \"network_id\" = null where \"network_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces {
			queries.SetScanner(&rel.NetworkID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Network = nil
		}

		o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = nil
	}
	return o.AddNetworkPublicEthereumNetworksNetworkExternalInterfaces(ctx, exec, insert, related...)
}

// RemoveNetworkPublicEthereumNetworksNetworkExternalInterfaces relationships from objects passed in.
// Removes related items from R.NetworkPublicEthereumNetworksNetworkExternalInterfaces (uses pointer comparison, removal does not keep order)
// Sets related.R.Network.
func (o *PublicEthereumNetwork) RemoveNetworkPublicEthereumNetworksNetworkExternalInterfaces(ctx context.Context, exec boil.ContextExecutor, related ...*PublicEthereumNetworksNetworkExternalInterface) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NetworkID, nil)
		if rel.R != nil {
			rel.R.Network = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("network_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces {
			if rel != ri {
				continue
			}

			ln := len(o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces)
			if ln > 1 && i < ln-1 {
				o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces[i] = o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces[ln-1]
			}
			o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = o.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces[:ln-1]
			break
		}
	}

	return nil
}

// PublicEthereumNetworks retrieves all the records using an executor.
func PublicEthereumNetworks(mods ...qm.QueryMod) publicEthereumNetworkQuery {
	mods = append(mods, qm.From("\"public_ethereum_networks\""))
	return publicEthereumNetworkQuery{NewQuery(mods...)}
}

// FindPublicEthereumNetwork retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublicEthereumNetwork(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PublicEthereumNetwork, error) {
	publicEthereumNetworkObj := &PublicEthereumNetwork{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"public_ethereum_networks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, publicEthereumNetworkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from public_ethereum_networks")
	}

	return publicEthereumNetworkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublicEthereumNetwork) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no public_ethereum_networks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publicEthereumNetworkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publicEthereumNetworkInsertCacheMut.RLock()
	cache, cached := publicEthereumNetworkInsertCache[key]
	publicEthereumNetworkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publicEthereumNetworkAllColumns,
			publicEthereumNetworkColumnsWithDefault,
			publicEthereumNetworkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworkType, publicEthereumNetworkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publicEthereumNetworkType, publicEthereumNetworkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"public_ethereum_networks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"public_ethereum_networks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into public_ethereum_networks")
	}

	if !cached {
		publicEthereumNetworkInsertCacheMut.Lock()
		publicEthereumNetworkInsertCache[key] = cache
		publicEthereumNetworkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PublicEthereumNetwork.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublicEthereumNetwork) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publicEthereumNetworkUpdateCacheMut.RLock()
	cache, cached := publicEthereumNetworkUpdateCache[key]
	publicEthereumNetworkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publicEthereumNetworkAllColumns,
			publicEthereumNetworkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update public_ethereum_networks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"public_ethereum_networks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publicEthereumNetworkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworkType, publicEthereumNetworkMapping, append(wl, publicEthereumNetworkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update public_ethereum_networks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for public_ethereum_networks")
	}

	if !cached {
		publicEthereumNetworkUpdateCacheMut.Lock()
		publicEthereumNetworkUpdateCache[key] = cache
		publicEthereumNetworkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publicEthereumNetworkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for public_ethereum_networks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for public_ethereum_networks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublicEthereumNetworkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"public_ethereum_networks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publicEthereumNetworkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in publicEthereumNetwork slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all publicEthereumNetwork")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublicEthereumNetwork) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no public_ethereum_networks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publicEthereumNetworkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publicEthereumNetworkUpsertCacheMut.RLock()
	cache, cached := publicEthereumNetworkUpsertCache[key]
	publicEthereumNetworkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			publicEthereumNetworkAllColumns,
			publicEthereumNetworkColumnsWithDefault,
			publicEthereumNetworkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			publicEthereumNetworkAllColumns,
			publicEthereumNetworkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert public_ethereum_networks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(publicEthereumNetworkPrimaryKeyColumns))
			copy(conflict, publicEthereumNetworkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"public_ethereum_networks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworkType, publicEthereumNetworkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publicEthereumNetworkType, publicEthereumNetworkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert public_ethereum_networks")
	}

	if !cached {
		publicEthereumNetworkUpsertCacheMut.Lock()
		publicEthereumNetworkUpsertCache[key] = cache
		publicEthereumNetworkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PublicEthereumNetwork record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublicEthereumNetwork) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no PublicEthereumNetwork provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publicEthereumNetworkPrimaryKeyMapping)
	sql := "DELETE FROM \"public_ethereum_networks\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from public_ethereum_networks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for public_ethereum_networks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publicEthereumNetworkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no publicEthereumNetworkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from public_ethereum_networks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for public_ethereum_networks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublicEthereumNetworkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publicEthereumNetworkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"public_ethereum_networks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publicEthereumNetworkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from publicEthereumNetwork slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for public_ethereum_networks")
	}

	if len(publicEthereumNetworkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublicEthereumNetwork) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublicEthereumNetwork(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublicEthereumNetworkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublicEthereumNetworkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"public_ethereum_networks\".* FROM \"public_ethereum_networks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publicEthereumNetworkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PublicEthereumNetworkSlice")
	}

	*o = slice

	return nil
}

// PublicEthereumNetworkExists checks if the PublicEthereumNetwork row exists.
func PublicEthereumNetworkExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"public_ethereum_networks\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if public_ethereum_networks exists")
	}

	return exists, nil
}
