// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PermissionedEthereumNetwork is an object representing the database table.
type PermissionedEthereumNetwork struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Config     null.JSON   `boil:"config" json:"config,omitempty" toml:"config" yaml:"config,omitempty"`
	UUID       string      `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	Consensus  null.String `boil:"consensus" json:"consensus,omitempty" toml:"consensus" yaml:"consensus,omitempty"`
	UserID     null.Int64  `boil:"user_id" json:"userID,omitempty" toml:"userID" yaml:"userID,omitempty"`
	InsertedAt time.Time   `boil:"inserted_at" json:"insertedAt" toml:"insertedAt" yaml:"insertedAt"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *permissionedEthereumNetworkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L permissionedEthereumNetworkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PermissionedEthereumNetworkColumns = struct {
	ID         string
	Name       string
	Config     string
	UUID       string
	Consensus  string
	UserID     string
	InsertedAt string
	UpdatedAt  string
}{
	ID:         "id",
	Name:       "name",
	Config:     "config",
	UUID:       "uuid",
	Consensus:  "consensus",
	UserID:     "user_id",
	InsertedAt: "inserted_at",
	UpdatedAt:  "updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var PermissionedEthereumNetworkWhere = struct {
	ID         whereHelperint64
	Name       whereHelpernull_String
	Config     whereHelpernull_JSON
	UUID       whereHelperstring
	Consensus  whereHelpernull_String
	UserID     whereHelpernull_Int64
	InsertedAt whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "\"permissioned_ethereum_networks\".\"id\""},
	Name:       whereHelpernull_String{field: "\"permissioned_ethereum_networks\".\"name\""},
	Config:     whereHelpernull_JSON{field: "\"permissioned_ethereum_networks\".\"config\""},
	UUID:       whereHelperstring{field: "\"permissioned_ethereum_networks\".\"uuid\""},
	Consensus:  whereHelpernull_String{field: "\"permissioned_ethereum_networks\".\"consensus\""},
	UserID:     whereHelpernull_Int64{field: "\"permissioned_ethereum_networks\".\"user_id\""},
	InsertedAt: whereHelpertime_Time{field: "\"permissioned_ethereum_networks\".\"inserted_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"permissioned_ethereum_networks\".\"updated_at\""},
}

// PermissionedEthereumNetworkRels is where relationship names are stored.
var PermissionedEthereumNetworkRels = struct {
	User                                                  string
	NetworkPermissionedEthereumNetworksBesuNodes          string
	NetworkPermissionedEthereumNetworksExternalInterfaces string
}{
	User: "User",
	NetworkPermissionedEthereumNetworksBesuNodes:          "NetworkPermissionedEthereumNetworksBesuNodes",
	NetworkPermissionedEthereumNetworksExternalInterfaces: "NetworkPermissionedEthereumNetworksExternalInterfaces",
}

// permissionedEthereumNetworkR is where relationships are stored.
type permissionedEthereumNetworkR struct {
	User                                                  *User
	NetworkPermissionedEthereumNetworksBesuNodes          PermissionedEthereumNetworksBesuNodeSlice
	NetworkPermissionedEthereumNetworksExternalInterfaces PermissionedEthereumNetworksExternalInterfaceSlice
}

// NewStruct creates a new relationship struct
func (*permissionedEthereumNetworkR) NewStruct() *permissionedEthereumNetworkR {
	return &permissionedEthereumNetworkR{}
}

// permissionedEthereumNetworkL is where Load methods for each relationship are stored.
type permissionedEthereumNetworkL struct{}

var (
	permissionedEthereumNetworkAllColumns            = []string{"id", "name", "config", "uuid", "consensus", "user_id", "inserted_at", "updated_at"}
	permissionedEthereumNetworkColumnsWithoutDefault = []string{"name", "config", "uuid", "consensus", "user_id", "inserted_at", "updated_at"}
	permissionedEthereumNetworkColumnsWithDefault    = []string{"id"}
	permissionedEthereumNetworkPrimaryKeyColumns     = []string{"id"}
)

type (
	// PermissionedEthereumNetworkSlice is an alias for a slice of pointers to PermissionedEthereumNetwork.
	// This should generally be used opposed to []PermissionedEthereumNetwork.
	PermissionedEthereumNetworkSlice []*PermissionedEthereumNetwork
	// PermissionedEthereumNetworkHook is the signature for custom PermissionedEthereumNetwork hook methods
	PermissionedEthereumNetworkHook func(context.Context, boil.ContextExecutor, *PermissionedEthereumNetwork) error

	permissionedEthereumNetworkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	permissionedEthereumNetworkType                 = reflect.TypeOf(&PermissionedEthereumNetwork{})
	permissionedEthereumNetworkMapping              = queries.MakeStructMapping(permissionedEthereumNetworkType)
	permissionedEthereumNetworkPrimaryKeyMapping, _ = queries.BindMapping(permissionedEthereumNetworkType, permissionedEthereumNetworkMapping, permissionedEthereumNetworkPrimaryKeyColumns)
	permissionedEthereumNetworkInsertCacheMut       sync.RWMutex
	permissionedEthereumNetworkInsertCache          = make(map[string]insertCache)
	permissionedEthereumNetworkUpdateCacheMut       sync.RWMutex
	permissionedEthereumNetworkUpdateCache          = make(map[string]updateCache)
	permissionedEthereumNetworkUpsertCacheMut       sync.RWMutex
	permissionedEthereumNetworkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var permissionedEthereumNetworkBeforeInsertHooks []PermissionedEthereumNetworkHook
var permissionedEthereumNetworkBeforeUpdateHooks []PermissionedEthereumNetworkHook
var permissionedEthereumNetworkBeforeDeleteHooks []PermissionedEthereumNetworkHook
var permissionedEthereumNetworkBeforeUpsertHooks []PermissionedEthereumNetworkHook

var permissionedEthereumNetworkAfterInsertHooks []PermissionedEthereumNetworkHook
var permissionedEthereumNetworkAfterSelectHooks []PermissionedEthereumNetworkHook
var permissionedEthereumNetworkAfterUpdateHooks []PermissionedEthereumNetworkHook
var permissionedEthereumNetworkAfterDeleteHooks []PermissionedEthereumNetworkHook
var permissionedEthereumNetworkAfterUpsertHooks []PermissionedEthereumNetworkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PermissionedEthereumNetwork) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PermissionedEthereumNetwork) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PermissionedEthereumNetwork) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PermissionedEthereumNetwork) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PermissionedEthereumNetwork) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PermissionedEthereumNetwork) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PermissionedEthereumNetwork) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PermissionedEthereumNetwork) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PermissionedEthereumNetwork) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPermissionedEthereumNetworkHook registers your hook function for all future operations.
func AddPermissionedEthereumNetworkHook(hookPoint boil.HookPoint, permissionedEthereumNetworkHook PermissionedEthereumNetworkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		permissionedEthereumNetworkBeforeInsertHooks = append(permissionedEthereumNetworkBeforeInsertHooks, permissionedEthereumNetworkHook)
	case boil.BeforeUpdateHook:
		permissionedEthereumNetworkBeforeUpdateHooks = append(permissionedEthereumNetworkBeforeUpdateHooks, permissionedEthereumNetworkHook)
	case boil.BeforeDeleteHook:
		permissionedEthereumNetworkBeforeDeleteHooks = append(permissionedEthereumNetworkBeforeDeleteHooks, permissionedEthereumNetworkHook)
	case boil.BeforeUpsertHook:
		permissionedEthereumNetworkBeforeUpsertHooks = append(permissionedEthereumNetworkBeforeUpsertHooks, permissionedEthereumNetworkHook)
	case boil.AfterInsertHook:
		permissionedEthereumNetworkAfterInsertHooks = append(permissionedEthereumNetworkAfterInsertHooks, permissionedEthereumNetworkHook)
	case boil.AfterSelectHook:
		permissionedEthereumNetworkAfterSelectHooks = append(permissionedEthereumNetworkAfterSelectHooks, permissionedEthereumNetworkHook)
	case boil.AfterUpdateHook:
		permissionedEthereumNetworkAfterUpdateHooks = append(permissionedEthereumNetworkAfterUpdateHooks, permissionedEthereumNetworkHook)
	case boil.AfterDeleteHook:
		permissionedEthereumNetworkAfterDeleteHooks = append(permissionedEthereumNetworkAfterDeleteHooks, permissionedEthereumNetworkHook)
	case boil.AfterUpsertHook:
		permissionedEthereumNetworkAfterUpsertHooks = append(permissionedEthereumNetworkAfterUpsertHooks, permissionedEthereumNetworkHook)
	}
}

// One returns a single permissionedEthereumNetwork record from the query.
func (q permissionedEthereumNetworkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PermissionedEthereumNetwork, error) {
	o := &PermissionedEthereumNetwork{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for permissioned_ethereum_networks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PermissionedEthereumNetwork records from the query.
func (q permissionedEthereumNetworkQuery) All(ctx context.Context, exec boil.ContextExecutor) (PermissionedEthereumNetworkSlice, error) {
	var o []*PermissionedEthereumNetwork

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to PermissionedEthereumNetwork slice")
	}

	if len(permissionedEthereumNetworkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PermissionedEthereumNetwork records in the query.
func (q permissionedEthereumNetworkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count permissioned_ethereum_networks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q permissionedEthereumNetworkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if permissioned_ethereum_networks exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *PermissionedEthereumNetwork) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// NetworkPermissionedEthereumNetworksBesuNodes retrieves all the permissioned_ethereum_networks_besu_node's PermissionedEthereumNetworksBesuNodes with an executor via network_id column.
func (o *PermissionedEthereumNetwork) NetworkPermissionedEthereumNetworksBesuNodes(mods ...qm.QueryMod) permissionedEthereumNetworksBesuNodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"permissioned_ethereum_networks_besu_nodes\".\"network_id\"=?", o.ID),
	)

	query := PermissionedEthereumNetworksBesuNodes(queryMods...)
	queries.SetFrom(query.Query, "\"permissioned_ethereum_networks_besu_nodes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"permissioned_ethereum_networks_besu_nodes\".*"})
	}

	return query
}

// NetworkPermissionedEthereumNetworksExternalInterfaces retrieves all the permissioned_ethereum_networks_external_interface's PermissionedEthereumNetworksExternalInterfaces with an executor via network_id column.
func (o *PermissionedEthereumNetwork) NetworkPermissionedEthereumNetworksExternalInterfaces(mods ...qm.QueryMod) permissionedEthereumNetworksExternalInterfaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"permissioned_ethereum_networks_external_interfaces\".\"network_id\"=?", o.ID),
	)

	query := PermissionedEthereumNetworksExternalInterfaces(queryMods...)
	queries.SetFrom(query.Query, "\"permissioned_ethereum_networks_external_interfaces\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"permissioned_ethereum_networks_external_interfaces\".*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (permissionedEthereumNetworkL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePermissionedEthereumNetwork interface{}, mods queries.Applicator) error {
	var slice []*PermissionedEthereumNetwork
	var object *PermissionedEthereumNetwork

	if singular {
		object = maybePermissionedEthereumNetwork.(*PermissionedEthereumNetwork)
	} else {
		slice = *maybePermissionedEthereumNetwork.(*[]*PermissionedEthereumNetwork)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &permissionedEthereumNetworkR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &permissionedEthereumNetworkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(permissionedEthereumNetworkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PermissionedEthereumNetworks = append(foreign.R.PermissionedEthereumNetworks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PermissionedEthereumNetworks = append(foreign.R.PermissionedEthereumNetworks, local)
				break
			}
		}
	}

	return nil
}

// LoadNetworkPermissionedEthereumNetworksBesuNodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (permissionedEthereumNetworkL) LoadNetworkPermissionedEthereumNetworksBesuNodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePermissionedEthereumNetwork interface{}, mods queries.Applicator) error {
	var slice []*PermissionedEthereumNetwork
	var object *PermissionedEthereumNetwork

	if singular {
		object = maybePermissionedEthereumNetwork.(*PermissionedEthereumNetwork)
	} else {
		slice = *maybePermissionedEthereumNetwork.(*[]*PermissionedEthereumNetwork)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &permissionedEthereumNetworkR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &permissionedEthereumNetworkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`permissioned_ethereum_networks_besu_nodes`), qm.WhereIn(`permissioned_ethereum_networks_besu_nodes.network_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load permissioned_ethereum_networks_besu_nodes")
	}

	var resultSlice []*PermissionedEthereumNetworksBesuNode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice permissioned_ethereum_networks_besu_nodes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on permissioned_ethereum_networks_besu_nodes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissioned_ethereum_networks_besu_nodes")
	}

	if len(permissionedEthereumNetworksBesuNodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NetworkPermissionedEthereumNetworksBesuNodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &permissionedEthereumNetworksBesuNodeR{}
			}
			foreign.R.Network = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NetworkID) {
				local.R.NetworkPermissionedEthereumNetworksBesuNodes = append(local.R.NetworkPermissionedEthereumNetworksBesuNodes, foreign)
				if foreign.R == nil {
					foreign.R = &permissionedEthereumNetworksBesuNodeR{}
				}
				foreign.R.Network = local
				break
			}
		}
	}

	return nil
}

// LoadNetworkPermissionedEthereumNetworksExternalInterfaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (permissionedEthereumNetworkL) LoadNetworkPermissionedEthereumNetworksExternalInterfaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybePermissionedEthereumNetwork interface{}, mods queries.Applicator) error {
	var slice []*PermissionedEthereumNetwork
	var object *PermissionedEthereumNetwork

	if singular {
		object = maybePermissionedEthereumNetwork.(*PermissionedEthereumNetwork)
	} else {
		slice = *maybePermissionedEthereumNetwork.(*[]*PermissionedEthereumNetwork)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &permissionedEthereumNetworkR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &permissionedEthereumNetworkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`permissioned_ethereum_networks_external_interfaces`), qm.WhereIn(`permissioned_ethereum_networks_external_interfaces.network_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load permissioned_ethereum_networks_external_interfaces")
	}

	var resultSlice []*PermissionedEthereumNetworksExternalInterface
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice permissioned_ethereum_networks_external_interfaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on permissioned_ethereum_networks_external_interfaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissioned_ethereum_networks_external_interfaces")
	}

	if len(permissionedEthereumNetworksExternalInterfaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NetworkPermissionedEthereumNetworksExternalInterfaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &permissionedEthereumNetworksExternalInterfaceR{}
			}
			foreign.R.Network = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NetworkID) {
				local.R.NetworkPermissionedEthereumNetworksExternalInterfaces = append(local.R.NetworkPermissionedEthereumNetworksExternalInterfaces, foreign)
				if foreign.R == nil {
					foreign.R = &permissionedEthereumNetworksExternalInterfaceR{}
				}
				foreign.R.Network = local
				break
			}
		}
	}

	return nil
}

// SetUser of the permissionedEthereumNetwork to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PermissionedEthereumNetworks.
func (o *PermissionedEthereumNetwork) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"permissioned_ethereum_networks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, permissionedEthereumNetworkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &permissionedEthereumNetworkR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PermissionedEthereumNetworks: PermissionedEthereumNetworkSlice{o},
		}
	} else {
		related.R.PermissionedEthereumNetworks = append(related.R.PermissionedEthereumNetworks, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PermissionedEthereumNetwork) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.User = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PermissionedEthereumNetworks {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.PermissionedEthereumNetworks)
		if ln > 1 && i < ln-1 {
			related.R.PermissionedEthereumNetworks[i] = related.R.PermissionedEthereumNetworks[ln-1]
		}
		related.R.PermissionedEthereumNetworks = related.R.PermissionedEthereumNetworks[:ln-1]
		break
	}
	return nil
}

// AddNetworkPermissionedEthereumNetworksBesuNodes adds the given related objects to the existing relationships
// of the permissioned_ethereum_network, optionally inserting them as new records.
// Appends related to o.R.NetworkPermissionedEthereumNetworksBesuNodes.
// Sets related.R.Network appropriately.
func (o *PermissionedEthereumNetwork) AddNetworkPermissionedEthereumNetworksBesuNodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PermissionedEthereumNetworksBesuNode) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NetworkID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"permissioned_ethereum_networks_besu_nodes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"network_id"}),
				strmangle.WhereClause("\"", "\"", 2, permissionedEthereumNetworksBesuNodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NetworkID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &permissionedEthereumNetworkR{
			NetworkPermissionedEthereumNetworksBesuNodes: related,
		}
	} else {
		o.R.NetworkPermissionedEthereumNetworksBesuNodes = append(o.R.NetworkPermissionedEthereumNetworksBesuNodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &permissionedEthereumNetworksBesuNodeR{
				Network: o,
			}
		} else {
			rel.R.Network = o
		}
	}
	return nil
}

// SetNetworkPermissionedEthereumNetworksBesuNodes removes all previously related items of the
// permissioned_ethereum_network replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Network's NetworkPermissionedEthereumNetworksBesuNodes accordingly.
// Replaces o.R.NetworkPermissionedEthereumNetworksBesuNodes with related.
// Sets related.R.Network's NetworkPermissionedEthereumNetworksBesuNodes accordingly.
func (o *PermissionedEthereumNetwork) SetNetworkPermissionedEthereumNetworksBesuNodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PermissionedEthereumNetworksBesuNode) error {
	query := "update \"permissioned_ethereum_networks_besu_nodes\" set \"network_id\" = null where \"network_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NetworkPermissionedEthereumNetworksBesuNodes {
			queries.SetScanner(&rel.NetworkID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Network = nil
		}

		o.R.NetworkPermissionedEthereumNetworksBesuNodes = nil
	}
	return o.AddNetworkPermissionedEthereumNetworksBesuNodes(ctx, exec, insert, related...)
}

// RemoveNetworkPermissionedEthereumNetworksBesuNodes relationships from objects passed in.
// Removes related items from R.NetworkPermissionedEthereumNetworksBesuNodes (uses pointer comparison, removal does not keep order)
// Sets related.R.Network.
func (o *PermissionedEthereumNetwork) RemoveNetworkPermissionedEthereumNetworksBesuNodes(ctx context.Context, exec boil.ContextExecutor, related ...*PermissionedEthereumNetworksBesuNode) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NetworkID, nil)
		if rel.R != nil {
			rel.R.Network = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("network_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NetworkPermissionedEthereumNetworksBesuNodes {
			if rel != ri {
				continue
			}

			ln := len(o.R.NetworkPermissionedEthereumNetworksBesuNodes)
			if ln > 1 && i < ln-1 {
				o.R.NetworkPermissionedEthereumNetworksBesuNodes[i] = o.R.NetworkPermissionedEthereumNetworksBesuNodes[ln-1]
			}
			o.R.NetworkPermissionedEthereumNetworksBesuNodes = o.R.NetworkPermissionedEthereumNetworksBesuNodes[:ln-1]
			break
		}
	}

	return nil
}

// AddNetworkPermissionedEthereumNetworksExternalInterfaces adds the given related objects to the existing relationships
// of the permissioned_ethereum_network, optionally inserting them as new records.
// Appends related to o.R.NetworkPermissionedEthereumNetworksExternalInterfaces.
// Sets related.R.Network appropriately.
func (o *PermissionedEthereumNetwork) AddNetworkPermissionedEthereumNetworksExternalInterfaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PermissionedEthereumNetworksExternalInterface) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NetworkID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"permissioned_ethereum_networks_external_interfaces\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"network_id"}),
				strmangle.WhereClause("\"", "\"", 2, permissionedEthereumNetworksExternalInterfacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NetworkID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &permissionedEthereumNetworkR{
			NetworkPermissionedEthereumNetworksExternalInterfaces: related,
		}
	} else {
		o.R.NetworkPermissionedEthereumNetworksExternalInterfaces = append(o.R.NetworkPermissionedEthereumNetworksExternalInterfaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &permissionedEthereumNetworksExternalInterfaceR{
				Network: o,
			}
		} else {
			rel.R.Network = o
		}
	}
	return nil
}

// SetNetworkPermissionedEthereumNetworksExternalInterfaces removes all previously related items of the
// permissioned_ethereum_network replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Network's NetworkPermissionedEthereumNetworksExternalInterfaces accordingly.
// Replaces o.R.NetworkPermissionedEthereumNetworksExternalInterfaces with related.
// Sets related.R.Network's NetworkPermissionedEthereumNetworksExternalInterfaces accordingly.
func (o *PermissionedEthereumNetwork) SetNetworkPermissionedEthereumNetworksExternalInterfaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PermissionedEthereumNetworksExternalInterface) error {
	query := "update \"permissioned_ethereum_networks_external_interfaces\" set \"network_id\" = null where \"network_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NetworkPermissionedEthereumNetworksExternalInterfaces {
			queries.SetScanner(&rel.NetworkID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Network = nil
		}

		o.R.NetworkPermissionedEthereumNetworksExternalInterfaces = nil
	}
	return o.AddNetworkPermissionedEthereumNetworksExternalInterfaces(ctx, exec, insert, related...)
}

// RemoveNetworkPermissionedEthereumNetworksExternalInterfaces relationships from objects passed in.
// Removes related items from R.NetworkPermissionedEthereumNetworksExternalInterfaces (uses pointer comparison, removal does not keep order)
// Sets related.R.Network.
func (o *PermissionedEthereumNetwork) RemoveNetworkPermissionedEthereumNetworksExternalInterfaces(ctx context.Context, exec boil.ContextExecutor, related ...*PermissionedEthereumNetworksExternalInterface) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NetworkID, nil)
		if rel.R != nil {
			rel.R.Network = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("network_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NetworkPermissionedEthereumNetworksExternalInterfaces {
			if rel != ri {
				continue
			}

			ln := len(o.R.NetworkPermissionedEthereumNetworksExternalInterfaces)
			if ln > 1 && i < ln-1 {
				o.R.NetworkPermissionedEthereumNetworksExternalInterfaces[i] = o.R.NetworkPermissionedEthereumNetworksExternalInterfaces[ln-1]
			}
			o.R.NetworkPermissionedEthereumNetworksExternalInterfaces = o.R.NetworkPermissionedEthereumNetworksExternalInterfaces[:ln-1]
			break
		}
	}

	return nil
}

// PermissionedEthereumNetworks retrieves all the records using an executor.
func PermissionedEthereumNetworks(mods ...qm.QueryMod) permissionedEthereumNetworkQuery {
	mods = append(mods, qm.From("\"permissioned_ethereum_networks\""))
	return permissionedEthereumNetworkQuery{NewQuery(mods...)}
}

// FindPermissionedEthereumNetwork retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPermissionedEthereumNetwork(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PermissionedEthereumNetwork, error) {
	permissionedEthereumNetworkObj := &PermissionedEthereumNetwork{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"permissioned_ethereum_networks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, permissionedEthereumNetworkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from permissioned_ethereum_networks")
	}

	return permissionedEthereumNetworkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PermissionedEthereumNetwork) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no permissioned_ethereum_networks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permissionedEthereumNetworkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	permissionedEthereumNetworkInsertCacheMut.RLock()
	cache, cached := permissionedEthereumNetworkInsertCache[key]
	permissionedEthereumNetworkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			permissionedEthereumNetworkAllColumns,
			permissionedEthereumNetworkColumnsWithDefault,
			permissionedEthereumNetworkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworkType, permissionedEthereumNetworkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(permissionedEthereumNetworkType, permissionedEthereumNetworkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"permissioned_ethereum_networks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"permissioned_ethereum_networks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into permissioned_ethereum_networks")
	}

	if !cached {
		permissionedEthereumNetworkInsertCacheMut.Lock()
		permissionedEthereumNetworkInsertCache[key] = cache
		permissionedEthereumNetworkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PermissionedEthereumNetwork.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PermissionedEthereumNetwork) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	permissionedEthereumNetworkUpdateCacheMut.RLock()
	cache, cached := permissionedEthereumNetworkUpdateCache[key]
	permissionedEthereumNetworkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			permissionedEthereumNetworkAllColumns,
			permissionedEthereumNetworkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update permissioned_ethereum_networks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"permissioned_ethereum_networks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, permissionedEthereumNetworkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworkType, permissionedEthereumNetworkMapping, append(wl, permissionedEthereumNetworkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update permissioned_ethereum_networks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for permissioned_ethereum_networks")
	}

	if !cached {
		permissionedEthereumNetworkUpdateCacheMut.Lock()
		permissionedEthereumNetworkUpdateCache[key] = cache
		permissionedEthereumNetworkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q permissionedEthereumNetworkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for permissioned_ethereum_networks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for permissioned_ethereum_networks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PermissionedEthereumNetworkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"permissioned_ethereum_networks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, permissionedEthereumNetworkPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in permissionedEthereumNetwork slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all permissionedEthereumNetwork")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PermissionedEthereumNetwork) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no permissioned_ethereum_networks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permissionedEthereumNetworkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	permissionedEthereumNetworkUpsertCacheMut.RLock()
	cache, cached := permissionedEthereumNetworkUpsertCache[key]
	permissionedEthereumNetworkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			permissionedEthereumNetworkAllColumns,
			permissionedEthereumNetworkColumnsWithDefault,
			permissionedEthereumNetworkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			permissionedEthereumNetworkAllColumns,
			permissionedEthereumNetworkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert permissioned_ethereum_networks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(permissionedEthereumNetworkPrimaryKeyColumns))
			copy(conflict, permissionedEthereumNetworkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"permissioned_ethereum_networks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworkType, permissionedEthereumNetworkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(permissionedEthereumNetworkType, permissionedEthereumNetworkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert permissioned_ethereum_networks")
	}

	if !cached {
		permissionedEthereumNetworkUpsertCacheMut.Lock()
		permissionedEthereumNetworkUpsertCache[key] = cache
		permissionedEthereumNetworkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PermissionedEthereumNetwork record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PermissionedEthereumNetwork) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no PermissionedEthereumNetwork provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), permissionedEthereumNetworkPrimaryKeyMapping)
	sql := "DELETE FROM \"permissioned_ethereum_networks\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from permissioned_ethereum_networks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for permissioned_ethereum_networks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q permissionedEthereumNetworkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no permissionedEthereumNetworkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from permissioned_ethereum_networks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for permissioned_ethereum_networks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PermissionedEthereumNetworkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(permissionedEthereumNetworkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"permissioned_ethereum_networks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permissionedEthereumNetworkPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from permissionedEthereumNetwork slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for permissioned_ethereum_networks")
	}

	if len(permissionedEthereumNetworkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PermissionedEthereumNetwork) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPermissionedEthereumNetwork(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PermissionedEthereumNetworkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PermissionedEthereumNetworkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"permissioned_ethereum_networks\".* FROM \"permissioned_ethereum_networks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permissionedEthereumNetworkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PermissionedEthereumNetworkSlice")
	}

	*o = slice

	return nil
}

// PermissionedEthereumNetworkExists checks if the PermissionedEthereumNetwork row exists.
func PermissionedEthereumNetworkExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"permissioned_ethereum_networks\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if permissioned_ethereum_networks exists")
	}

	return exists, nil
}
