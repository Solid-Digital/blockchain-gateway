// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PublicEthereumNetworksBasicauthCred is an object representing the database table.
type PublicEthereumNetworksBasicauthCred struct {
	ID                                               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username                                         null.String `boil:"username" json:"username,omitempty" toml:"username" yaml:"username,omitempty"`
	Password                                         null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	PublicEthereumNetworksNetworkExternalInterfaceID null.Int64  `boil:"public_ethereum_networks_network_external_interface_id" json:"publicEthereumNetworksNetworkExternalInterfaceID,omitempty" toml:"publicEthereumNetworksNetworkExternalInterfaceID" yaml:"publicEthereumNetworksNetworkExternalInterfaceID,omitempty"`
	InsertedAt                                       time.Time   `boil:"inserted_at" json:"insertedAt" toml:"insertedAt" yaml:"insertedAt"`
	UpdatedAt                                        time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *publicEthereumNetworksBasicauthCredR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publicEthereumNetworksBasicauthCredL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublicEthereumNetworksBasicauthCredColumns = struct {
	ID                                               string
	Username                                         string
	Password                                         string
	PublicEthereumNetworksNetworkExternalInterfaceID string
	InsertedAt                                       string
	UpdatedAt                                        string
}{
	ID:       "id",
	Username: "username",
	Password: "password",
	PublicEthereumNetworksNetworkExternalInterfaceID: "public_ethereum_networks_network_external_interface_id",
	InsertedAt: "inserted_at",
	UpdatedAt:  "updated_at",
}

// Generated where

var PublicEthereumNetworksBasicauthCredWhere = struct {
	ID                                               whereHelperint64
	Username                                         whereHelpernull_String
	Password                                         whereHelpernull_String
	PublicEthereumNetworksNetworkExternalInterfaceID whereHelpernull_Int64
	InsertedAt                                       whereHelpertime_Time
	UpdatedAt                                        whereHelpertime_Time
}{
	ID:       whereHelperint64{field: "\"public_ethereum_networks_basicauth_creds\".\"id\""},
	Username: whereHelpernull_String{field: "\"public_ethereum_networks_basicauth_creds\".\"username\""},
	Password: whereHelpernull_String{field: "\"public_ethereum_networks_basicauth_creds\".\"password\""},
	PublicEthereumNetworksNetworkExternalInterfaceID: whereHelpernull_Int64{field: "\"public_ethereum_networks_basicauth_creds\".\"public_ethereum_networks_network_external_interface_id\""},
	InsertedAt: whereHelpertime_Time{field: "\"public_ethereum_networks_basicauth_creds\".\"inserted_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"public_ethereum_networks_basicauth_creds\".\"updated_at\""},
}

// PublicEthereumNetworksBasicauthCredRels is where relationship names are stored.
var PublicEthereumNetworksBasicauthCredRels = struct {
	PublicEthereumNetworksNetworkExternalInterface string
}{
	PublicEthereumNetworksNetworkExternalInterface: "PublicEthereumNetworksNetworkExternalInterface",
}

// publicEthereumNetworksBasicauthCredR is where relationships are stored.
type publicEthereumNetworksBasicauthCredR struct {
	PublicEthereumNetworksNetworkExternalInterface *PublicEthereumNetworksNetworkExternalInterface
}

// NewStruct creates a new relationship struct
func (*publicEthereumNetworksBasicauthCredR) NewStruct() *publicEthereumNetworksBasicauthCredR {
	return &publicEthereumNetworksBasicauthCredR{}
}

// publicEthereumNetworksBasicauthCredL is where Load methods for each relationship are stored.
type publicEthereumNetworksBasicauthCredL struct{}

var (
	publicEthereumNetworksBasicauthCredAllColumns            = []string{"id", "username", "password", "public_ethereum_networks_network_external_interface_id", "inserted_at", "updated_at"}
	publicEthereumNetworksBasicauthCredColumnsWithoutDefault = []string{"username", "password", "public_ethereum_networks_network_external_interface_id", "inserted_at", "updated_at"}
	publicEthereumNetworksBasicauthCredColumnsWithDefault    = []string{"id"}
	publicEthereumNetworksBasicauthCredPrimaryKeyColumns     = []string{"id"}
)

type (
	// PublicEthereumNetworksBasicauthCredSlice is an alias for a slice of pointers to PublicEthereumNetworksBasicauthCred.
	// This should generally be used opposed to []PublicEthereumNetworksBasicauthCred.
	PublicEthereumNetworksBasicauthCredSlice []*PublicEthereumNetworksBasicauthCred
	// PublicEthereumNetworksBasicauthCredHook is the signature for custom PublicEthereumNetworksBasicauthCred hook methods
	PublicEthereumNetworksBasicauthCredHook func(context.Context, boil.ContextExecutor, *PublicEthereumNetworksBasicauthCred) error

	publicEthereumNetworksBasicauthCredQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publicEthereumNetworksBasicauthCredType                 = reflect.TypeOf(&PublicEthereumNetworksBasicauthCred{})
	publicEthereumNetworksBasicauthCredMapping              = queries.MakeStructMapping(publicEthereumNetworksBasicauthCredType)
	publicEthereumNetworksBasicauthCredPrimaryKeyMapping, _ = queries.BindMapping(publicEthereumNetworksBasicauthCredType, publicEthereumNetworksBasicauthCredMapping, publicEthereumNetworksBasicauthCredPrimaryKeyColumns)
	publicEthereumNetworksBasicauthCredInsertCacheMut       sync.RWMutex
	publicEthereumNetworksBasicauthCredInsertCache          = make(map[string]insertCache)
	publicEthereumNetworksBasicauthCredUpdateCacheMut       sync.RWMutex
	publicEthereumNetworksBasicauthCredUpdateCache          = make(map[string]updateCache)
	publicEthereumNetworksBasicauthCredUpsertCacheMut       sync.RWMutex
	publicEthereumNetworksBasicauthCredUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publicEthereumNetworksBasicauthCredBeforeInsertHooks []PublicEthereumNetworksBasicauthCredHook
var publicEthereumNetworksBasicauthCredBeforeUpdateHooks []PublicEthereumNetworksBasicauthCredHook
var publicEthereumNetworksBasicauthCredBeforeDeleteHooks []PublicEthereumNetworksBasicauthCredHook
var publicEthereumNetworksBasicauthCredBeforeUpsertHooks []PublicEthereumNetworksBasicauthCredHook

var publicEthereumNetworksBasicauthCredAfterInsertHooks []PublicEthereumNetworksBasicauthCredHook
var publicEthereumNetworksBasicauthCredAfterSelectHooks []PublicEthereumNetworksBasicauthCredHook
var publicEthereumNetworksBasicauthCredAfterUpdateHooks []PublicEthereumNetworksBasicauthCredHook
var publicEthereumNetworksBasicauthCredAfterDeleteHooks []PublicEthereumNetworksBasicauthCredHook
var publicEthereumNetworksBasicauthCredAfterUpsertHooks []PublicEthereumNetworksBasicauthCredHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublicEthereumNetworksBasicauthCred) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksBasicauthCredAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublicEthereumNetworksBasicauthCredHook registers your hook function for all future operations.
func AddPublicEthereumNetworksBasicauthCredHook(hookPoint boil.HookPoint, publicEthereumNetworksBasicauthCredHook PublicEthereumNetworksBasicauthCredHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		publicEthereumNetworksBasicauthCredBeforeInsertHooks = append(publicEthereumNetworksBasicauthCredBeforeInsertHooks, publicEthereumNetworksBasicauthCredHook)
	case boil.BeforeUpdateHook:
		publicEthereumNetworksBasicauthCredBeforeUpdateHooks = append(publicEthereumNetworksBasicauthCredBeforeUpdateHooks, publicEthereumNetworksBasicauthCredHook)
	case boil.BeforeDeleteHook:
		publicEthereumNetworksBasicauthCredBeforeDeleteHooks = append(publicEthereumNetworksBasicauthCredBeforeDeleteHooks, publicEthereumNetworksBasicauthCredHook)
	case boil.BeforeUpsertHook:
		publicEthereumNetworksBasicauthCredBeforeUpsertHooks = append(publicEthereumNetworksBasicauthCredBeforeUpsertHooks, publicEthereumNetworksBasicauthCredHook)
	case boil.AfterInsertHook:
		publicEthereumNetworksBasicauthCredAfterInsertHooks = append(publicEthereumNetworksBasicauthCredAfterInsertHooks, publicEthereumNetworksBasicauthCredHook)
	case boil.AfterSelectHook:
		publicEthereumNetworksBasicauthCredAfterSelectHooks = append(publicEthereumNetworksBasicauthCredAfterSelectHooks, publicEthereumNetworksBasicauthCredHook)
	case boil.AfterUpdateHook:
		publicEthereumNetworksBasicauthCredAfterUpdateHooks = append(publicEthereumNetworksBasicauthCredAfterUpdateHooks, publicEthereumNetworksBasicauthCredHook)
	case boil.AfterDeleteHook:
		publicEthereumNetworksBasicauthCredAfterDeleteHooks = append(publicEthereumNetworksBasicauthCredAfterDeleteHooks, publicEthereumNetworksBasicauthCredHook)
	case boil.AfterUpsertHook:
		publicEthereumNetworksBasicauthCredAfterUpsertHooks = append(publicEthereumNetworksBasicauthCredAfterUpsertHooks, publicEthereumNetworksBasicauthCredHook)
	}
}

// One returns a single publicEthereumNetworksBasicauthCred record from the query.
func (q publicEthereumNetworksBasicauthCredQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PublicEthereumNetworksBasicauthCred, error) {
	o := &PublicEthereumNetworksBasicauthCred{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for public_ethereum_networks_basicauth_creds")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PublicEthereumNetworksBasicauthCred records from the query.
func (q publicEthereumNetworksBasicauthCredQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublicEthereumNetworksBasicauthCredSlice, error) {
	var o []*PublicEthereumNetworksBasicauthCred

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to PublicEthereumNetworksBasicauthCred slice")
	}

	if len(publicEthereumNetworksBasicauthCredAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PublicEthereumNetworksBasicauthCred records in the query.
func (q publicEthereumNetworksBasicauthCredQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count public_ethereum_networks_basicauth_creds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publicEthereumNetworksBasicauthCredQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if public_ethereum_networks_basicauth_creds exists")
	}

	return count > 0, nil
}

// PublicEthereumNetworksNetworkExternalInterface pointed to by the foreign key.
func (o *PublicEthereumNetworksBasicauthCred) PublicEthereumNetworksNetworkExternalInterface(mods ...qm.QueryMod) publicEthereumNetworksNetworkExternalInterfaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PublicEthereumNetworksNetworkExternalInterfaceID),
	}

	queryMods = append(queryMods, mods...)

	query := PublicEthereumNetworksNetworkExternalInterfaces(queryMods...)
	queries.SetFrom(query.Query, "\"public_ethereum_networks_network_external_interfaces\"")

	return query
}

// LoadPublicEthereumNetworksNetworkExternalInterface allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (publicEthereumNetworksBasicauthCredL) LoadPublicEthereumNetworksNetworkExternalInterface(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublicEthereumNetworksBasicauthCred interface{}, mods queries.Applicator) error {
	var slice []*PublicEthereumNetworksBasicauthCred
	var object *PublicEthereumNetworksBasicauthCred

	if singular {
		object = maybePublicEthereumNetworksBasicauthCred.(*PublicEthereumNetworksBasicauthCred)
	} else {
		slice = *maybePublicEthereumNetworksBasicauthCred.(*[]*PublicEthereumNetworksBasicauthCred)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publicEthereumNetworksBasicauthCredR{}
		}
		if !queries.IsNil(object.PublicEthereumNetworksNetworkExternalInterfaceID) {
			args = append(args, object.PublicEthereumNetworksNetworkExternalInterfaceID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publicEthereumNetworksBasicauthCredR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PublicEthereumNetworksNetworkExternalInterfaceID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PublicEthereumNetworksNetworkExternalInterfaceID) {
				args = append(args, obj.PublicEthereumNetworksNetworkExternalInterfaceID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`public_ethereum_networks_network_external_interfaces`), qm.WhereIn(`public_ethereum_networks_network_external_interfaces.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PublicEthereumNetworksNetworkExternalInterface")
	}

	var resultSlice []*PublicEthereumNetworksNetworkExternalInterface
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PublicEthereumNetworksNetworkExternalInterface")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for public_ethereum_networks_network_external_interfaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for public_ethereum_networks_network_external_interfaces")
	}

	if len(publicEthereumNetworksBasicauthCredAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PublicEthereumNetworksNetworkExternalInterface = foreign
		if foreign.R == nil {
			foreign.R = &publicEthereumNetworksNetworkExternalInterfaceR{}
		}
		foreign.R.PublicEthereumNetworksBasicauthCreds = append(foreign.R.PublicEthereumNetworksBasicauthCreds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PublicEthereumNetworksNetworkExternalInterfaceID, foreign.ID) {
				local.R.PublicEthereumNetworksNetworkExternalInterface = foreign
				if foreign.R == nil {
					foreign.R = &publicEthereumNetworksNetworkExternalInterfaceR{}
				}
				foreign.R.PublicEthereumNetworksBasicauthCreds = append(foreign.R.PublicEthereumNetworksBasicauthCreds, local)
				break
			}
		}
	}

	return nil
}

// SetPublicEthereumNetworksNetworkExternalInterface of the publicEthereumNetworksBasicauthCred to the related item.
// Sets o.R.PublicEthereumNetworksNetworkExternalInterface to related.
// Adds o to related.R.PublicEthereumNetworksBasicauthCreds.
func (o *PublicEthereumNetworksBasicauthCred) SetPublicEthereumNetworksNetworkExternalInterface(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PublicEthereumNetworksNetworkExternalInterface) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"public_ethereum_networks_basicauth_creds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"public_ethereum_networks_network_external_interface_id"}),
		strmangle.WhereClause("\"", "\"", 2, publicEthereumNetworksBasicauthCredPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PublicEthereumNetworksNetworkExternalInterfaceID, related.ID)
	if o.R == nil {
		o.R = &publicEthereumNetworksBasicauthCredR{
			PublicEthereumNetworksNetworkExternalInterface: related,
		}
	} else {
		o.R.PublicEthereumNetworksNetworkExternalInterface = related
	}

	if related.R == nil {
		related.R = &publicEthereumNetworksNetworkExternalInterfaceR{
			PublicEthereumNetworksBasicauthCreds: PublicEthereumNetworksBasicauthCredSlice{o},
		}
	} else {
		related.R.PublicEthereumNetworksBasicauthCreds = append(related.R.PublicEthereumNetworksBasicauthCreds, o)
	}

	return nil
}

// RemovePublicEthereumNetworksNetworkExternalInterface relationship.
// Sets o.R.PublicEthereumNetworksNetworkExternalInterface to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PublicEthereumNetworksBasicauthCred) RemovePublicEthereumNetworksNetworkExternalInterface(ctx context.Context, exec boil.ContextExecutor, related *PublicEthereumNetworksNetworkExternalInterface) error {
	var err error

	queries.SetScanner(&o.PublicEthereumNetworksNetworkExternalInterfaceID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("public_ethereum_networks_network_external_interface_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.PublicEthereumNetworksNetworkExternalInterface = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PublicEthereumNetworksBasicauthCreds {
		if queries.Equal(o.PublicEthereumNetworksNetworkExternalInterfaceID, ri.PublicEthereumNetworksNetworkExternalInterfaceID) {
			continue
		}

		ln := len(related.R.PublicEthereumNetworksBasicauthCreds)
		if ln > 1 && i < ln-1 {
			related.R.PublicEthereumNetworksBasicauthCreds[i] = related.R.PublicEthereumNetworksBasicauthCreds[ln-1]
		}
		related.R.PublicEthereumNetworksBasicauthCreds = related.R.PublicEthereumNetworksBasicauthCreds[:ln-1]
		break
	}
	return nil
}

// PublicEthereumNetworksBasicauthCreds retrieves all the records using an executor.
func PublicEthereumNetworksBasicauthCreds(mods ...qm.QueryMod) publicEthereumNetworksBasicauthCredQuery {
	mods = append(mods, qm.From("\"public_ethereum_networks_basicauth_creds\""))
	return publicEthereumNetworksBasicauthCredQuery{NewQuery(mods...)}
}

// FindPublicEthereumNetworksBasicauthCred retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublicEthereumNetworksBasicauthCred(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PublicEthereumNetworksBasicauthCred, error) {
	publicEthereumNetworksBasicauthCredObj := &PublicEthereumNetworksBasicauthCred{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"public_ethereum_networks_basicauth_creds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, publicEthereumNetworksBasicauthCredObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from public_ethereum_networks_basicauth_creds")
	}

	return publicEthereumNetworksBasicauthCredObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublicEthereumNetworksBasicauthCred) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no public_ethereum_networks_basicauth_creds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publicEthereumNetworksBasicauthCredColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publicEthereumNetworksBasicauthCredInsertCacheMut.RLock()
	cache, cached := publicEthereumNetworksBasicauthCredInsertCache[key]
	publicEthereumNetworksBasicauthCredInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publicEthereumNetworksBasicauthCredAllColumns,
			publicEthereumNetworksBasicauthCredColumnsWithDefault,
			publicEthereumNetworksBasicauthCredColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworksBasicauthCredType, publicEthereumNetworksBasicauthCredMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publicEthereumNetworksBasicauthCredType, publicEthereumNetworksBasicauthCredMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"public_ethereum_networks_basicauth_creds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"public_ethereum_networks_basicauth_creds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into public_ethereum_networks_basicauth_creds")
	}

	if !cached {
		publicEthereumNetworksBasicauthCredInsertCacheMut.Lock()
		publicEthereumNetworksBasicauthCredInsertCache[key] = cache
		publicEthereumNetworksBasicauthCredInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PublicEthereumNetworksBasicauthCred.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublicEthereumNetworksBasicauthCred) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publicEthereumNetworksBasicauthCredUpdateCacheMut.RLock()
	cache, cached := publicEthereumNetworksBasicauthCredUpdateCache[key]
	publicEthereumNetworksBasicauthCredUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publicEthereumNetworksBasicauthCredAllColumns,
			publicEthereumNetworksBasicauthCredPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update public_ethereum_networks_basicauth_creds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"public_ethereum_networks_basicauth_creds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publicEthereumNetworksBasicauthCredPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworksBasicauthCredType, publicEthereumNetworksBasicauthCredMapping, append(wl, publicEthereumNetworksBasicauthCredPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update public_ethereum_networks_basicauth_creds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for public_ethereum_networks_basicauth_creds")
	}

	if !cached {
		publicEthereumNetworksBasicauthCredUpdateCacheMut.Lock()
		publicEthereumNetworksBasicauthCredUpdateCache[key] = cache
		publicEthereumNetworksBasicauthCredUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publicEthereumNetworksBasicauthCredQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for public_ethereum_networks_basicauth_creds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for public_ethereum_networks_basicauth_creds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublicEthereumNetworksBasicauthCredSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworksBasicauthCredPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"public_ethereum_networks_basicauth_creds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publicEthereumNetworksBasicauthCredPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in publicEthereumNetworksBasicauthCred slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all publicEthereumNetworksBasicauthCred")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublicEthereumNetworksBasicauthCred) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no public_ethereum_networks_basicauth_creds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publicEthereumNetworksBasicauthCredColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publicEthereumNetworksBasicauthCredUpsertCacheMut.RLock()
	cache, cached := publicEthereumNetworksBasicauthCredUpsertCache[key]
	publicEthereumNetworksBasicauthCredUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			publicEthereumNetworksBasicauthCredAllColumns,
			publicEthereumNetworksBasicauthCredColumnsWithDefault,
			publicEthereumNetworksBasicauthCredColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			publicEthereumNetworksBasicauthCredAllColumns,
			publicEthereumNetworksBasicauthCredPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert public_ethereum_networks_basicauth_creds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(publicEthereumNetworksBasicauthCredPrimaryKeyColumns))
			copy(conflict, publicEthereumNetworksBasicauthCredPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"public_ethereum_networks_basicauth_creds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworksBasicauthCredType, publicEthereumNetworksBasicauthCredMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publicEthereumNetworksBasicauthCredType, publicEthereumNetworksBasicauthCredMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert public_ethereum_networks_basicauth_creds")
	}

	if !cached {
		publicEthereumNetworksBasicauthCredUpsertCacheMut.Lock()
		publicEthereumNetworksBasicauthCredUpsertCache[key] = cache
		publicEthereumNetworksBasicauthCredUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PublicEthereumNetworksBasicauthCred record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublicEthereumNetworksBasicauthCred) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no PublicEthereumNetworksBasicauthCred provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publicEthereumNetworksBasicauthCredPrimaryKeyMapping)
	sql := "DELETE FROM \"public_ethereum_networks_basicauth_creds\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from public_ethereum_networks_basicauth_creds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for public_ethereum_networks_basicauth_creds")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publicEthereumNetworksBasicauthCredQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no publicEthereumNetworksBasicauthCredQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from public_ethereum_networks_basicauth_creds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for public_ethereum_networks_basicauth_creds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublicEthereumNetworksBasicauthCredSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publicEthereumNetworksBasicauthCredBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworksBasicauthCredPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"public_ethereum_networks_basicauth_creds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publicEthereumNetworksBasicauthCredPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from publicEthereumNetworksBasicauthCred slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for public_ethereum_networks_basicauth_creds")
	}

	if len(publicEthereumNetworksBasicauthCredAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublicEthereumNetworksBasicauthCred) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublicEthereumNetworksBasicauthCred(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublicEthereumNetworksBasicauthCredSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublicEthereumNetworksBasicauthCredSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworksBasicauthCredPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"public_ethereum_networks_basicauth_creds\".* FROM \"public_ethereum_networks_basicauth_creds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publicEthereumNetworksBasicauthCredPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PublicEthereumNetworksBasicauthCredSlice")
	}

	*o = slice

	return nil
}

// PublicEthereumNetworksBasicauthCredExists checks if the PublicEthereumNetworksBasicauthCred row exists.
func PublicEthereumNetworksBasicauthCredExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"public_ethereum_networks_basicauth_creds\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if public_ethereum_networks_basicauth_creds exists")
	}

	return exists, nil
}
