// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PublicEthereumNetworksNetworkExternalInterface is an object representing the database table.
type PublicEthereumNetworksNetworkExternalInterface struct {
	ID                int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Protocol          null.String `boil:"protocol" json:"protocol,omitempty" toml:"protocol" yaml:"protocol,omitempty"`
	URL               null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	ConfigurationLink null.String `boil:"configuration_link" json:"configurationLink,omitempty" toml:"configurationLink" yaml:"configurationLink,omitempty"`
	DocLink           null.String `boil:"doc_link" json:"docLink,omitempty" toml:"docLink" yaml:"docLink,omitempty"`
	NetworkID         null.Int64  `boil:"network_id" json:"networkID,omitempty" toml:"networkID" yaml:"networkID,omitempty"`
	InsertedAt        time.Time   `boil:"inserted_at" json:"insertedAt" toml:"insertedAt" yaml:"insertedAt"`
	UpdatedAt         time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *publicEthereumNetworksNetworkExternalInterfaceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publicEthereumNetworksNetworkExternalInterfaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublicEthereumNetworksNetworkExternalInterfaceColumns = struct {
	ID                string
	Protocol          string
	URL               string
	ConfigurationLink string
	DocLink           string
	NetworkID         string
	InsertedAt        string
	UpdatedAt         string
}{
	ID:                "id",
	Protocol:          "protocol",
	URL:               "url",
	ConfigurationLink: "configuration_link",
	DocLink:           "doc_link",
	NetworkID:         "network_id",
	InsertedAt:        "inserted_at",
	UpdatedAt:         "updated_at",
}

// Generated where

var PublicEthereumNetworksNetworkExternalInterfaceWhere = struct {
	ID                whereHelperint64
	Protocol          whereHelpernull_String
	URL               whereHelpernull_String
	ConfigurationLink whereHelpernull_String
	DocLink           whereHelpernull_String
	NetworkID         whereHelpernull_Int64
	InsertedAt        whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "\"public_ethereum_networks_network_external_interfaces\".\"id\""},
	Protocol:          whereHelpernull_String{field: "\"public_ethereum_networks_network_external_interfaces\".\"protocol\""},
	URL:               whereHelpernull_String{field: "\"public_ethereum_networks_network_external_interfaces\".\"url\""},
	ConfigurationLink: whereHelpernull_String{field: "\"public_ethereum_networks_network_external_interfaces\".\"configuration_link\""},
	DocLink:           whereHelpernull_String{field: "\"public_ethereum_networks_network_external_interfaces\".\"doc_link\""},
	NetworkID:         whereHelpernull_Int64{field: "\"public_ethereum_networks_network_external_interfaces\".\"network_id\""},
	InsertedAt:        whereHelpertime_Time{field: "\"public_ethereum_networks_network_external_interfaces\".\"inserted_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"public_ethereum_networks_network_external_interfaces\".\"updated_at\""},
}

// PublicEthereumNetworksNetworkExternalInterfaceRels is where relationship names are stored.
var PublicEthereumNetworksNetworkExternalInterfaceRels = struct {
	Network                              string
	PublicEthereumNetworksBasicauthCreds string
}{
	Network:                              "Network",
	PublicEthereumNetworksBasicauthCreds: "PublicEthereumNetworksBasicauthCreds",
}

// publicEthereumNetworksNetworkExternalInterfaceR is where relationships are stored.
type publicEthereumNetworksNetworkExternalInterfaceR struct {
	Network                              *PublicEthereumNetwork
	PublicEthereumNetworksBasicauthCreds PublicEthereumNetworksBasicauthCredSlice
}

// NewStruct creates a new relationship struct
func (*publicEthereumNetworksNetworkExternalInterfaceR) NewStruct() *publicEthereumNetworksNetworkExternalInterfaceR {
	return &publicEthereumNetworksNetworkExternalInterfaceR{}
}

// publicEthereumNetworksNetworkExternalInterfaceL is where Load methods for each relationship are stored.
type publicEthereumNetworksNetworkExternalInterfaceL struct{}

var (
	publicEthereumNetworksNetworkExternalInterfaceAllColumns            = []string{"id", "protocol", "url", "configuration_link", "doc_link", "network_id", "inserted_at", "updated_at"}
	publicEthereumNetworksNetworkExternalInterfaceColumnsWithoutDefault = []string{"protocol", "url", "configuration_link", "doc_link", "network_id", "inserted_at", "updated_at"}
	publicEthereumNetworksNetworkExternalInterfaceColumnsWithDefault    = []string{"id"}
	publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns     = []string{"id"}
)

type (
	// PublicEthereumNetworksNetworkExternalInterfaceSlice is an alias for a slice of pointers to PublicEthereumNetworksNetworkExternalInterface.
	// This should generally be used opposed to []PublicEthereumNetworksNetworkExternalInterface.
	PublicEthereumNetworksNetworkExternalInterfaceSlice []*PublicEthereumNetworksNetworkExternalInterface
	// PublicEthereumNetworksNetworkExternalInterfaceHook is the signature for custom PublicEthereumNetworksNetworkExternalInterface hook methods
	PublicEthereumNetworksNetworkExternalInterfaceHook func(context.Context, boil.ContextExecutor, *PublicEthereumNetworksNetworkExternalInterface) error

	publicEthereumNetworksNetworkExternalInterfaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publicEthereumNetworksNetworkExternalInterfaceType                 = reflect.TypeOf(&PublicEthereumNetworksNetworkExternalInterface{})
	publicEthereumNetworksNetworkExternalInterfaceMapping              = queries.MakeStructMapping(publicEthereumNetworksNetworkExternalInterfaceType)
	publicEthereumNetworksNetworkExternalInterfacePrimaryKeyMapping, _ = queries.BindMapping(publicEthereumNetworksNetworkExternalInterfaceType, publicEthereumNetworksNetworkExternalInterfaceMapping, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns)
	publicEthereumNetworksNetworkExternalInterfaceInsertCacheMut       sync.RWMutex
	publicEthereumNetworksNetworkExternalInterfaceInsertCache          = make(map[string]insertCache)
	publicEthereumNetworksNetworkExternalInterfaceUpdateCacheMut       sync.RWMutex
	publicEthereumNetworksNetworkExternalInterfaceUpdateCache          = make(map[string]updateCache)
	publicEthereumNetworksNetworkExternalInterfaceUpsertCacheMut       sync.RWMutex
	publicEthereumNetworksNetworkExternalInterfaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var publicEthereumNetworksNetworkExternalInterfaceBeforeInsertHooks []PublicEthereumNetworksNetworkExternalInterfaceHook
var publicEthereumNetworksNetworkExternalInterfaceBeforeUpdateHooks []PublicEthereumNetworksNetworkExternalInterfaceHook
var publicEthereumNetworksNetworkExternalInterfaceBeforeDeleteHooks []PublicEthereumNetworksNetworkExternalInterfaceHook
var publicEthereumNetworksNetworkExternalInterfaceBeforeUpsertHooks []PublicEthereumNetworksNetworkExternalInterfaceHook

var publicEthereumNetworksNetworkExternalInterfaceAfterInsertHooks []PublicEthereumNetworksNetworkExternalInterfaceHook
var publicEthereumNetworksNetworkExternalInterfaceAfterSelectHooks []PublicEthereumNetworksNetworkExternalInterfaceHook
var publicEthereumNetworksNetworkExternalInterfaceAfterUpdateHooks []PublicEthereumNetworksNetworkExternalInterfaceHook
var publicEthereumNetworksNetworkExternalInterfaceAfterDeleteHooks []PublicEthereumNetworksNetworkExternalInterfaceHook
var publicEthereumNetworksNetworkExternalInterfaceAfterUpsertHooks []PublicEthereumNetworksNetworkExternalInterfaceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublicEthereumNetworksNetworkExternalInterface) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range publicEthereumNetworksNetworkExternalInterfaceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublicEthereumNetworksNetworkExternalInterfaceHook registers your hook function for all future operations.
func AddPublicEthereumNetworksNetworkExternalInterfaceHook(hookPoint boil.HookPoint, publicEthereumNetworksNetworkExternalInterfaceHook PublicEthereumNetworksNetworkExternalInterfaceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		publicEthereumNetworksNetworkExternalInterfaceBeforeInsertHooks = append(publicEthereumNetworksNetworkExternalInterfaceBeforeInsertHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	case boil.BeforeUpdateHook:
		publicEthereumNetworksNetworkExternalInterfaceBeforeUpdateHooks = append(publicEthereumNetworksNetworkExternalInterfaceBeforeUpdateHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	case boil.BeforeDeleteHook:
		publicEthereumNetworksNetworkExternalInterfaceBeforeDeleteHooks = append(publicEthereumNetworksNetworkExternalInterfaceBeforeDeleteHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	case boil.BeforeUpsertHook:
		publicEthereumNetworksNetworkExternalInterfaceBeforeUpsertHooks = append(publicEthereumNetworksNetworkExternalInterfaceBeforeUpsertHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	case boil.AfterInsertHook:
		publicEthereumNetworksNetworkExternalInterfaceAfterInsertHooks = append(publicEthereumNetworksNetworkExternalInterfaceAfterInsertHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	case boil.AfterSelectHook:
		publicEthereumNetworksNetworkExternalInterfaceAfterSelectHooks = append(publicEthereumNetworksNetworkExternalInterfaceAfterSelectHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	case boil.AfterUpdateHook:
		publicEthereumNetworksNetworkExternalInterfaceAfterUpdateHooks = append(publicEthereumNetworksNetworkExternalInterfaceAfterUpdateHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	case boil.AfterDeleteHook:
		publicEthereumNetworksNetworkExternalInterfaceAfterDeleteHooks = append(publicEthereumNetworksNetworkExternalInterfaceAfterDeleteHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	case boil.AfterUpsertHook:
		publicEthereumNetworksNetworkExternalInterfaceAfterUpsertHooks = append(publicEthereumNetworksNetworkExternalInterfaceAfterUpsertHooks, publicEthereumNetworksNetworkExternalInterfaceHook)
	}
}

// One returns a single publicEthereumNetworksNetworkExternalInterface record from the query.
func (q publicEthereumNetworksNetworkExternalInterfaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PublicEthereumNetworksNetworkExternalInterface, error) {
	o := &PublicEthereumNetworksNetworkExternalInterface{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for public_ethereum_networks_network_external_interfaces")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PublicEthereumNetworksNetworkExternalInterface records from the query.
func (q publicEthereumNetworksNetworkExternalInterfaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublicEthereumNetworksNetworkExternalInterfaceSlice, error) {
	var o []*PublicEthereumNetworksNetworkExternalInterface

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to PublicEthereumNetworksNetworkExternalInterface slice")
	}

	if len(publicEthereumNetworksNetworkExternalInterfaceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PublicEthereumNetworksNetworkExternalInterface records in the query.
func (q publicEthereumNetworksNetworkExternalInterfaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count public_ethereum_networks_network_external_interfaces rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publicEthereumNetworksNetworkExternalInterfaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if public_ethereum_networks_network_external_interfaces exists")
	}

	return count > 0, nil
}

// Network pointed to by the foreign key.
func (o *PublicEthereumNetworksNetworkExternalInterface) Network(mods ...qm.QueryMod) publicEthereumNetworkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NetworkID),
	}

	queryMods = append(queryMods, mods...)

	query := PublicEthereumNetworks(queryMods...)
	queries.SetFrom(query.Query, "\"public_ethereum_networks\"")

	return query
}

// PublicEthereumNetworksBasicauthCreds retrieves all the public_ethereum_networks_basicauth_cred's PublicEthereumNetworksBasicauthCreds with an executor.
func (o *PublicEthereumNetworksNetworkExternalInterface) PublicEthereumNetworksBasicauthCreds(mods ...qm.QueryMod) publicEthereumNetworksBasicauthCredQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"public_ethereum_networks_basicauth_creds\".\"public_ethereum_networks_network_external_interface_id\"=?", o.ID),
	)

	query := PublicEthereumNetworksBasicauthCreds(queryMods...)
	queries.SetFrom(query.Query, "\"public_ethereum_networks_basicauth_creds\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"public_ethereum_networks_basicauth_creds\".*"})
	}

	return query
}

// LoadNetwork allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (publicEthereumNetworksNetworkExternalInterfaceL) LoadNetwork(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublicEthereumNetworksNetworkExternalInterface interface{}, mods queries.Applicator) error {
	var slice []*PublicEthereumNetworksNetworkExternalInterface
	var object *PublicEthereumNetworksNetworkExternalInterface

	if singular {
		object = maybePublicEthereumNetworksNetworkExternalInterface.(*PublicEthereumNetworksNetworkExternalInterface)
	} else {
		slice = *maybePublicEthereumNetworksNetworkExternalInterface.(*[]*PublicEthereumNetworksNetworkExternalInterface)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publicEthereumNetworksNetworkExternalInterfaceR{}
		}
		if !queries.IsNil(object.NetworkID) {
			args = append(args, object.NetworkID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publicEthereumNetworksNetworkExternalInterfaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NetworkID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.NetworkID) {
				args = append(args, obj.NetworkID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`public_ethereum_networks`), qm.WhereIn(`public_ethereum_networks.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PublicEthereumNetwork")
	}

	var resultSlice []*PublicEthereumNetwork
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PublicEthereumNetwork")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for public_ethereum_networks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for public_ethereum_networks")
	}

	if len(publicEthereumNetworksNetworkExternalInterfaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Network = foreign
		if foreign.R == nil {
			foreign.R = &publicEthereumNetworkR{}
		}
		foreign.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = append(foreign.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NetworkID, foreign.ID) {
				local.R.Network = foreign
				if foreign.R == nil {
					foreign.R = &publicEthereumNetworkR{}
				}
				foreign.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = append(foreign.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces, local)
				break
			}
		}
	}

	return nil
}

// LoadPublicEthereumNetworksBasicauthCreds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (publicEthereumNetworksNetworkExternalInterfaceL) LoadPublicEthereumNetworksBasicauthCreds(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublicEthereumNetworksNetworkExternalInterface interface{}, mods queries.Applicator) error {
	var slice []*PublicEthereumNetworksNetworkExternalInterface
	var object *PublicEthereumNetworksNetworkExternalInterface

	if singular {
		object = maybePublicEthereumNetworksNetworkExternalInterface.(*PublicEthereumNetworksNetworkExternalInterface)
	} else {
		slice = *maybePublicEthereumNetworksNetworkExternalInterface.(*[]*PublicEthereumNetworksNetworkExternalInterface)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publicEthereumNetworksNetworkExternalInterfaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publicEthereumNetworksNetworkExternalInterfaceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`public_ethereum_networks_basicauth_creds`), qm.WhereIn(`public_ethereum_networks_basicauth_creds.public_ethereum_networks_network_external_interface_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load public_ethereum_networks_basicauth_creds")
	}

	var resultSlice []*PublicEthereumNetworksBasicauthCred
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice public_ethereum_networks_basicauth_creds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on public_ethereum_networks_basicauth_creds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for public_ethereum_networks_basicauth_creds")
	}

	if len(publicEthereumNetworksBasicauthCredAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PublicEthereumNetworksBasicauthCreds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &publicEthereumNetworksBasicauthCredR{}
			}
			foreign.R.PublicEthereumNetworksNetworkExternalInterface = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PublicEthereumNetworksNetworkExternalInterfaceID) {
				local.R.PublicEthereumNetworksBasicauthCreds = append(local.R.PublicEthereumNetworksBasicauthCreds, foreign)
				if foreign.R == nil {
					foreign.R = &publicEthereumNetworksBasicauthCredR{}
				}
				foreign.R.PublicEthereumNetworksNetworkExternalInterface = local
				break
			}
		}
	}

	return nil
}

// SetNetwork of the publicEthereumNetworksNetworkExternalInterface to the related item.
// Sets o.R.Network to related.
// Adds o to related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces.
func (o *PublicEthereumNetworksNetworkExternalInterface) SetNetwork(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PublicEthereumNetwork) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"public_ethereum_networks_network_external_interfaces\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"network_id"}),
		strmangle.WhereClause("\"", "\"", 2, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NetworkID, related.ID)
	if o.R == nil {
		o.R = &publicEthereumNetworksNetworkExternalInterfaceR{
			Network: related,
		}
	} else {
		o.R.Network = related
	}

	if related.R == nil {
		related.R = &publicEthereumNetworkR{
			NetworkPublicEthereumNetworksNetworkExternalInterfaces: PublicEthereumNetworksNetworkExternalInterfaceSlice{o},
		}
	} else {
		related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = append(related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces, o)
	}

	return nil
}

// RemoveNetwork relationship.
// Sets o.R.Network to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PublicEthereumNetworksNetworkExternalInterface) RemoveNetwork(ctx context.Context, exec boil.ContextExecutor, related *PublicEthereumNetwork) error {
	var err error

	queries.SetScanner(&o.NetworkID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("network_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Network = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces {
		if queries.Equal(o.NetworkID, ri.NetworkID) {
			continue
		}

		ln := len(related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces)
		if ln > 1 && i < ln-1 {
			related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces[i] = related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces[ln-1]
		}
		related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces = related.R.NetworkPublicEthereumNetworksNetworkExternalInterfaces[:ln-1]
		break
	}
	return nil
}

// AddPublicEthereumNetworksBasicauthCreds adds the given related objects to the existing relationships
// of the public_ethereum_networks_network_external_interface, optionally inserting them as new records.
// Appends related to o.R.PublicEthereumNetworksBasicauthCreds.
// Sets related.R.PublicEthereumNetworksNetworkExternalInterface appropriately.
func (o *PublicEthereumNetworksNetworkExternalInterface) AddPublicEthereumNetworksBasicauthCreds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PublicEthereumNetworksBasicauthCred) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PublicEthereumNetworksNetworkExternalInterfaceID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"public_ethereum_networks_basicauth_creds\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"public_ethereum_networks_network_external_interface_id"}),
				strmangle.WhereClause("\"", "\"", 2, publicEthereumNetworksBasicauthCredPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PublicEthereumNetworksNetworkExternalInterfaceID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &publicEthereumNetworksNetworkExternalInterfaceR{
			PublicEthereumNetworksBasicauthCreds: related,
		}
	} else {
		o.R.PublicEthereumNetworksBasicauthCreds = append(o.R.PublicEthereumNetworksBasicauthCreds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &publicEthereumNetworksBasicauthCredR{
				PublicEthereumNetworksNetworkExternalInterface: o,
			}
		} else {
			rel.R.PublicEthereumNetworksNetworkExternalInterface = o
		}
	}
	return nil
}

// SetPublicEthereumNetworksBasicauthCreds removes all previously related items of the
// public_ethereum_networks_network_external_interface replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PublicEthereumNetworksNetworkExternalInterface's PublicEthereumNetworksBasicauthCreds accordingly.
// Replaces o.R.PublicEthereumNetworksBasicauthCreds with related.
// Sets related.R.PublicEthereumNetworksNetworkExternalInterface's PublicEthereumNetworksBasicauthCreds accordingly.
func (o *PublicEthereumNetworksNetworkExternalInterface) SetPublicEthereumNetworksBasicauthCreds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PublicEthereumNetworksBasicauthCred) error {
	query := "update \"public_ethereum_networks_basicauth_creds\" set \"public_ethereum_networks_network_external_interface_id\" = null where \"public_ethereum_networks_network_external_interface_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PublicEthereumNetworksBasicauthCreds {
			queries.SetScanner(&rel.PublicEthereumNetworksNetworkExternalInterfaceID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PublicEthereumNetworksNetworkExternalInterface = nil
		}

		o.R.PublicEthereumNetworksBasicauthCreds = nil
	}
	return o.AddPublicEthereumNetworksBasicauthCreds(ctx, exec, insert, related...)
}

// RemovePublicEthereumNetworksBasicauthCreds relationships from objects passed in.
// Removes related items from R.PublicEthereumNetworksBasicauthCreds (uses pointer comparison, removal does not keep order)
// Sets related.R.PublicEthereumNetworksNetworkExternalInterface.
func (o *PublicEthereumNetworksNetworkExternalInterface) RemovePublicEthereumNetworksBasicauthCreds(ctx context.Context, exec boil.ContextExecutor, related ...*PublicEthereumNetworksBasicauthCred) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PublicEthereumNetworksNetworkExternalInterfaceID, nil)
		if rel.R != nil {
			rel.R.PublicEthereumNetworksNetworkExternalInterface = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("public_ethereum_networks_network_external_interface_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PublicEthereumNetworksBasicauthCreds {
			if rel != ri {
				continue
			}

			ln := len(o.R.PublicEthereumNetworksBasicauthCreds)
			if ln > 1 && i < ln-1 {
				o.R.PublicEthereumNetworksBasicauthCreds[i] = o.R.PublicEthereumNetworksBasicauthCreds[ln-1]
			}
			o.R.PublicEthereumNetworksBasicauthCreds = o.R.PublicEthereumNetworksBasicauthCreds[:ln-1]
			break
		}
	}

	return nil
}

// PublicEthereumNetworksNetworkExternalInterfaces retrieves all the records using an executor.
func PublicEthereumNetworksNetworkExternalInterfaces(mods ...qm.QueryMod) publicEthereumNetworksNetworkExternalInterfaceQuery {
	mods = append(mods, qm.From("\"public_ethereum_networks_network_external_interfaces\""))
	return publicEthereumNetworksNetworkExternalInterfaceQuery{NewQuery(mods...)}
}

// FindPublicEthereumNetworksNetworkExternalInterface retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublicEthereumNetworksNetworkExternalInterface(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PublicEthereumNetworksNetworkExternalInterface, error) {
	publicEthereumNetworksNetworkExternalInterfaceObj := &PublicEthereumNetworksNetworkExternalInterface{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"public_ethereum_networks_network_external_interfaces\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, publicEthereumNetworksNetworkExternalInterfaceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from public_ethereum_networks_network_external_interfaces")
	}

	return publicEthereumNetworksNetworkExternalInterfaceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublicEthereumNetworksNetworkExternalInterface) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no public_ethereum_networks_network_external_interfaces provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publicEthereumNetworksNetworkExternalInterfaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publicEthereumNetworksNetworkExternalInterfaceInsertCacheMut.RLock()
	cache, cached := publicEthereumNetworksNetworkExternalInterfaceInsertCache[key]
	publicEthereumNetworksNetworkExternalInterfaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publicEthereumNetworksNetworkExternalInterfaceAllColumns,
			publicEthereumNetworksNetworkExternalInterfaceColumnsWithDefault,
			publicEthereumNetworksNetworkExternalInterfaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworksNetworkExternalInterfaceType, publicEthereumNetworksNetworkExternalInterfaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publicEthereumNetworksNetworkExternalInterfaceType, publicEthereumNetworksNetworkExternalInterfaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"public_ethereum_networks_network_external_interfaces\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"public_ethereum_networks_network_external_interfaces\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into public_ethereum_networks_network_external_interfaces")
	}

	if !cached {
		publicEthereumNetworksNetworkExternalInterfaceInsertCacheMut.Lock()
		publicEthereumNetworksNetworkExternalInterfaceInsertCache[key] = cache
		publicEthereumNetworksNetworkExternalInterfaceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PublicEthereumNetworksNetworkExternalInterface.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublicEthereumNetworksNetworkExternalInterface) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publicEthereumNetworksNetworkExternalInterfaceUpdateCacheMut.RLock()
	cache, cached := publicEthereumNetworksNetworkExternalInterfaceUpdateCache[key]
	publicEthereumNetworksNetworkExternalInterfaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publicEthereumNetworksNetworkExternalInterfaceAllColumns,
			publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update public_ethereum_networks_network_external_interfaces, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"public_ethereum_networks_network_external_interfaces\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworksNetworkExternalInterfaceType, publicEthereumNetworksNetworkExternalInterfaceMapping, append(wl, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update public_ethereum_networks_network_external_interfaces row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for public_ethereum_networks_network_external_interfaces")
	}

	if !cached {
		publicEthereumNetworksNetworkExternalInterfaceUpdateCacheMut.Lock()
		publicEthereumNetworksNetworkExternalInterfaceUpdateCache[key] = cache
		publicEthereumNetworksNetworkExternalInterfaceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publicEthereumNetworksNetworkExternalInterfaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for public_ethereum_networks_network_external_interfaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for public_ethereum_networks_network_external_interfaces")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublicEthereumNetworksNetworkExternalInterfaceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworksNetworkExternalInterfacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"public_ethereum_networks_network_external_interfaces\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in publicEthereumNetworksNetworkExternalInterface slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all publicEthereumNetworksNetworkExternalInterface")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublicEthereumNetworksNetworkExternalInterface) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no public_ethereum_networks_network_external_interfaces provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publicEthereumNetworksNetworkExternalInterfaceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publicEthereumNetworksNetworkExternalInterfaceUpsertCacheMut.RLock()
	cache, cached := publicEthereumNetworksNetworkExternalInterfaceUpsertCache[key]
	publicEthereumNetworksNetworkExternalInterfaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			publicEthereumNetworksNetworkExternalInterfaceAllColumns,
			publicEthereumNetworksNetworkExternalInterfaceColumnsWithDefault,
			publicEthereumNetworksNetworkExternalInterfaceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			publicEthereumNetworksNetworkExternalInterfaceAllColumns,
			publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert public_ethereum_networks_network_external_interfaces, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns))
			copy(conflict, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"public_ethereum_networks_network_external_interfaces\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(publicEthereumNetworksNetworkExternalInterfaceType, publicEthereumNetworksNetworkExternalInterfaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publicEthereumNetworksNetworkExternalInterfaceType, publicEthereumNetworksNetworkExternalInterfaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert public_ethereum_networks_network_external_interfaces")
	}

	if !cached {
		publicEthereumNetworksNetworkExternalInterfaceUpsertCacheMut.Lock()
		publicEthereumNetworksNetworkExternalInterfaceUpsertCache[key] = cache
		publicEthereumNetworksNetworkExternalInterfaceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PublicEthereumNetworksNetworkExternalInterface record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublicEthereumNetworksNetworkExternalInterface) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no PublicEthereumNetworksNetworkExternalInterface provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publicEthereumNetworksNetworkExternalInterfacePrimaryKeyMapping)
	sql := "DELETE FROM \"public_ethereum_networks_network_external_interfaces\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from public_ethereum_networks_network_external_interfaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for public_ethereum_networks_network_external_interfaces")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publicEthereumNetworksNetworkExternalInterfaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no publicEthereumNetworksNetworkExternalInterfaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from public_ethereum_networks_network_external_interfaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for public_ethereum_networks_network_external_interfaces")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublicEthereumNetworksNetworkExternalInterfaceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(publicEthereumNetworksNetworkExternalInterfaceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworksNetworkExternalInterfacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"public_ethereum_networks_network_external_interfaces\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from publicEthereumNetworksNetworkExternalInterface slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for public_ethereum_networks_network_external_interfaces")
	}

	if len(publicEthereumNetworksNetworkExternalInterfaceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublicEthereumNetworksNetworkExternalInterface) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublicEthereumNetworksNetworkExternalInterface(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublicEthereumNetworksNetworkExternalInterfaceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublicEthereumNetworksNetworkExternalInterfaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicEthereumNetworksNetworkExternalInterfacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"public_ethereum_networks_network_external_interfaces\".* FROM \"public_ethereum_networks_network_external_interfaces\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publicEthereumNetworksNetworkExternalInterfacePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PublicEthereumNetworksNetworkExternalInterfaceSlice")
	}

	*o = slice

	return nil
}

// PublicEthereumNetworksNetworkExternalInterfaceExists checks if the PublicEthereumNetworksNetworkExternalInterface row exists.
func PublicEthereumNetworksNetworkExternalInterfaceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"public_ethereum_networks_network_external_interfaces\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if public_ethereum_networks_network_external_interfaces exists")
	}

	return exists, nil
}
