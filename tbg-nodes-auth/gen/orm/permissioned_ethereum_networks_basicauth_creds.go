// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/unchainio/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PermissionedEthereumNetworksBasicauthCred is an object representing the database table.
type PermissionedEthereumNetworksBasicauthCred struct {
	ID                    int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username              null.String `boil:"username" json:"username,omitempty" toml:"username" yaml:"username,omitempty"`
	Password              null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	ExternalInterfaceUUID null.String `boil:"external_interface_uuid" json:"externalInterfaceUUID,omitempty" toml:"externalInterfaceUUID" yaml:"externalInterfaceUUID,omitempty"`
	InsertedAt            time.Time   `boil:"inserted_at" json:"insertedAt" toml:"insertedAt" yaml:"insertedAt"`
	UpdatedAt             time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *permissionedEthereumNetworksBasicauthCredR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L permissionedEthereumNetworksBasicauthCredL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PermissionedEthereumNetworksBasicauthCredColumns = struct {
	ID                    string
	Username              string
	Password              string
	ExternalInterfaceUUID string
	InsertedAt            string
	UpdatedAt             string
}{
	ID:                    "id",
	Username:              "username",
	Password:              "password",
	ExternalInterfaceUUID: "external_interface_uuid",
	InsertedAt:            "inserted_at",
	UpdatedAt:             "updated_at",
}

// Generated where

var PermissionedEthereumNetworksBasicauthCredWhere = struct {
	ID                    whereHelperint64
	Username              whereHelpernull_String
	Password              whereHelpernull_String
	ExternalInterfaceUUID whereHelpernull_String
	InsertedAt            whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperint64{field: "\"permissioned_ethereum_networks_basicauth_creds\".\"id\""},
	Username:              whereHelpernull_String{field: "\"permissioned_ethereum_networks_basicauth_creds\".\"username\""},
	Password:              whereHelpernull_String{field: "\"permissioned_ethereum_networks_basicauth_creds\".\"password\""},
	ExternalInterfaceUUID: whereHelpernull_String{field: "\"permissioned_ethereum_networks_basicauth_creds\".\"external_interface_uuid\""},
	InsertedAt:            whereHelpertime_Time{field: "\"permissioned_ethereum_networks_basicauth_creds\".\"inserted_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"permissioned_ethereum_networks_basicauth_creds\".\"updated_at\""},
}

// PermissionedEthereumNetworksBasicauthCredRels is where relationship names are stored.
var PermissionedEthereumNetworksBasicauthCredRels = struct {
	ExternalInterface string
}{
	ExternalInterface: "ExternalInterface",
}

// permissionedEthereumNetworksBasicauthCredR is where relationships are stored.
type permissionedEthereumNetworksBasicauthCredR struct {
	ExternalInterface *PermissionedEthereumNetworksExternalInterface
}

// NewStruct creates a new relationship struct
func (*permissionedEthereumNetworksBasicauthCredR) NewStruct() *permissionedEthereumNetworksBasicauthCredR {
	return &permissionedEthereumNetworksBasicauthCredR{}
}

// permissionedEthereumNetworksBasicauthCredL is where Load methods for each relationship are stored.
type permissionedEthereumNetworksBasicauthCredL struct{}

var (
	permissionedEthereumNetworksBasicauthCredAllColumns            = []string{"id", "username", "password", "external_interface_uuid", "inserted_at", "updated_at"}
	permissionedEthereumNetworksBasicauthCredColumnsWithoutDefault = []string{"username", "password", "external_interface_uuid", "inserted_at", "updated_at"}
	permissionedEthereumNetworksBasicauthCredColumnsWithDefault    = []string{"id"}
	permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns     = []string{"id"}
)

type (
	// PermissionedEthereumNetworksBasicauthCredSlice is an alias for a slice of pointers to PermissionedEthereumNetworksBasicauthCred.
	// This should generally be used opposed to []PermissionedEthereumNetworksBasicauthCred.
	PermissionedEthereumNetworksBasicauthCredSlice []*PermissionedEthereumNetworksBasicauthCred
	// PermissionedEthereumNetworksBasicauthCredHook is the signature for custom PermissionedEthereumNetworksBasicauthCred hook methods
	PermissionedEthereumNetworksBasicauthCredHook func(context.Context, boil.ContextExecutor, *PermissionedEthereumNetworksBasicauthCred) error

	permissionedEthereumNetworksBasicauthCredQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	permissionedEthereumNetworksBasicauthCredType                 = reflect.TypeOf(&PermissionedEthereumNetworksBasicauthCred{})
	permissionedEthereumNetworksBasicauthCredMapping              = queries.MakeStructMapping(permissionedEthereumNetworksBasicauthCredType)
	permissionedEthereumNetworksBasicauthCredPrimaryKeyMapping, _ = queries.BindMapping(permissionedEthereumNetworksBasicauthCredType, permissionedEthereumNetworksBasicauthCredMapping, permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns)
	permissionedEthereumNetworksBasicauthCredInsertCacheMut       sync.RWMutex
	permissionedEthereumNetworksBasicauthCredInsertCache          = make(map[string]insertCache)
	permissionedEthereumNetworksBasicauthCredUpdateCacheMut       sync.RWMutex
	permissionedEthereumNetworksBasicauthCredUpdateCache          = make(map[string]updateCache)
	permissionedEthereumNetworksBasicauthCredUpsertCacheMut       sync.RWMutex
	permissionedEthereumNetworksBasicauthCredUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var permissionedEthereumNetworksBasicauthCredBeforeInsertHooks []PermissionedEthereumNetworksBasicauthCredHook
var permissionedEthereumNetworksBasicauthCredBeforeUpdateHooks []PermissionedEthereumNetworksBasicauthCredHook
var permissionedEthereumNetworksBasicauthCredBeforeDeleteHooks []PermissionedEthereumNetworksBasicauthCredHook
var permissionedEthereumNetworksBasicauthCredBeforeUpsertHooks []PermissionedEthereumNetworksBasicauthCredHook

var permissionedEthereumNetworksBasicauthCredAfterInsertHooks []PermissionedEthereumNetworksBasicauthCredHook
var permissionedEthereumNetworksBasicauthCredAfterSelectHooks []PermissionedEthereumNetworksBasicauthCredHook
var permissionedEthereumNetworksBasicauthCredAfterUpdateHooks []PermissionedEthereumNetworksBasicauthCredHook
var permissionedEthereumNetworksBasicauthCredAfterDeleteHooks []PermissionedEthereumNetworksBasicauthCredHook
var permissionedEthereumNetworksBasicauthCredAfterUpsertHooks []PermissionedEthereumNetworksBasicauthCredHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PermissionedEthereumNetworksBasicauthCred) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range permissionedEthereumNetworksBasicauthCredAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPermissionedEthereumNetworksBasicauthCredHook registers your hook function for all future operations.
func AddPermissionedEthereumNetworksBasicauthCredHook(hookPoint boil.HookPoint, permissionedEthereumNetworksBasicauthCredHook PermissionedEthereumNetworksBasicauthCredHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		permissionedEthereumNetworksBasicauthCredBeforeInsertHooks = append(permissionedEthereumNetworksBasicauthCredBeforeInsertHooks, permissionedEthereumNetworksBasicauthCredHook)
	case boil.BeforeUpdateHook:
		permissionedEthereumNetworksBasicauthCredBeforeUpdateHooks = append(permissionedEthereumNetworksBasicauthCredBeforeUpdateHooks, permissionedEthereumNetworksBasicauthCredHook)
	case boil.BeforeDeleteHook:
		permissionedEthereumNetworksBasicauthCredBeforeDeleteHooks = append(permissionedEthereumNetworksBasicauthCredBeforeDeleteHooks, permissionedEthereumNetworksBasicauthCredHook)
	case boil.BeforeUpsertHook:
		permissionedEthereumNetworksBasicauthCredBeforeUpsertHooks = append(permissionedEthereumNetworksBasicauthCredBeforeUpsertHooks, permissionedEthereumNetworksBasicauthCredHook)
	case boil.AfterInsertHook:
		permissionedEthereumNetworksBasicauthCredAfterInsertHooks = append(permissionedEthereumNetworksBasicauthCredAfterInsertHooks, permissionedEthereumNetworksBasicauthCredHook)
	case boil.AfterSelectHook:
		permissionedEthereumNetworksBasicauthCredAfterSelectHooks = append(permissionedEthereumNetworksBasicauthCredAfterSelectHooks, permissionedEthereumNetworksBasicauthCredHook)
	case boil.AfterUpdateHook:
		permissionedEthereumNetworksBasicauthCredAfterUpdateHooks = append(permissionedEthereumNetworksBasicauthCredAfterUpdateHooks, permissionedEthereumNetworksBasicauthCredHook)
	case boil.AfterDeleteHook:
		permissionedEthereumNetworksBasicauthCredAfterDeleteHooks = append(permissionedEthereumNetworksBasicauthCredAfterDeleteHooks, permissionedEthereumNetworksBasicauthCredHook)
	case boil.AfterUpsertHook:
		permissionedEthereumNetworksBasicauthCredAfterUpsertHooks = append(permissionedEthereumNetworksBasicauthCredAfterUpsertHooks, permissionedEthereumNetworksBasicauthCredHook)
	}
}

// One returns a single permissionedEthereumNetworksBasicauthCred record from the query.
func (q permissionedEthereumNetworksBasicauthCredQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PermissionedEthereumNetworksBasicauthCred, error) {
	o := &PermissionedEthereumNetworksBasicauthCred{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for permissioned_ethereum_networks_basicauth_creds")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PermissionedEthereumNetworksBasicauthCred records from the query.
func (q permissionedEthereumNetworksBasicauthCredQuery) All(ctx context.Context, exec boil.ContextExecutor) (PermissionedEthereumNetworksBasicauthCredSlice, error) {
	var o []*PermissionedEthereumNetworksBasicauthCred

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to PermissionedEthereumNetworksBasicauthCred slice")
	}

	if len(permissionedEthereumNetworksBasicauthCredAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PermissionedEthereumNetworksBasicauthCred records in the query.
func (q permissionedEthereumNetworksBasicauthCredQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count permissioned_ethereum_networks_basicauth_creds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q permissionedEthereumNetworksBasicauthCredQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if permissioned_ethereum_networks_basicauth_creds exists")
	}

	return count > 0, nil
}

// ExternalInterface pointed to by the foreign key.
func (o *PermissionedEthereumNetworksBasicauthCred) ExternalInterface(mods ...qm.QueryMod) permissionedEthereumNetworksExternalInterfaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.ExternalInterfaceUUID),
	}

	queryMods = append(queryMods, mods...)

	query := PermissionedEthereumNetworksExternalInterfaces(queryMods...)
	queries.SetFrom(query.Query, "\"permissioned_ethereum_networks_external_interfaces\"")

	return query
}

// LoadExternalInterface allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (permissionedEthereumNetworksBasicauthCredL) LoadExternalInterface(ctx context.Context, e boil.ContextExecutor, singular bool, maybePermissionedEthereumNetworksBasicauthCred interface{}, mods queries.Applicator) error {
	var slice []*PermissionedEthereumNetworksBasicauthCred
	var object *PermissionedEthereumNetworksBasicauthCred

	if singular {
		object = maybePermissionedEthereumNetworksBasicauthCred.(*PermissionedEthereumNetworksBasicauthCred)
	} else {
		slice = *maybePermissionedEthereumNetworksBasicauthCred.(*[]*PermissionedEthereumNetworksBasicauthCred)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &permissionedEthereumNetworksBasicauthCredR{}
		}
		if !queries.IsNil(object.ExternalInterfaceUUID) {
			args = append(args, object.ExternalInterfaceUUID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &permissionedEthereumNetworksBasicauthCredR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ExternalInterfaceUUID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ExternalInterfaceUUID) {
				args = append(args, obj.ExternalInterfaceUUID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`permissioned_ethereum_networks_external_interfaces`), qm.WhereIn(`permissioned_ethereum_networks_external_interfaces.uuid in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PermissionedEthereumNetworksExternalInterface")
	}

	var resultSlice []*PermissionedEthereumNetworksExternalInterface
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PermissionedEthereumNetworksExternalInterface")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for permissioned_ethereum_networks_external_interfaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for permissioned_ethereum_networks_external_interfaces")
	}

	if len(permissionedEthereumNetworksBasicauthCredAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ExternalInterface = foreign
		if foreign.R == nil {
			foreign.R = &permissionedEthereumNetworksExternalInterfaceR{}
		}
		foreign.R.ExternalInterfacePermissionedEthereumNetworksBasicauthCred = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ExternalInterfaceUUID, foreign.UUID) {
				local.R.ExternalInterface = foreign
				if foreign.R == nil {
					foreign.R = &permissionedEthereumNetworksExternalInterfaceR{}
				}
				foreign.R.ExternalInterfacePermissionedEthereumNetworksBasicauthCred = local
				break
			}
		}
	}

	return nil
}

// SetExternalInterface of the permissionedEthereumNetworksBasicauthCred to the related item.
// Sets o.R.ExternalInterface to related.
// Adds o to related.R.ExternalInterfacePermissionedEthereumNetworksBasicauthCred.
func (o *PermissionedEthereumNetworksBasicauthCred) SetExternalInterface(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PermissionedEthereumNetworksExternalInterface) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"permissioned_ethereum_networks_basicauth_creds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"external_interface_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ExternalInterfaceUUID, related.UUID)
	if o.R == nil {
		o.R = &permissionedEthereumNetworksBasicauthCredR{
			ExternalInterface: related,
		}
	} else {
		o.R.ExternalInterface = related
	}

	if related.R == nil {
		related.R = &permissionedEthereumNetworksExternalInterfaceR{
			ExternalInterfacePermissionedEthereumNetworksBasicauthCred: o,
		}
	} else {
		related.R.ExternalInterfacePermissionedEthereumNetworksBasicauthCred = o
	}

	return nil
}

// RemoveExternalInterface relationship.
// Sets o.R.ExternalInterface to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PermissionedEthereumNetworksBasicauthCred) RemoveExternalInterface(ctx context.Context, exec boil.ContextExecutor, related *PermissionedEthereumNetworksExternalInterface) error {
	var err error

	queries.SetScanner(&o.ExternalInterfaceUUID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("external_interface_uuid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.ExternalInterface = nil
	if related == nil || related.R == nil {
		return nil
	}

	related.R.ExternalInterfacePermissionedEthereumNetworksBasicauthCred = nil
	return nil
}

// PermissionedEthereumNetworksBasicauthCreds retrieves all the records using an executor.
func PermissionedEthereumNetworksBasicauthCreds(mods ...qm.QueryMod) permissionedEthereumNetworksBasicauthCredQuery {
	mods = append(mods, qm.From("\"permissioned_ethereum_networks_basicauth_creds\""))
	return permissionedEthereumNetworksBasicauthCredQuery{NewQuery(mods...)}
}

// FindPermissionedEthereumNetworksBasicauthCred retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPermissionedEthereumNetworksBasicauthCred(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PermissionedEthereumNetworksBasicauthCred, error) {
	permissionedEthereumNetworksBasicauthCredObj := &PermissionedEthereumNetworksBasicauthCred{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"permissioned_ethereum_networks_basicauth_creds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, permissionedEthereumNetworksBasicauthCredObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from permissioned_ethereum_networks_basicauth_creds")
	}

	return permissionedEthereumNetworksBasicauthCredObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PermissionedEthereumNetworksBasicauthCred) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no permissioned_ethereum_networks_basicauth_creds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permissionedEthereumNetworksBasicauthCredColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	permissionedEthereumNetworksBasicauthCredInsertCacheMut.RLock()
	cache, cached := permissionedEthereumNetworksBasicauthCredInsertCache[key]
	permissionedEthereumNetworksBasicauthCredInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			permissionedEthereumNetworksBasicauthCredAllColumns,
			permissionedEthereumNetworksBasicauthCredColumnsWithDefault,
			permissionedEthereumNetworksBasicauthCredColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworksBasicauthCredType, permissionedEthereumNetworksBasicauthCredMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(permissionedEthereumNetworksBasicauthCredType, permissionedEthereumNetworksBasicauthCredMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"permissioned_ethereum_networks_basicauth_creds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"permissioned_ethereum_networks_basicauth_creds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into permissioned_ethereum_networks_basicauth_creds")
	}

	if !cached {
		permissionedEthereumNetworksBasicauthCredInsertCacheMut.Lock()
		permissionedEthereumNetworksBasicauthCredInsertCache[key] = cache
		permissionedEthereumNetworksBasicauthCredInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PermissionedEthereumNetworksBasicauthCred.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PermissionedEthereumNetworksBasicauthCred) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	permissionedEthereumNetworksBasicauthCredUpdateCacheMut.RLock()
	cache, cached := permissionedEthereumNetworksBasicauthCredUpdateCache[key]
	permissionedEthereumNetworksBasicauthCredUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			permissionedEthereumNetworksBasicauthCredAllColumns,
			permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update permissioned_ethereum_networks_basicauth_creds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"permissioned_ethereum_networks_basicauth_creds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworksBasicauthCredType, permissionedEthereumNetworksBasicauthCredMapping, append(wl, permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update permissioned_ethereum_networks_basicauth_creds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for permissioned_ethereum_networks_basicauth_creds")
	}

	if !cached {
		permissionedEthereumNetworksBasicauthCredUpdateCacheMut.Lock()
		permissionedEthereumNetworksBasicauthCredUpdateCache[key] = cache
		permissionedEthereumNetworksBasicauthCredUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q permissionedEthereumNetworksBasicauthCredQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for permissioned_ethereum_networks_basicauth_creds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for permissioned_ethereum_networks_basicauth_creds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PermissionedEthereumNetworksBasicauthCredSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworksBasicauthCredPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"permissioned_ethereum_networks_basicauth_creds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in permissionedEthereumNetworksBasicauthCred slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all permissionedEthereumNetworksBasicauthCred")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PermissionedEthereumNetworksBasicauthCred) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no permissioned_ethereum_networks_basicauth_creds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(permissionedEthereumNetworksBasicauthCredColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	permissionedEthereumNetworksBasicauthCredUpsertCacheMut.RLock()
	cache, cached := permissionedEthereumNetworksBasicauthCredUpsertCache[key]
	permissionedEthereumNetworksBasicauthCredUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			permissionedEthereumNetworksBasicauthCredAllColumns,
			permissionedEthereumNetworksBasicauthCredColumnsWithDefault,
			permissionedEthereumNetworksBasicauthCredColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			permissionedEthereumNetworksBasicauthCredAllColumns,
			permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert permissioned_ethereum_networks_basicauth_creds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns))
			copy(conflict, permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"permissioned_ethereum_networks_basicauth_creds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(permissionedEthereumNetworksBasicauthCredType, permissionedEthereumNetworksBasicauthCredMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(permissionedEthereumNetworksBasicauthCredType, permissionedEthereumNetworksBasicauthCredMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert permissioned_ethereum_networks_basicauth_creds")
	}

	if !cached {
		permissionedEthereumNetworksBasicauthCredUpsertCacheMut.Lock()
		permissionedEthereumNetworksBasicauthCredUpsertCache[key] = cache
		permissionedEthereumNetworksBasicauthCredUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PermissionedEthereumNetworksBasicauthCred record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PermissionedEthereumNetworksBasicauthCred) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no PermissionedEthereumNetworksBasicauthCred provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), permissionedEthereumNetworksBasicauthCredPrimaryKeyMapping)
	sql := "DELETE FROM \"permissioned_ethereum_networks_basicauth_creds\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from permissioned_ethereum_networks_basicauth_creds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for permissioned_ethereum_networks_basicauth_creds")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q permissionedEthereumNetworksBasicauthCredQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no permissionedEthereumNetworksBasicauthCredQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from permissioned_ethereum_networks_basicauth_creds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for permissioned_ethereum_networks_basicauth_creds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PermissionedEthereumNetworksBasicauthCredSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(permissionedEthereumNetworksBasicauthCredBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworksBasicauthCredPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"permissioned_ethereum_networks_basicauth_creds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from permissionedEthereumNetworksBasicauthCred slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for permissioned_ethereum_networks_basicauth_creds")
	}

	if len(permissionedEthereumNetworksBasicauthCredAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PermissionedEthereumNetworksBasicauthCred) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPermissionedEthereumNetworksBasicauthCred(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PermissionedEthereumNetworksBasicauthCredSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PermissionedEthereumNetworksBasicauthCredSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), permissionedEthereumNetworksBasicauthCredPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"permissioned_ethereum_networks_basicauth_creds\".* FROM \"permissioned_ethereum_networks_basicauth_creds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, permissionedEthereumNetworksBasicauthCredPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PermissionedEthereumNetworksBasicauthCredSlice")
	}

	*o = slice

	return nil
}

// PermissionedEthereumNetworksBasicauthCredExists checks if the PermissionedEthereumNetworksBasicauthCred row exists.
func PermissionedEthereumNetworksBasicauthCredExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"permissioned_ethereum_networks_basicauth_creds\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if permissioned_ethereum_networks_basicauth_creds exists")
	}

	return exists, nil
}
